{"files":[{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","error.rs"],"content":"use serde::de;\nuse std::fmt::{self, Debug, Display, Formatter};\nuse thiserror::Error;\n\n#[derive(Debug, Clone, Error, PartialEq)]\npub enum ErrorKind {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to deserialize anything but a\n\t/// struct at root level.\n\t#[error(\"Expected to deserialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if the input ends unexpectedly.\n\t#[error(\"Unexpected end of input\")]\n\tEof,\n\n\t/// This error will be returned if an opening s-expr was expected, but some\n\t/// other token was found.\n\t#[error(\"Expected s-expr, found token '{0}'\")]\n\tExpectedSExpr(char),\n\n\t/// This error will be returned if an opening s-expr with a certain name was\n\t/// expected, but some other token was found.\n\t#[error(\"Expected s-expr identifier {0}, found {1}\")]\n\tExpectedSExprIdentifier(&'static str, String),\n\n\t/// This error will be returned if the end of the s-expr was expected, but some\n\t/// other token was found.\n\t#[error(\"Expected end of expression\")]\n\tExpectedEoe,\n\n\t/// This error will be returned if an identifier was expected, but some other\n\t/// token was found.\n\t#[error(\"Expected identifier\")]\n\tExpectedIdentifier,\n\n\t/// This error will be returned if a number was expected, but some other token\n\t/// was found.\n\t#[error(\"Expected number\")]\n\tExpectedNumber,\n\n\t/// This error will be returned if a string was expected, but some other token\n\t/// was found.\n\t#[error(\"Expected string\")]\n\tExpectedString,\n\n\t/// This error will be returned if an option was requested. [`Option`] is\n\t/// **not supported** by this data format.\n\t#[error(\"std::option::Option cannot be deserialized by this data format\")]\n\tDeserializeOption,\n\n\t/// This error will be returned if an s-expr is found, but its name (and fields)\n\t/// were not supplied to the deserializer (e.g. `deserialize_any` was called).\n\t#[error(\"Missing s-expr type info for {0}\")]\n\tMissingSExprInfo(String),\n\n\t/// This error will be returned when attempting to deserialize a non-newtype\n\t/// enum variant in a tagged way.\n\t#[error(\"Non-newtype enum variants are not supported in tagged format\")]\n\tNonNewtypeEnumVariant,\n\n\t/// This error will be returned when attempting to deserialize a non-unit enum\n\t/// variant in an untagged way.\n\t#[error(\"Non-unit enum variants are not supported in untagged format\")]\n\tNonUnitEnumVariant,\n\n\t/// This error will be returned if there were trailing tokens after the deserialization\n\t/// finished.\n\t#[error(\"Trailing tokens\")]\n\tTrailingTokens\n}\n\n#[non_exhaustive]\npub struct Error {\n\tpub kind: ErrorKind,\n\n\t#[cfg(feature = \"backtrace\")]\n\tpub(super) backtrace: once_cell::sync::Lazy<\n\t\tbacktrace::Backtrace,\n\t\tBox<dyn FnOnce() -> backtrace::Backtrace>\n\t>\n}\n\nimpl Error {\n\t#[cfg(feature = \"backtrace\")]\n\tpub fn backtrace(&self) -> &backtrace::Backtrace {\n\t\t&*self.backtrace\n\t}\n}\n\nimpl Debug for Error {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tlet mut dbg = f.debug_struct(\"Error\");\n\t\tdbg.field(\"message\", &self.kind.to_string());\n\t\tdbg.field(\"kind\", &self.kind);\n\t\t#[cfg(feature = \"backtrace\")]\n\t\tdbg.field(\"backtrace\", self.backtrace());\n\t\tdbg.finish()\n\t}\n}\n\nimpl Display for Error {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tDisplay::fmt(&self.kind, f)\n\t}\n}\n\nimpl std::error::Error for Error {}\n\nimpl de::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tError {\n\t\t\tkind: ErrorKind::Message(msg.to_string()),\n\t\t\t#[cfg(feature = \"backtrace\")]\n\t\t\tbacktrace: {\n\t\t\t\tlet bt = backtrace::Backtrace::new_unresolved();\n\t\t\t\tonce_cell::sync::Lazy::new(Box::new(move || {\n\t\t\t\t\tlet mut bt = bt;\n\t\t\t\t\tbt.resolve();\n\t\t\t\t\tbt\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\t}\n}\n","traces":[{"line":94,"address":[250676,250496],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":95,"address":[250528],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[250584],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[250693],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[250723],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[250752],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":106,"address":[250766],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[269426,269562,269456,269312],"length":1,"stats":{"Line":1},"fn_name":"custom<&alloc::string::String>"},{"line":115,"address":[269469,269341],"length":1,"stats":{"Line":1},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":10},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","mod.rs"],"content":"use paste::paste;\nuse serde::{\n\tde::{\n\t\tself, DeserializeSeed, EnumAccess, MapAccess, SeqAccess, VariantAccess,\n\t\tVisitor\n\t},\n\tforward_to_deserialize_any, Deserialize\n};\nuse std::{borrow::Cow, fmt::Display, str::FromStr};\n\nmod error;\npub use error::{Error, ErrorKind};\n\nmacro_rules! error {\n\t($kind:ident $(($($arg:expr),+))?) => {\n\t\t{\n\t\t\tError {\n\t\t\t\tkind: ErrorKind::$kind $(($($arg),+))?,\n\t\t\t\t#[cfg(feature = \"backtrace\")]\n\t\t\t\tbacktrace: {\n\t\t\t\t\tlet bt = backtrace::Backtrace::new_unresolved();\n\t\t\t\t\tonce_cell::sync::Lazy::new(Box::new(move || {\n\t\t\t\t\t\tlet mut bt = bt;\n\t\t\t\t\t\tbt.resolve();\n\t\t\t\t\t\tbt\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nmacro_rules! bail {\n\t($($body:tt)*) => {\n\t\treturn Err(error!($($body)*));\n\t};\n}\n\npub struct Deserializer<'de> {\n\tinput: &'de str\n}\n\nimpl<'de> Deserializer<'de> {\n\tpub fn from_str(input: &'de str) -> Self {\n\t\tSelf { input }\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn from_str<'de, T>(input: &'de str) -> Result<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tlet mut deserializer = Deserializer::from_str(input);\n\tlet value = T::deserialize(&mut deserializer)?;\n\tOk(value)\n}\n\nenum Token {\n\tString,\n\tInt,\n\tFloat,\n\tSExpr\n}\n\nimpl<'de> Deserializer<'de> {\n\tfn check_no_trailing_tokens(&mut self) -> Result<()> {\n\t\tself.skip_whitespace();\n\t\tif !self.input.is_empty() {\n\t\t\tbail!(TrailingTokens);\n\t\t}\n\t\tOk(())\n\t}\n\n\tfn skip_whitespace(&mut self) {\n\t\tself.input = self.input.trim_start();\n\t}\n\n\tfn peek_char(&self) -> Result<char> {\n\t\tself.input.chars().next().ok_or_else(|| error!(Eof))\n\t}\n\n\tfn next_char(&mut self) -> Result<char> {\n\t\tlet ch = self.peek_char()?;\n\t\tself.input = &self.input[ch.len_utf8()..];\n\t\tOk(ch)\n\t}\n\n\tfn peek_token(&self) -> Result<Token> {\n\t\tlet mut chars = self.input.chars().peekable();\n\t\tif chars.peek().is_none() {\n\t\t\tbail!(Eof);\n\t\t}\n\n\t\tlet mut int = true;\n\t\twhile let Some(ch) = chars.next() {\n\t\t\tmatch ch {\n\t\t\t\t'(' => return Ok(Token::SExpr),\n\t\t\t\t'.' => {\n\t\t\t\t\tint = false;\n\t\t\t\t},\n\t\t\t\t'-' => {},\n\t\t\t\tch if ch.is_ascii_whitespace() => break,\n\t\t\t\tch if ch.is_ascii_digit() => {},\n\t\t\t\t_ => return Ok(Token::String)\n\t\t\t};\n\t\t}\n\n\t\tOk(match int {\n\t\t\ttrue => Token::Int,\n\t\t\tfalse => Token::Float\n\t\t})\n\t}\n\n\tfn peek_identifier(&self) -> Option<&'de str> {\n\t\tlet len: usize = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn None;\n\t\t}\n\t\tSome(&self.input[..len])\n\t}\n\n\tfn peek_sexpr_identifier(&self) -> Result<&'de str> {\n\t\tlet mut chars = self.input.chars();\n\t\tlet next = chars.next().ok_or_else(|| error!(Eof))?;\n\t\tif next != '(' {\n\t\t\tbail!(ExpectedSExpr(next));\n\t\t}\n\t\tlet paren = '('.len_utf8();\n\t\tlet len: usize = chars\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\tbail!(ExpectedIdentifier);\n\t\t}\n\t\tOk(&self.input[paren..paren + len])\n\t}\n\n\tfn consume(&mut self, len: usize) -> Result<()> {\n\t\tif self.input.len() < len {\n\t\t\tbail!(Eof);\n\t\t}\n\t\tself.input = &self.input[len..];\n\t\tOk(())\n\t}\n\n\tfn parse_number<T>(&mut self) -> Result<T>\n\twhere\n\t\tT: FromStr,\n\t\tT::Err: Display\n\t{\n\t\tlet len = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| !ch.is_ascii_whitespace() && *ch != ')')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\tbail!(ExpectedNumber);\n\t\t}\n\t\tlet number = &self.input[..len];\n\t\tlet number = number\n\t\t\t.parse()\n\t\t\t.map_err(|err: T::Err| error!(Message(err.to_string())))?;\n\t\tself.input = &self.input[len..];\n\t\tOk(number)\n\t}\n\n\tfn parse_string(&mut self) -> Result<Cow<'de, str>> {\n\t\tmatch self.peek_char()? {\n\t\t\t'(' => Err(error!(ExpectedString)),\n\n\t\t\t'\"' => {\n\t\t\t\tself.consume('\"'.len_utf8())?;\n\t\t\t\tlet mut value = String::new();\n\t\t\t\tloop {\n\t\t\t\t\tlet len: usize = self\n\t\t\t\t\t\t.input\n\t\t\t\t\t\t.chars()\n\t\t\t\t\t\t.take_while(|ch| *ch != '\"')\n\t\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t\t.sum();\n\t\t\t\t\tif len >= self.input.len() {\n\t\t\t\t\t\tbail!(Eof);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet mut start_idx = value.chars().count();\n\t\t\t\t\tvalue += &self.input[..len + 1];\n\t\t\t\t\tself.input = &self.input[len + 1..];\n\t\t\t\t\twhile let Some(idx) = (&value[start_idx..]).find(r\"\\\\\") {\n\t\t\t\t\t\tlet idx = start_idx + idx;\n\t\t\t\t\t\tvalue.replace_range(idx..idx + 2, r\"\\\");\n\t\t\t\t\t\tstart_idx = idx + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif value.ends_with(r#\"\\\"\"#) && start_idx < value.len() - 1 {\n\t\t\t\t\t\tvalue.remove(value.len() - 2);\n\t\t\t\t\t} else if value.ends_with(r#\"\"\"#) {\n\t\t\t\t\t\tvalue.remove(value.len() - 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tunreachable!();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tOk(value.into())\n\t\t\t},\n\n\t\t\t_ => {\n\t\t\t\tlet len = self\n\t\t\t\t\t.input\n\t\t\t\t\t.chars()\n\t\t\t\t\t.take_while(|ch| !ch.is_ascii_whitespace() && *ch != ')')\n\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t.sum();\n\t\t\t\tif len == 0 {\n\t\t\t\t\tbail!(Eof);\n\t\t\t\t}\n\t\t\t\tlet value = &self.input[..len];\n\t\t\t\tself.input = &self.input[len..];\n\t\t\t\tOk(value.into())\n\t\t\t}\n\t\t}\n\t}\n}\n\nimpl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, _: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(ExpectedStruct))\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_map(SExpr::new(self, name, fields)?)?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self, name)?;\n\t\tif self.next_char()? != ')' {\n\t\t\tbail!(ExpectedEoe);\n\t\t}\n\t\tself.check_no_trailing_tokens()?;\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_seq(SExprTuple::new(self, name)?)?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_seq(SExprTuple::new(self, name)?)?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tfn deserialize_enum<V>(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variants: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_enum(Enum::new(self))?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit seq tuple map identifier ignored_any\n\t}\n}\n\n/// Deserialize an enum with only newtype variants whose variant names match the\n/// names of the contained s-exprs.\nstruct Enum<'a, 'de> {\n\tde: &'a mut Deserializer<'de>\n}\n\nimpl<'a, 'de> Enum<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>) -> Self {\n\t\tSelf { de }\n\t}\n}\n\nimpl<'a, 'de> EnumAccess<'de> for Enum<'a, 'de> {\n\ttype Error = Error;\n\ttype Variant = Self;\n\n\tfn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant)>\n\twhere\n\t\tV: DeserializeSeed<'de>\n\t{\n\t\tOk((\n\t\t\tseed.deserialize(FieldIdent(self.de.peek_sexpr_identifier()?))?,\n\t\t\tself\n\t\t))\n\t}\n}\n\nimpl<'a, 'de> VariantAccess<'de> for Enum<'a, 'de> {\n\ttype Error = Error;\n\n\tfn unit_variant(self) -> Result<(), Self::Error> {\n\t\tErr(error!(NonNewtypeEnumVariant))\n\t}\n\n\tfn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tseed.deserialize(self.de)\n\t}\n\n\tfn tuple_variant<V>(\n\t\tself,\n\t\t_len: usize,\n\t\t_visitor: V\n\t) -> Result<V::Value, Self::Error>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(NonNewtypeEnumVariant))\n\t}\n\n\tfn struct_variant<V>(\n\t\tself,\n\t\t_fields: &'static [&'static str],\n\t\t_visitor: V\n\t) -> Result<V::Value, Self::Error>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(NonNewtypeEnumVariant))\n\t}\n}\n\n/// Deserialise an s-expr.\nstruct SExpr<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tfields: &'static [&'static str],\n\tindex: usize,\n\tskip_to: Option<usize>\n}\n\nimpl<'a, 'de> SExpr<'a, 'de> {\n\tfn consume_beginning(\n\t\tde: &mut Deserializer<'de>,\n\t\tname: &'static str\n\t) -> Result<()> {\n\t\tde.skip_whitespace();\n\t\tlet peek = de.peek_sexpr_identifier()?;\n\t\tif peek != name {\n\t\t\tbail!(ExpectedSExprIdentifier(name, peek.to_owned()));\n\t\t}\n\t\tde.consume(name.len() + '('.len_utf8())?;\n\t\tOk(())\n\t}\n\n\tfn new(\n\t\tde: &'a mut Deserializer<'de>,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str]\n\t) -> Result<Self> {\n\t\tSelf::consume_beginning(de, name)?;\n\t\tOk(Self {\n\t\t\tde,\n\t\t\tfields,\n\t\t\tindex: 0,\n\t\t\tskip_to: None\n\t\t})\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tself.de.skip_whitespace();\n\t\tif self.skip_to.is_none() && self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(1)?;\n\t\t\t// technically we're done, but there could be booleans that are false, so we'll\n\t\t\t// deserialize those as None/false eventhough they don't exist in the input.\n\t\t\tself.skip_to = Some(self.fields.len() + 1);\n\t\t}\n\t\tOk(())\n\t}\n\n\tfn next_value_seed_impl<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tif self.index >= self.fields.len() {\n\t\t\tpanic!(\"There was no key and there is no value\");\n\t\t}\n\n\t\t// booleans are represented in this weird way where they are simply missing if they are\n\t\t// false. This means that if we detect a boolean ahead of our current index, we'll assume\n\t\t// everything inbetween is either None or false, and skip ahead.\n\t\tif let Some(skip_to) = self.skip_to {\n\t\t\tif skip_to == self.index {\n\t\t\t\tself.skip_to = None;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\treturn seed.deserialize(MissingField);\n\t\t}\n\t\tif let Some(identifier) = self.de.peek_identifier() {\n\t\t\tif self.fields[self.index] == identifier {\n\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\tfor i in self.index + 1..self.fields.len() {\n\t\t\t\tif self.fields[i] == identifier {\n\t\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\t\tself.skip_to = Some(i);\n\t\t\t\t\treturn seed.deserialize(MissingField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tseed.deserialize(Field::new(self.de, Some(self.fields[self.index])))\n\t}\n}\n\nimpl<'a, 'de> MapAccess<'de> for SExpr<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>\n\twhere\n\t\tK: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\n\t\tloop {\n\t\t\tif self.index >= self.fields.len() {\n\t\t\t\treturn Ok(None);\n\t\t\t}\n\n\t\t\t// special case: if the ident is empty (\"\") and we are set to skip it, don't even\n\t\t\t// return the field.\n\t\t\tif self.fields[self.index] == \"\" {\n\t\t\t\tif let Some(skip_to) = self.skip_to {\n\t\t\t\t\tif skip_to == self.index {\n\t\t\t\t\t\tself.skip_to = None;\n\t\t\t\t\t}\n\t\t\t\t\tself.index += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tseed.deserialize(FieldIdent(self.fields[self.index]))\n\t\t\t.map(Some)\n\t}\n\n\tfn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tlet value = self.next_value_seed_impl(seed)?;\n\t\tself.index += 1;\n\t\tself.check_eoe()?;\n\t\tOk(value)\n\t}\n}\n\n/// Deserialize an s-expr in tuple format. It cannot contain booleans.\nstruct SExprTuple<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tend: bool\n}\n\nimpl<'a, 'de> SExprTuple<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, name: &'static str) -> Result<Self> {\n\t\tSExpr::consume_beginning(de, name)?;\n\t\tOk(Self { de, end: false })\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tif self.end {\n\t\t\treturn Ok(());\n\t\t}\n\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(')'.len_utf8())?;\n\t\t\tself.end = true;\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for SExprTuple<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\t\tif self.end {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tlet value = seed.deserialize(Field::new(self.de, None))?;\n\t\tself.check_eoe()?;\n\t\tOk(Some(value))\n\t}\n}\n\n/// Deserialize a field's ident.\nstruct FieldIdent<'a>(&'a str);\n\nimpl<'a, 'de> de::Deserializer<'de> for FieldIdent<'a>\nwhere\n\t'a: 'de\n{\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_borrowed_str(self.0)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize a single boolean with value `true`.\nstruct TrueField;\n\nimpl<'de> de::Deserializer<'de> for TrueField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(true)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize either a boolean with value `false` or an option with value `None`.\nstruct MissingField;\n\nimpl<'de> de::Deserializer<'de> for MissingField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_none()\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// A field whose value does not match its ident. This means that if a boolean gets requested,\n/// we must return false without touching the input.\n///\n/// We still store the ident if we know it, so that we can parse a sequence like\n/// (<ident> <values..>). The empty ident (`\"\"`) is treated as a special case to consume\n/// the remaining fields of the current expression.\nstruct Field<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tident: Option<&'static str>\n}\n\nimpl<'a, 'de> Field<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, ident: Option<&'static str>) -> Self {\n\t\tSelf { de, ident }\n\t}\n}\n\nmacro_rules! forward_to_parse_number {\n\t($($ident:ident)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<deserialize_ $ident>]<V>(self, visitor: V) -> Result<V::Value>\n\t\t\t\twhere\n\t\t\t\t\tV: Visitor<'de>\n\t\t\t\t{\n\t\t\t\t\tvisitor.[<visit_ $ident>](self.de.parse_number()?)\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de> de::Deserializer<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tmatch self.de.peek_token()? {\n\t\t\tToken::Int if self.de.peek_char()? == '-' => {\n\t\t\t\tself.deserialize_i64(visitor)\n\t\t\t},\n\t\t\tToken::Int => self.deserialize_u64(visitor),\n\t\t\tToken::Float => self.deserialize_f64(visitor),\n\t\t\tToken::String => self.deserialize_string(visitor),\n\t\t\tToken::SExpr if Some(self.de.peek_sexpr_identifier()?) == self.ident => {\n\t\t\t\tself.deserialize_seq(visitor)\n\t\t\t},\n\t\t\tToken::SExpr => Err(error!(MissingSExprInfo(\n\t\t\t\tself.de.peek_sexpr_identifier()?.to_owned()\n\t\t\t)))\n\t\t}\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tfn deserialize_str<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_string(visitor)\n\t}\n\n\tfn deserialize_string<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet value = self.de.parse_string()?;\n\t\tmatch value {\n\t\t\tCow::Borrowed(value) => visitor.visit_borrowed_str(value),\n\t\t\tCow::Owned(value) => visitor.visit_string(value)\n\t\t}\n\t}\n\n\tfn deserialize_option<V>(self, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\t// we'll need to know the type of Some (i.e. the s-expr tag) to see if it is present in\n\t\t// the input or not\n\t\t// however, serde doesn't give us this type of information, so we'll just error\n\t\tErr(error!(DeserializeOption))\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_map(SExpr::new(self.de, name, fields)?)\n\t}\n\n\tfn deserialize_unit<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet ident = match self.ident {\n\t\t\tSome(ident) => ident,\n\t\t\tNone => {\n\t\t\t\tbail!(MissingSExprInfo(\n\t\t\t\t\tself.de.peek_sexpr_identifier()?.to_owned()\n\t\t\t\t));\n\t\t\t}\n\t\t};\n\t\tself.deserialize_unit_struct(ident, visitor)\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self.de, name)?;\n\t\tif self.de.next_char()? != ')' {\n\t\t\tbail!(ExpectedEoe);\n\t\t}\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_tuple_struct(name, 1, visitor)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self.de, name)?)\n\t}\n\n\tfn deserialize_enum<V>(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variants: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_enum(self)\n\t}\n\n\tfn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet ident = match self.ident {\n\t\t\tSome(ident) => ident,\n\t\t\tNone => {\n\t\t\t\tbail!(MissingSExprInfo(\n\t\t\t\t\tself.de.peek_sexpr_identifier()?.to_owned()\n\t\t\t\t));\n\t\t\t}\n\t\t};\n\t\tmatch ident {\n\t\t\t\"\" => {\n\t\t\t\t// special case: we'll return the remaining tokens of the current s-expr\n\t\t\t\tvisitor.visit_seq(self)\n\t\t\t},\n\t\t\t_ => visitor.visit_seq(SExprTuple::new(self.de, ident)?)\n\t\t}\n\t}\n\n\tfn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_seq(visitor)\n\t}\n\n\tforward_to_parse_number! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tchar bytes byte_buf map identifier ignored_any\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tseed.deserialize(Field::new(self.de, None)).map(Some)\n\t}\n}\n\nimpl<'a, 'de> EnumAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\ttype Variant = Either<UnitVariant, NewtypeVariant<'a, 'de>>;\n\n\tfn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant)>\n\twhere\n\t\tV: DeserializeSeed<'de>\n\t{\n\t\tOk(match self.de.peek_token()? {\n\t\t\tToken::SExpr => {\n\t\t\t\tlet str = self.de.peek_sexpr_identifier()?;\n\t\t\t\t(\n\t\t\t\t\tseed.deserialize(FieldIdent(str))?,\n\t\t\t\t\tEither::Right(NewtypeVariant { de: self.de })\n\t\t\t\t)\n\t\t\t},\n\t\t\t_ => (seed.deserialize(self)?, Either::Left(UnitVariant))\n\t\t})\n\t}\n}\n\n/// This will deserialize only unit variants.\nstruct UnitVariant;\n\nimpl<'de> VariantAccess<'de> for UnitVariant {\n\ttype Error = Error;\n\n\tfn unit_variant(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tErr(error!(NonUnitEnumVariant))\n\t}\n\n\tfn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(NonUnitEnumVariant))\n\t}\n\n\tfn struct_variant<V>(\n\t\tself,\n\t\t_fields: &'static [&'static str],\n\t\t_visitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(NonUnitEnumVariant))\n\t}\n}\n\n/// This will deserialize only newtype variants.\nstruct NewtypeVariant<'a, 'de> {\n\tde: &'a mut Deserializer<'de>\n}\n\nimpl<'a, 'de> VariantAccess<'de> for NewtypeVariant<'a, 'de> {\n\ttype Error = Error;\n\n\tfn unit_variant(self) -> Result<(), Self::Error> {\n\t\tErr(error!(NonNewtypeEnumVariant))\n\t}\n\n\tfn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tseed.deserialize(Field::new(self.de, None))\n\t}\n\n\tfn tuple_variant<V>(\n\t\tself,\n\t\t_len: usize,\n\t\t_visitor: V\n\t) -> Result<V::Value, Self::Error>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(NonNewtypeEnumVariant))\n\t}\n\n\tfn struct_variant<V>(\n\t\tself,\n\t\t_fields: &'static [&'static str],\n\t\t_visitor: V\n\t) -> Result<V::Value, Self::Error>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(error!(NonNewtypeEnumVariant))\n\t}\n}\n\n/// An `Either` type for `VariantAccess`.\nenum Either<L, R> {\n\tLeft(L),\n\tRight(R)\n}\n\nimpl<'de, L, R> VariantAccess<'de> for Either<L, R>\nwhere\n\tL: VariantAccess<'de>,\n\tR: VariantAccess<'de, Error = L::Error>\n{\n\ttype Error = L::Error;\n\n\tfn unit_variant(self) -> Result<(), Self::Error> {\n\t\tmatch self {\n\t\t\tSelf::Left(l) => l.unit_variant(),\n\t\t\tSelf::Right(r) => r.unit_variant()\n\t\t}\n\t}\n\n\tfn newtype_variant_seed<T>(self, seed: T) -> Result<T::Value, Self::Error>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tmatch self {\n\t\t\tSelf::Left(l) => l.newtype_variant_seed(seed),\n\t\t\tSelf::Right(r) => r.newtype_variant_seed(seed)\n\t\t}\n\t}\n\n\tfn tuple_variant<V>(\n\t\tself,\n\t\tlen: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value, Self::Error>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tmatch self {\n\t\t\tSelf::Left(l) => l.tuple_variant(len, visitor),\n\t\t\tSelf::Right(r) => r.tuple_variant(len, visitor)\n\t\t}\n\t}\n\n\tfn struct_variant<V>(\n\t\tself,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value, Self::Error>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tmatch self {\n\t\t\tSelf::Left(l) => l.struct_variant(fields, visitor),\n\t\t\tSelf::Right(r) => r.struct_variant(fields, visitor)\n\t\t}\n\t}\n}\n","traces":[{"line":44,"address":[163568],"length":1,"stats":{"Line":4},"fn_name":"from_str"},{"line":51,"address":[280880],"length":1,"stats":{"Line":13},"fn_name":"from_str<serde_sexpr::untagged::tests::FooOrBar>"},{"line":55,"address":[280937],"length":1,"stats":{"Line":13},"fn_name":null},{"line":56,"address":[281041,280952],"length":1,"stats":{"Line":14},"fn_name":null},{"line":57,"address":[281030],"length":1,"stats":{"Line":13},"fn_name":null},{"line":68,"address":[163616],"length":1,"stats":{"Line":3},"fn_name":"check_no_trailing_tokens"},{"line":69,"address":[163654],"length":1,"stats":{"Line":3},"fn_name":null},{"line":70,"address":[163664],"length":1,"stats":{"Line":4},"fn_name":null},{"line":71,"address":[163703],"length":1,"stats":{"Line":1},"fn_name":null},{"line":73,"address":[163695],"length":1,"stats":{"Line":4},"fn_name":null},{"line":76,"address":[163776],"length":1,"stats":{"Line":3},"fn_name":"skip_whitespace"},{"line":77,"address":[163793],"length":1,"stats":{"Line":3},"fn_name":null},{"line":80,"address":[163856],"length":1,"stats":{"Line":4},"fn_name":"peek_char"},{"line":81,"address":[163875],"length":1,"stats":{"Line":4},"fn_name":null},{"line":84,"address":[163936],"length":1,"stats":{"Line":3},"fn_name":"next_char"},{"line":85,"address":[164068,163966],"length":1,"stats":{"Line":3},"fn_name":null},{"line":86,"address":[164039,164169],"length":1,"stats":{"Line":6},"fn_name":null},{"line":87,"address":[164238],"length":1,"stats":{"Line":3},"fn_name":null},{"line":90,"address":[164256],"length":1,"stats":{"Line":2},"fn_name":"peek_token"},{"line":91,"address":[164281],"length":1,"stats":{"Line":2},"fn_name":null},{"line":92,"address":[164323],"length":1,"stats":{"Line":2},"fn_name":null},{"line":93,"address":[164372],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[164362],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[164451,164370],"length":1,"stats":{"Line":4},"fn_name":null},{"line":98,"address":[164515],"length":1,"stats":{"Line":2},"fn_name":null},{"line":99,"address":[164614],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[164634],"length":1,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[164626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[164643,164574,164684],"length":1,"stats":{"Line":6},"fn_name":null},{"line":105,"address":[164771,164649,164748],"length":1,"stats":{"Line":6},"fn_name":null},{"line":106,"address":[164759],"length":1,"stats":{"Line":2},"fn_name":null},{"line":110,"address":[164555,164726],"length":1,"stats":{"Line":4},"fn_name":null},{"line":111,"address":[164713],"length":1,"stats":{"Line":2},"fn_name":null},{"line":112,"address":[164703],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[164800],"length":1,"stats":{"Line":1},"fn_name":"peek_identifier"},{"line":117,"address":[164820],"length":1,"stats":{"Line":1},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[281214,281184],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":121,"address":[281304,281280],"length":1,"stats":{"Line":4},"fn_name":"{closure#1}"},{"line":123,"address":[164905],"length":1,"stats":{"Line":1},"fn_name":null},{"line":124,"address":[164911],"length":1,"stats":{"Line":1},"fn_name":null},{"line":126,"address":[164932],"length":1,"stats":{"Line":2},"fn_name":null},{"line":129,"address":[165008],"length":1,"stats":{"Line":4},"fn_name":"peek_sexpr_identifier"},{"line":130,"address":[165038],"length":1,"stats":{"Line":4},"fn_name":null},{"line":131,"address":[165060,165153],"length":1,"stats":{"Line":4},"fn_name":null},{"line":132,"address":[165146],"length":1,"stats":{"Line":4},"fn_name":null},{"line":133,"address":[165268],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[165239],"length":1,"stats":{"Line":4},"fn_name":null},{"line":136,"address":[165353],"length":1,"stats":{"Line":4},"fn_name":null},{"line":137,"address":[281406,281376],"length":1,"stats":{"Line":8},"fn_name":"{closure#1}"},{"line":138,"address":[281472,281496],"length":1,"stats":{"Line":8},"fn_name":"{closure#2}"},{"line":140,"address":[165428],"length":1,"stats":{"Line":4},"fn_name":null},{"line":141,"address":[165434],"length":1,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[165530],"length":1,"stats":{"Line":4},"fn_name":null},{"line":146,"address":[165712],"length":1,"stats":{"Line":4},"fn_name":"consume"},{"line":147,"address":[165755],"length":1,"stats":{"Line":4},"fn_name":null},{"line":148,"address":[165844],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[165925,165797],"length":1,"stats":{"Line":8},"fn_name":null},{"line":151,"address":[165932],"length":1,"stats":{"Line":4},"fn_name":null},{"line":154,"address":[432032,435324,434000,434672,433345,432690,433360,433974,434652,432720],"length":1,"stats":{"Line":4},"fn_name":"parse_number<f64>"},{"line":159,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":160,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":162,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":163,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":165,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":166,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":169,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":171,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":172,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":173,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":176,"address":[168911,165952],"length":1,"stats":{"Line":2},"fn_name":"parse_string"},{"line":177,"address":[165991],"length":1,"stats":{"Line":2},"fn_name":null},{"line":178,"address":[166217],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[166304,166817,166890],"length":1,"stats":{"Line":2},"fn_name":null},{"line":182,"address":[166875],"length":1,"stats":{"Line":1},"fn_name":null},{"line":183,"address":[166968],"length":1,"stats":{"Line":1},"fn_name":null},{"line":184,"address":[166984,167102],"length":1,"stats":{"Line":2},"fn_name":null},{"line":185,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[281520,281533],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":188,"address":[281552,281576],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":190,"address":[167156],"length":1,"stats":{"Line":1},"fn_name":null},{"line":191,"address":[167230],"length":1,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[167207,167371],"length":1,"stats":{"Line":2},"fn_name":null},{"line":195,"address":[167457],"length":1,"stats":{"Line":1},"fn_name":null},{"line":196,"address":[167648],"length":1,"stats":{"Line":1},"fn_name":null},{"line":197,"address":[168873,167824],"length":1,"stats":{"Line":2},"fn_name":null},{"line":198,"address":[168697,167996,168671],"length":1,"stats":{"Line":2},"fn_name":null},{"line":199,"address":[168743,168679],"length":1,"stats":{"Line":2},"fn_name":null},{"line":200,"address":[168844,168878],"length":1,"stats":{"Line":1},"fn_name":null},{"line":212,"address":[168524],"length":1,"stats":{"Line":1},"fn_name":null},{"line":215,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[166187,166343],"length":1,"stats":{"Line":2},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[281600,281630],"length":1,"stats":{"Line":2},"fn_name":"{closure#2}"},{"line":220,"address":[281696,281720],"length":1,"stats":{"Line":2},"fn_name":"{closure#3}"},{"line":222,"address":[166414],"length":1,"stats":{"Line":1},"fn_name":null},{"line":223,"address":[166420],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[166523],"length":1,"stats":{"Line":1},"fn_name":null},{"line":226,"address":[166622],"length":1,"stats":{"Line":1},"fn_name":null},{"line":227,"address":[166720],"length":1,"stats":{"Line":1},"fn_name":null},{"line":240,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[528960,524784,524948,526800,526964,528116,529124,527952,525760,525924],"length":1,"stats":{"Line":7},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":252,"address":[],"length":0,"stats":{"Line":13},"fn_name":null},{"line":253,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":254,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":257,"address":[282624,282596,281744,283476],"length":1,"stats":{"Line":3},"fn_name":"deserialize_unit_struct<serde_sexpr::untagged::tests::foo_bar::_::{impl#0}::deserialize::__Visitor>"},{"line":265,"address":[282909,282029,282670,281876,281790,281925,282756,282805],"length":1,"stats":{"Line":6},"fn_name":null},{"line":266,"address":[282957,282790,282077,281910,282251,283131],"length":1,"stats":{"Line":6},"fn_name":null},{"line":267,"address":[282298,283178],"length":1,"stats":{"Line":0},"fn_name":null},{"line":269,"address":[282379,283434,283259,283318,282554,283171,282438,282291],"length":1,"stats":{"Line":7},"fn_name":null},{"line":270,"address":[283474,283295,282594,282415],"length":1,"stats":{"Line":6},"fn_name":null},{"line":273,"address":[531744,532833,531889,532688],"length":1,"stats":{"Line":2},"fn_name":"deserialize_newtype_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":281,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":282,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":283,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":286,"address":[530864,531017],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":295,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":296,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":297,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":300,"address":[283770,283504],"length":1,"stats":{"Line":2},"fn_name":"deserialize_enum<serde_sexpr::untagged::tests::{impl#0}::deserialize::Visitor>"},{"line":309,"address":[283642,283785,283844],"length":1,"stats":{"Line":2},"fn_name":null},{"line":310,"address":[283946,283980,283837,284029,284145],"length":1,"stats":{"Line":6},"fn_name":null},{"line":311,"address":[284013],"length":1,"stats":{"Line":2},"fn_name":null},{"line":327,"address":[168944],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":336,"address":[284300,284176],"length":1,"stats":{"Line":2},"fn_name":"variant_seed<core::marker::PhantomData<alloc::borrow::Cow<str>>>"},{"line":340,"address":[284205,284743],"length":1,"stats":{"Line":4},"fn_name":null},{"line":341,"address":[284213,284315,284821,284575],"length":1,"stats":{"Line":4},"fn_name":null},{"line":342,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":350,"address":[168976],"length":1,"stats":{"Line":0},"fn_name":"unit_variant"},{"line":351,"address":[168994],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[284944,284912],"length":1,"stats":{"Line":2},"fn_name":"newtype_variant_seed<core::marker::PhantomData<serde_sexpr::untagged::tests::foo_bar::Foo>>"},{"line":358,"address":[284928,284960],"length":1,"stats":{"Line":2},"fn_name":null},{"line":369,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":380,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":393,"address":[169056],"length":1,"stats":{"Line":3},"fn_name":"consume_beginning"},{"line":397,"address":[169104],"length":1,"stats":{"Line":3},"fn_name":null},{"line":398,"address":[169222,169114],"length":1,"stats":{"Line":4},"fn_name":null},{"line":399,"address":[169200,169312],"length":1,"stats":{"Line":8},"fn_name":null},{"line":400,"address":[169343],"length":1,"stats":{"Line":2},"fn_name":null},{"line":402,"address":[169525,169318,169681],"length":1,"stats":{"Line":8},"fn_name":null},{"line":403,"address":[169670],"length":1,"stats":{"Line":4},"fn_name":null},{"line":406,"address":[169760],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":411,"address":[170015,169831],"length":1,"stats":{"Line":3},"fn_name":null},{"line":412,"address":[169911],"length":1,"stats":{"Line":1},"fn_name":null},{"line":413,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":414,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":415,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":416,"address":[169899],"length":1,"stats":{"Line":1},"fn_name":null},{"line":420,"address":[170112],"length":1,"stats":{"Line":1},"fn_name":"check_eoe"},{"line":421,"address":[170142],"length":1,"stats":{"Line":1},"fn_name":null},{"line":422,"address":[170347,170155,170598],"length":1,"stats":{"Line":3},"fn_name":null},{"line":423,"address":[170469,170372],"length":1,"stats":{"Line":1},"fn_name":null},{"line":426,"address":[170554,170603,170443],"length":1,"stats":{"Line":2},"fn_name":null},{"line":428,"address":[170359],"length":1,"stats":{"Line":1},"fn_name":null},{"line":431,"address":[459664,442987,457584,455504,447147,451307,440944,453424,461744,465904,467984,436784,440907,459627,463787,449227,438864,443024,453387,447184,449264,457547,455467,445067,463824,470027,438827,467947,445104,451344,465867,461707],"length":1,"stats":{"Line":25},"fn_name":"next_value_seed_impl<core::marker::PhantomData<test::Position>>"},{"line":435,"address":[],"length":0,"stats":{"Line":26},"fn_name":null},{"line":442,"address":[],"length":0,"stats":{"Line":31},"fn_name":null},{"line":443,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":444,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":445,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":447,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":449,"address":[],"length":0,"stats":{"Line":24},"fn_name":null},{"line":450,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":451,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":452,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":454,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":455,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":456,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":457,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":458,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":463,"address":[],"length":0,"stats":{"Line":46},"fn_name":null},{"line":470,"address":[478656,481460,479572,481488,476768,477712,480544,479600,477684,478628,482404,480516],"length":1,"stats":{"Line":9},"fn_name":"next_key_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":474,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":476,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":477,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":478,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":483,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":484,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":485,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":486,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":488,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":489,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":493,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":496,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":497,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":500,"address":[483703,483728,487856,492080,484864,488960,483040,487839,483022,491520,486768,490934,490352,484320,488976,490960,484300,491491,484847,486160,487312,487295,486176,485600,482432,485583,489664,488383,488400,489641,486748,490327],"length":1,"stats":{"Line":25},"fn_name":"next_value_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::{impl#2}::visit_map::__DeserializeWith>>"},{"line":504,"address":[],"length":0,"stats":{"Line":25},"fn_name":null},{"line":505,"address":[],"length":0,"stats":{"Line":48},"fn_name":null},{"line":506,"address":[],"length":0,"stats":{"Line":50},"fn_name":null},{"line":507,"address":[],"length":0,"stats":{"Line":25},"fn_name":null},{"line":518,"address":[170640],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":519,"address":[170685,170790],"length":1,"stats":{"Line":2},"fn_name":null},{"line":520,"address":[170740],"length":1,"stats":{"Line":2},"fn_name":null},{"line":523,"address":[170880],"length":1,"stats":{"Line":2},"fn_name":"check_eoe"},{"line":524,"address":[170910],"length":1,"stats":{"Line":2},"fn_name":null},{"line":525,"address":[170936],"length":1,"stats":{"Line":2},"fn_name":null},{"line":528,"address":[170921],"length":1,"stats":{"Line":2},"fn_name":null},{"line":529,"address":[171218,170960],"length":1,"stats":{"Line":3},"fn_name":null},{"line":530,"address":[171220,171151,171102],"length":1,"stats":{"Line":2},"fn_name":null},{"line":531,"address":[171214],"length":1,"stats":{"Line":1},"fn_name":null},{"line":533,"address":[171131],"length":1,"stats":{"Line":2},"fn_name":null},{"line":540,"address":[517840,520463,517795,520496,516560,519127,521568,519168],"length":1,"stats":{"Line":3},"fn_name":"next_element_seed<core::marker::PhantomData<alloc::string::String>>"},{"line":544,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":545,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":546,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":548,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":549,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":550,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":563,"address":[284976],"length":1,"stats":{"Line":11},"fn_name":"deserialize_any<serde::de::impls::StringVisitor>"},{"line":567,"address":[284998],"length":1,"stats":{"Line":11},"fn_name":null},{"line":583,"address":[521952,522160,521824,521632,521600,521744,521776,522080,522000,521696,521920,521856,522112,522048,521664,521888],"length":1,"stats":{"Line":1},"fn_name":"deserialize_any<serde::__private::de::content::ContentVisitor>"},{"line":587,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":603,"address":[524000,523616,524032,523648,523680,523808,523584,523936,523840,523872,523776,523904,523712,523968,523744],"length":1,"stats":{"Line":4},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__Visitor>"},{"line":607,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":610,"address":[524224],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":614,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":636,"address":[171296],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":645,"address":[499747,501040,500688,502534,509206,509878,509104,501142,499632,500000,500101,501760,500790,501508,501862,502096,502198,500438,502432,509440,509542,501392,500336,509776],"length":1,"stats":{"Line":5},"fn_name":"deserialize_f32<serde_sexpr::option::OptionVisitor<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>>"},{"line":649,"address":[509760,509770,501422,501010,500116,501157,500321,500352,500668,502213,500016,501056,502416,499662,499974,499984,509221,509424,509434,499762,510096,510106,509456,502112,502549,509120,501746,500658,501736,502080,500805,501362,502090,502448,509557,501020,500453,509893,500331,501523,501877,509792,500704,501776,502426,502752,502762,501372],"length":1,"stats":{"Line":10},"fn_name":null},{"line":659,"address":[494688,499604,496304,497952,496336,497984],"length":1,"stats":{"Line":6},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":663,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":664,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":665,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":667,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":668,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":669,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":670,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":671,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":673,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":674,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":679,"address":[510112],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":683,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":690,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":693,"address":[512215,512839,510992,512240,513463,512864,511591,511616],"length":1,"stats":{"Line":6},"fn_name":"deserialize_string<serde::__private::de::content::ContentVisitor>"},{"line":697,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":698,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":699,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":700,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":711,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":714,"address":[513488,513626,513936,514384,514074,514545],"length":1,"stats":{"Line":6},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":723,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":726,"address":[510304,510902],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit<serde_sexpr::option::OptionVisitor<serde::de::impls::UnitVisitor>>"},{"line":730,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":731,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":732,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":733,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":734,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":738,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":741,"address":[514992,515664],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit_struct<serde_sexpr::option::OptionVisitor<serde::de::impls::UnitVisitor>>"},{"line":749,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":750,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":751,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":753,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":756,"address":[516480],"length":1,"stats":{"Line":0},"fn_name":"deserialize_newtype_struct<serde_sexpr::option::OptionVisitor<test::_::{impl#0}::deserialize::__Visitor>>"},{"line":764,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":767,"address":[515696,515840,516096,516226],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple_struct<serde_sexpr::option::OptionVisitor<test::_::{impl#0}::deserialize::__Visitor>>"},{"line":776,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":779,"address":[510224,510144],"length":1,"stats":{"Line":4},"fn_name":"deserialize_enum<test::_::{impl#0}::deserialize::__Visitor>"},{"line":788,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":791,"address":[505936,506970,503798,503824,504858,502768,508022,504880,508048,509081,506992,505914],"length":1,"stats":{"Line":6},"fn_name":"deserialize_seq<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":795,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":796,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":797,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":798,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":799,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":803,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":804,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":806,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":808,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":812,"address":[510928],"length":1,"stats":{"Line":2},"fn_name":"deserialize_tuple<serde::de::impls::{impl#160}::deserialize::TupleVisitor<f32, f32>>"},{"line":816,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":831,"address":[474352,476160,474909,475536,474944,476731,476115,475505],"length":1,"stats":{"Line":2},"fn_name":"next_element_seed<core::marker::PhantomData<f32>>"},{"line":835,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":836,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":837,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":839,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":847,"address":[494641,493345,493392,492096],"length":1,"stats":{"Line":4},"fn_name":"variant_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":851,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":852,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":853,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":855,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":856,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":859,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":870,"address":[171344],"length":1,"stats":{"Line":2},"fn_name":"unit_variant"},{"line":871,"address":[171348],"length":1,"stats":{"Line":2},"fn_name":null},{"line":878,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":885,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":896,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":908,"address":[171360],"length":1,"stats":{"Line":0},"fn_name":"unit_variant"},{"line":909,"address":[171378],"length":1,"stats":{"Line":0},"fn_name":null},{"line":916,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":927,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":938,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":955,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":956,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":957,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":958,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":966,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":967,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":968,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":980,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":981,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":982,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":994,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":995,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":996,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":230,"coverable":309},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","lib.rs"],"content":"#![warn(rust_2018_idioms, unreachable_pub)]\n#![forbid(unsafe_code)]\n\nmod literal;\nmod option;\n#[macro_use]\nmod untagged;\n\npub mod de;\n#[doc(hidden)]\npub mod private;\npub mod ser;\n\npub use de::from_str;\npub use literal::Literal;\npub use option::{deserialize_option, OptionDef as Option};\npub use ser::{to_string, to_string_pretty};\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","literal.rs"],"content":"use serde::{Deserialize, Serialize};\nuse std::fmt::{self, Debug, Display, Formatter};\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(untagged)]\nenum LiteralImp {\n\tNumber(u16),\n\tText(String)\n}\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(transparent)]\npub struct Literal(LiteralImp);\n\nimpl Debug for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Debug::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Debug::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl Display for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Display::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Display::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl From<u16> for Literal {\n\tfn from(num: u16) -> Self {\n\t\tSelf(LiteralImp::Number(num))\n\t}\n}\n\nimpl From<&str> for Literal {\n\tfn from(text: &str) -> Self {\n\t\ttext.to_owned().into()\n\t}\n}\n\nimpl From<String> for Literal {\n\tfn from(text: String) -> Self {\n\t\tSelf(LiteralImp::Text(text))\n\t}\n}\n","traces":[{"line":16,"address":[160336],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":17,"address":[160354],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[160385],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[160416],"length":1,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[160464],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":26,"address":[160482],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[160513],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[160545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[160592],"length":1,"stats":{"Line":2},"fn_name":"from"},{"line":35,"address":[160607],"length":1,"stats":{"Line":2},"fn_name":null},{"line":40,"address":[160672],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":41,"address":[160695],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[160736],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":47,"address":[160743],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":14},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","option.rs"],"content":"use serde::{\n\tde::{\n\t\tself, Deserialize, Deserializer, EnumAccess, MapAccess, SeqAccess, Visitor\n\t},\n\tser::{Serialize, Serializer}\n};\nuse std::{\n\tfmt::{self, Formatter},\n\tmarker::PhantomData\n};\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(with = \"serde_sexpr::Option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// For a more detailed description, see [`deserialize_option`].\npub struct OptionDef<T>(PhantomData<T>);\n\nimpl<'de, T> OptionDef<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tpub fn deserialize<D>(deserializer: D) -> Result<Option<T>, D::Error>\n\twhere\n\t\tD: Deserializer<'de>\n\t{\n\t\tdeserialize_option(deserializer)\n\t}\n}\n\nimpl<T> OptionDef<T>\nwhere\n\tOption<T>: Serialize\n{\n\tpub fn serialize<S>(this: &Option<T>, serializer: S) -> Result<S::Ok, S::Error>\n\twhere\n\t\tS: Serializer\n\t{\n\t\tthis.serialize(serializer)\n\t}\n}\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(deserialize_with = \"serde_sexpr::deserialize_option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// The s-expression format is not only not self-describing, but also does not provide any way\n/// to see if a value is \"missing\" (i.e. [`None`]) without knowing its type. Unfortunately, serde\n/// expects us to decide if the value is present before we know its type: In the above example,\n/// we have the input string `\"bold)\"` and need to know if `thickness` is present or not, without\n/// knowing that `thickness` is an s-expr and not, say, an enum that has a variant called `bold`.\n///\n/// This custom deserialize logic therefore avoids calling [`Deserializer::deserialize_option`]\n/// alltogether. Instead, we'll try to deserialize the value as if it was present, and return\n/// [`None`] if the deserializer returns an error before calling the visitor. This is likely\n/// indicative of a type error, that would indicate a missing value.\n///\n/// ### Drawbacks\n///\n/// Using this deserialize logic might hide errors in the input. If this optional value\n/// is the last value that gets deserialized, and the deserialization failed due to some\n/// error other than a type error, it might get hidden.\n///\n/// Also, if trying to deserialize the value alters the state of the deserializer, it could\n/// lead to incorrect deserialization.\npub fn deserialize_option<'de, D, T>(deserializer: D) -> Result<Option<T>, D::Error>\nwhere\n\tD: Deserializer<'de>,\n\tT: Deserialize<'de>\n{\n\t// this flag will be set if any visitor method was called\n\tlet mut flag = false;\n\n\t// try to deserialize a present value\n\tlet result = T::deserialize(OptionDeserializer {\n\t\tde: deserializer,\n\t\tflag: &mut flag\n\t});\n\n\t// if the flag is not set and we don't have a value, assume a non-present value\n\tmatch result {\n\t\tOk(value) => Ok(Some(value)),\n\t\tErr(_) if !flag => Ok(None),\n\t\tErr(err) => Err(err)\n\t}\n}\n\n/// A deserializer that intercepts the visitor with our custom visitor.\nstruct OptionDeserializer<'a, D> {\n\tde: D,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_deserializer {\n\t($(fn $ident:ident <$visitor:ident>(\n\t\tself,\n\t\t$visitor_arg:ident : $visitor_arg_ty:ty\n\t\t$(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$visitor>(\n\t\t\t\tself,\n\t\t\t\t$($arg: $arg_ty,)*\n\t\t\t\t$visitor_arg: $visitor_arg_ty\n\t\t\t) -> Result<$visitor::Value, Self::Error>\n\t\t\twhere\n\t\t\t\t$visitor: Visitor<'de>\n\t\t\t{\n\t\t\t\tlet $visitor_arg = OptionVisitor {\n\t\t\t\t\tvisitor: $visitor_arg,\n\t\t\t\t\tflag: self.flag\n\t\t\t\t};\n\t\t\t\tself.de.$ident($($arg,)* $visitor_arg)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, D> Deserializer<'de> for OptionDeserializer<'a, D>\nwhere\n\tD: Deserializer<'de>\n{\n\ttype Error = D::Error;\n\n\tforward_deserializer! {\n\t\tfn deserialize_any<V>(self, visitor: V);\n\t\tfn deserialize_bool<V>(self, visitor: V);\n\t\tfn deserialize_i8<V>(self, visitor: V);\n\t\tfn deserialize_i16<V>(self, visitor: V);\n\t\tfn deserialize_i32<V>(self, visitor: V);\n\t\tfn deserialize_i64<V>(self, visitor: V);\n\t\tfn deserialize_i128<V>(self, visitor: V);\n\t\tfn deserialize_u8<V>(self, visitor: V);\n\t\tfn deserialize_u16<V>(self, visitor: V);\n\t\tfn deserialize_u32<V>(self, visitor: V);\n\t\tfn deserialize_u64<V>(self, visitor: V);\n\t\tfn deserialize_u128<V>(self, visitor: V);\n\t\tfn deserialize_f32<V>(self, visitor: V);\n\t\tfn deserialize_f64<V>(self, visitor: V);\n\t\tfn deserialize_char<V>(self, visitor: V);\n\t\tfn deserialize_str<V>(self, visitor: V);\n\t\tfn deserialize_string<V>(self, visitor: V);\n\t\tfn deserialize_bytes<V>(self, visitor: V);\n\t\tfn deserialize_byte_buf<V>(self, visitor: V);\n\t\tfn deserialize_option<V>(self, visitor: V);\n\t\tfn deserialize_unit<V>(self, visitor: V);\n\t\tfn deserialize_unit_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_newtype_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_seq<V>(self, visitor: V);\n\t\tfn deserialize_tuple<V>(self, visitor: V, len: usize);\n\t\tfn deserialize_tuple_struct<V>(self, visitor: V, name: &'static str, len: usize);\n\t\tfn deserialize_map<V>(self, visitor: V);\n\t\tfn deserialize_struct<V>(self, visitor: V, name: &'static str, fields: &'static [&'static str]);\n\t\tfn deserialize_enum<V>(self, visitor: V, name: &'static str, variants: &'static [&'static str]);\n\t\tfn deserialize_identifier<V>(self, visitor: V);\n\t\tfn deserialize_ignored_any<V>(self, visitor: V);\n\t}\n\n\tfn is_human_readable(&self) -> bool {\n\t\tself.de.is_human_readable()\n\t}\n}\n\n/// A visitor that will set a flag if any visit method was called (except for visit_none).\n/// This indicates that the value was indeed present, i.e. any error return was not a\n/// general type error but instead a problem deserializing the correct type.\nstruct OptionVisitor<'a, V> {\n\tvisitor: V,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_visitor {\n\t($(fn $ident:ident <$error:ident>(self $(, $arg:ident : $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident<$error>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $error>\n\t\t\twhere\n\t\t\t\t$error: de::Error\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident <$access:ident : $access_bound:path>(\n\t\tself $(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$access>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $access::Error>\n\t\t\twhere\n\t\t\t\t$access: $access_bound\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, V> Visitor<'de> for OptionVisitor<'a, V>\nwhere\n\tV: Visitor<'de>\n{\n\ttype Value = V::Value;\n\n\tfn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tf.write_str(\"optional \")?;\n\t\tself.visitor.expecting(f)\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_bool<E>(self, v: bool);\n\t\tfn visit_i8<E>(self, v: i8);\n\t\tfn visit_i16<E>(self, v: i16);\n\t\tfn visit_i32<E>(self, v: i32);\n\t\tfn visit_i64<E>(self, v: i64);\n\t\tfn visit_i128<E>(self, v: i128);\n\t\tfn visit_u8<E>(self, v: u8);\n\t\tfn visit_u16<E>(self, v: u16);\n\t\tfn visit_u32<E>(self, v: u32);\n\t\tfn visit_u64<E>(self, v: u64);\n\t\tfn visit_u128<E>(self, v: u128);\n\t\tfn visit_f32<E>(self, v: f32);\n\t\tfn visit_f64<E>(self, v: f64);\n\t\tfn visit_char<E>(self, v: char);\n\t\tfn visit_str<E>(self, v: &str);\n\t\tfn visit_borrowed_str<E>(self, v: &'de str);\n\t\tfn visit_string<E>(self, v: String);\n\t\tfn visit_bytes<E>(self, v: &[u8]);\n\t\tfn visit_borrowed_bytes<E>(self, v: &'de [u8]);\n\t\tfn visit_byte_buf<E>(self, v: Vec<u8>);\n\t\tfn visit_unit<E>(self);\n\t}\n\n\tfn visit_none<E>(self) -> Result<Self::Value, E>\n\twhere\n\t\tE: de::Error\n\t{\n\t\t// special case - if we don't set the flag and return an error, we'll\n\t\t// get None\n\t\tErr(E::custom(\"\"))\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_some<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_newtype_struct<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_seq<A: SeqAccess<'de>>(self, seq: A);\n\t\tfn visit_map<A: MapAccess<'de>>(self, map: A);\n\t\tfn visit_enum<A: EnumAccess<'de>>(self, data: A);\n\t}\n}\n","traces":[{"line":55,"address":[414304,414048,414144,414432,414464,414624,414080,414496,414528,414112,414176,414208,414240,414560,414368],"length":1,"stats":{"Line":9},"fn_name":"deserialize<test::Thickness, serde_sexpr::de::MissingField>"},{"line":59,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":67,"address":[414752,414880,414944,414688,414816],"length":1,"stats":{"Line":6},"fn_name":"serialize<test::Thickness, serde_sexpr::ser::Field>"},{"line":71,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":130,"address":[420240,418256,415344,416448,417424,416784,418960,419456,418656,417120,415008,417872,415776,419792,416112],"length":1,"stats":{"Line":9},"fn_name":"deserialize_option<serde_sexpr::de::TrueField, i16>"},{"line":136,"address":[415361,418272,416128,415024,416464,415792,418977,420256,417137,417441,417888,419809,418673,419472,416800],"length":1,"stats":{"Line":9},"fn_name":null},{"line":139,"address":[415037,417150,415406,416141,419022,417486,415805,418285,417927,416813,419485,416477,418686,420269,419854],"length":1,"stats":{"Line":9},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":146,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":147,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":148,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[422064,422288,422144,422864,422192,421936,422512,422240,421888,422768,422336,422016,422416,422944,422640],"length":1,"stats":{"Line":9},"fn_name":"deserialize_f32<serde_sexpr::de::MissingField, serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>"},{"line":173,"address":[422601,422080,422033,422794,422997,422305,421905,422917,422352,422729,421952,422209,422161,422257,422452],"length":1,"stats":{"Line":9},"fn_name":null},{"line":175,"address":[421948,422076,422348,422790,422448],"length":1,"stats":{"Line":5},"fn_name":null},{"line":177,"address":[422214,422357,421957,422085,422606,421910,422922,422734,422262,422166,422310,422457,422038,422799,423002],"length":1,"stats":{"Line":9},"fn_name":null},{"line":223,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[420768,421584,420832,421680,420896,420640,420704,421632],"length":1,"stats":{"Line":3},"fn_name":"visit_bool<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::error::Error>"},{"line":243,"address":[420667,420923,420859,420795,421654,420731,421704,421601],"length":1,"stats":{"Line":3},"fn_name":null},{"line":244,"address":[420670,420926,420862,421604,420798,420734,421657,421707],"length":1,"stats":{"Line":3},"fn_name":null},{"line":253,"address":[421728,421808],"length":1,"stats":{"Line":2},"fn_name":"visit_map<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::SExpr>"},{"line":257,"address":[421852,421760],"length":1,"stats":{"Line":2},"fn_name":null},{"line":258,"address":[421763,421855],"length":1,"stats":{"Line":2},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[420960,421422,421456,421166,421040,421293,421072,421200,421328,421550],"length":1,"stats":{"Line":4},"fn_name":"visit_none<serde::de::impls::UnitVisitor, serde_sexpr::de::error::Error>"},{"line":305,"address":[],"length":0,"stats":{"Line":4},"fn_name":null}],"covered":23,"coverable":30},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","private.rs"],"content":"use serde::{\n\tde::{self, Deserializer, Visitor},\n\tforward_to_deserialize_any\n};\nuse std::{\n\terror::Error,\n\tfmt::{self, Debug, Display, Formatter}\n};\n\npub use once_cell::sync::Lazy as SyncLazy;\n\npub struct NameExtractor;\n\n#[derive(Debug)]\npub enum Extraction {\n\tOk(&'static str),\n\tErr(String)\n}\n\nimpl Display for Extraction {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch self {\n\t\t\tSelf::Ok(ok) => Display::fmt(ok, f),\n\t\t\tSelf::Err(err) => Display::fmt(err, f)\n\t\t}\n\t}\n}\n\nimpl Error for Extraction {}\n\nimpl de::Error for Extraction {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Err(msg.to_string())\n\t}\n}\n\nimpl<'de> Deserializer<'de> for NameExtractor {\n\ttype Error = Extraction;\n\n\tfn deserialize_any<V>(self, _visitor: V) -> Result<V::Value, Extraction>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Extraction::Err(\n\t\t\t\"Expected to deserialize a struct\".to_owned()\n\t\t))\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_visitor: V\n\t) -> Result<V::Value, Extraction>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Extraction::Ok(name))\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_visitor: V\n\t) -> Result<V::Value, Extraction>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Extraction::Ok(name))\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\t_visitor: V\n\t) -> Result<V::Value, Extraction>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Extraction::Ok(name))\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_fields: &'static [&'static str],\n\t\t_visitor: V\n\t) -> Result<V::Value, Extraction>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Extraction::Ok(name))\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string bytes\n\t\tbyte_buf option unit seq tuple map enum identifier ignored_any\n\t}\n}\n","traces":[{"line":21,"address":[270208],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":22,"address":[270231],"length":1,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[270254],"length":1,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[270286],"length":1,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[197920,197985],"length":1,"stats":{"Line":0},"fn_name":"custom<core::fmt::Arguments>"},{"line":33,"address":[197933],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[198112,198016],"length":1,"stats":{"Line":2},"fn_name":"deserialize_unit_struct<serde_sexpr::untagged::tests::foo_bar::_::{impl#0}::deserialize::__Visitor>"},{"line":57,"address":[198037,198133],"length":1,"stats":{"Line":2},"fn_name":null},{"line":68,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":13},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","error.rs"],"content":"use serde::ser;\nuse std::fmt::Display;\nuse thiserror::Error;\n\n#[derive(Clone, Debug, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to serialize anything but a struct\n\t/// at root level.\n\t#[error(\"Expected to serialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if a boolean was detected in an unnamed\n\t/// container, i.e. a tuple or a sequence.\n\t#[error(\"Unnamed boolean\")]\n\tUnnamedBoolean,\n\n\t/// This error will be returned if a unit was detected in an unnamed container,\n\t/// i.e. a tuple or a sequence.\n\t#[error(\"Unnamed unit\")]\n\tUnnamedUnit,\n\n\t/// This error will be returned if a sequence was detected in an unnamed\n\t/// container, i.e. a tuple or a sequence.\n\t#[error(\"Unnamed sequence\")]\n\tUnnamedSeq,\n\n\t#[error(\"char is unsupported\")]\n\tChar,\n\t#[error(\"byte array is unsupported\")]\n\tBytes,\n\t#[error(\"enums with non-unit variants are not supported\")]\n\tComplexEnum,\n\t#[error(\"maps are not supported\")]\n\tMap\n}\n\nimpl ser::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","mod.rs"],"content":"use itoa::Integer;\nuse paste::paste;\nuse serde::ser::{\n\tself, Serialize, SerializeSeq, SerializeStruct, SerializeTuple,\n\tSerializeTupleStruct\n};\n\nmod error;\npub use error::Error;\n\npub struct Serializer {\n\t/// Buffer that the output gets written to.\n\tbuf: String,\n\n\t/// Set to true for pretty output.\n\tpretty: bool,\n\n\t/// The current level of nesting\n\tlvl: usize,\n\n\t/// The indentation (in levels) of the current line\n\tindent: usize,\n\n\t/// An itoa::Buffer to re-use when printing integers\n\titoa_buffer: itoa::Buffer\n}\n\nimpl Serializer {\n\tfn new(pretty: bool) -> Self {\n\t\tSelf {\n\t\t\tbuf: String::new(),\n\t\t\tpretty,\n\t\t\tlvl: 0,\n\t\t\tindent: 0,\n\t\t\titoa_buffer: itoa::Buffer::new()\n\t\t}\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn to_string<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(false);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\npub fn to_string_pretty<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(true);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\nimpl Serializer {\n\tfn newline(&mut self) {\n\t\tself.buf += \"\\n\";\n\t\tfor _ in 0..self.lvl {\n\t\t\tself.buf += \"  \";\n\t\t}\n\t\tself.indent = self.lvl;\n\t}\n\n\tfn begin_sexpr(&mut self, name: &str) {\n\t\tif self.lvl > 0 {\n\t\t\tif self.pretty {\n\t\t\t\tself.newline();\n\t\t\t} else {\n\t\t\t\tself.buf += \" \";\n\t\t\t}\n\t\t}\n\t\tself.lvl += 1;\n\t\tself.buf += \"(\";\n\t\tself.buf += name;\n\t}\n\n\tfn end_sexpr(&mut self) {\n\t\tself.lvl -= 1;\n\t\tself.buf += \")\";\n\t}\n\n\tfn write_integer<I: Integer>(&mut self, v: I) {\n\t\tself.buf += \" \";\n\t\tself.buf += self.itoa_buffer.format(v);\n\t}\n\n\tfn write_float<F: ToString>(&mut self, v: F) {\n\t\tself.buf += \" \";\n\t\tself.buf += &v.to_string();\n\t}\n\n\tfn write_str(&mut self, v: &str, aggressive_quotes: bool) {\n\t\tself.buf += \" \";\n\n\t\tconst CHARS: &[char] = &[' ', '\\t', '\\n', '\\r', '(', ')', '\"'];\n\t\tlet need_quotes = v.is_empty()\n\t\t\t|| match aggressive_quotes {\n\t\t\t\ttrue => v.chars().any(|ch| !ch.is_ascii_alphabetic() && ch != '_'),\n\t\t\t\tfalse => v.contains(CHARS)\n\t\t\t};\n\n\t\tif need_quotes {\n\t\t\tself.buf += r#\"\"\"#;\n\t\t\tself.buf += &v.replace('\\\\', r\"\\\\\").replace('\"', r#\"\\\"\"#);\n\t\t\tself.buf += r#\"\"\"#;\n\t\t} else {\n\t\t\tself.buf += v;\n\t\t}\n\t}\n}\n\nmacro_rules! serialize_type_error {\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n}\n\ntype Impossible<T = (), E = Error> = serde::ser::Impossible<T, E>;\n\nimpl<'a> ser::Serializer for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Impossible;\n\ttype SerializeTuple = Impossible;\n\ttype SerializeTupleStruct = Self;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = Self;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_bool(self, bool);\n\t\tfn serialize_i8(self, i8);\n\t\tfn serialize_i16(self, i16);\n\t\tfn serialize_i32(self, i32);\n\t\tfn serialize_i64(self, i64);\n\t\tfn serialize_i128(self, i128);\n\t\tfn serialize_u8(self, u8);\n\t\tfn serialize_u16(self, u16);\n\t\tfn serialize_u32(self, u32);\n\t\tfn serialize_u64(self, u64);\n\t\tfn serialize_u128(self, u128);\n\t\tfn serialize_f32(self, f32);\n\t\tfn serialize_f64(self, f64);\n\t\tfn serialize_char(self, char);\n\t\tfn serialize_str(self, &str);\n\t\tfn serialize_bytes(self, &[u8]);\n\t\tfn serialize_none(self);\n\t\tfn serialize_some<T>(self, &T);\n\t\tfn serialize_unit(self);\n\t\tfn serialize_unit_variant(self, &'static str, u32, &'static str);\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T);\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_seq(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_tuple(self, usize) -> Result<Impossible>;\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.begin_sexpr(name);\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.begin_sexpr(name);\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self,\n\t\t\tname: None\n\t\t})?;\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_tuple_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize\n\t) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n\n\tfn serialize_struct(self, name: &'static str, _len: usize) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n}\n\nimpl<'a> SerializeTupleStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\t// TODO this should probably not be self\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: Some(key)\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\n/// This serializer will serialize all fields. It needs the field name for booleans and\n/// sequences.\nstruct Field<'a> {\n\tser: &'a mut Serializer,\n\tname: Option<&'static str>\n}\n\nmacro_rules! serialize_integer {\n\t($($integer:ty)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<serialize_ $integer>](self, v: $integer) -> Result<()> {\n\t\t\t\t\tself.ser.write_integer(v);\n\t\t\t\t\tOk(())\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a> ser::Serializer for Field<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Sequence<'a>;\n\ttype SerializeTuple = Sequence<'a>;\n\ttype SerializeTupleStruct = &'a mut Serializer;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = &'a mut Serializer;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_char(self, char) = Error::Char;\n\t\tfn serialize_bytes(self, &[u8]) = Error::Bytes;\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T) = Error::ComplexEnum;\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible> = Error::Map;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t}\n\n\tfn serialize_bool(self, v: bool) -> Result<()> {\n\t\tlet name = self.name.ok_or(Error::UnnamedBoolean)?;\n\t\tif v {\n\t\t\tself.serialize_str(name)?;\n\t\t}\n\t\tOk(())\n\t}\n\n\tserialize_integer! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128\n\t}\n\n\tfn serialize_f32(self, v: f32) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_f64(self, v: f64) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_str(self, v: &str) -> Result<()> {\n\t\tself.ser.write_str(v, true);\n\t\tOk(())\n\t}\n\n\tfn serialize_none(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn serialize_some<T>(self, v: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tv.serialize(self)\n\t}\n\n\tfn serialize_unit(self) -> Result<()> {\n\t\tlet name = self.name.ok_or(Error::UnnamedUnit)?;\n\t\tself.ser.serialize_unit_struct(name)\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.ser.serialize_unit_struct(name)\n\t}\n\n\tfn serialize_unit_variant(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variant_index: u32,\n\t\tvariant: &'static str\n\t) -> Result<()> {\n\t\tself.ser.write_str(variant, false);\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.ser.serialize_newtype_struct(name, value)\n\t}\n\n\tfn serialize_seq(self, _len: Option<usize>) -> Result<Sequence<'a>> {\n\t\tlet name = self.name.ok_or(Error::UnnamedSeq)?;\n\t\tlet close_sexpr = match name {\n\t\t\t\"\" => false,\n\t\t\tname => {\n\t\t\t\tself.ser.begin_sexpr(name);\n\t\t\t\ttrue\n\t\t\t}\n\t\t};\n\t\tOk(Sequence::new(self.ser, close_sexpr))\n\t}\n\n\tfn serialize_tuple(self, len: usize) -> Result<Sequence<'a>> {\n\t\tself.serialize_seq(Some(len))\n\t}\n\n\tfn serialize_tuple_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\tlen: usize\n\t) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_tuple_struct(name, len)\n\t}\n\n\tfn serialize_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\tlen: usize\n\t) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_struct(name, len)\n\t}\n}\n\n/// A sequence / tuple serializer that optionally closes an s-expr afterwards\nstruct Sequence<'a> {\n\tser: &'a mut Serializer,\n\tclose_sexpr: bool\n}\n\nimpl<'a> Sequence<'a> {\n\tfn new(ser: &'a mut Serializer, close_sexpr: bool) -> Self {\n\t\tSelf { ser, close_sexpr }\n\t}\n}\n\nimpl<'a> SerializeSeq for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self.ser,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tif self.close_sexpr {\n\t\t\tself.ser.end_sexpr();\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeTuple for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tSerializeSeq::serialize_element(self, value)\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tSerializeSeq::end(self)\n\t}\n}\n","traces":[{"line":29,"address":[171440,171603],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":31,"address":[171467],"length":1,"stats":{"Line":2},"fn_name":null},{"line":35,"address":[171482],"length":1,"stats":{"Line":2},"fn_name":null},{"line":42,"address":[227980,230380,228416,229980,228780,231180,227616,230816,228816,229616,229580,230780,229180,229216,228380,228016,230416,230016],"length":1,"stats":{"Line":11},"fn_name":"to_string<test::Pad>"},{"line":46,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":22},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":51,"address":[225983,226783,225216,224016,224816,225583,226016,224383,226383,224416,226816,227583,227183,224783,227216,226416,225183,225616],"length":1,"stats":{"Line":11},"fn_name":"to_string_pretty<test::Font>"},{"line":55,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":61,"address":[171616],"length":1,"stats":{"Line":1},"fn_name":"newline"},{"line":62,"address":[171630],"length":1,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[171652,171774],"length":1,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[171789],"length":1,"stats":{"Line":1},"fn_name":null},{"line":66,"address":[171756],"length":1,"stats":{"Line":1},"fn_name":null},{"line":69,"address":[171808],"length":1,"stats":{"Line":2},"fn_name":"begin_sexpr"},{"line":70,"address":[171842],"length":1,"stats":{"Line":2},"fn_name":null},{"line":71,"address":[171880],"length":1,"stats":{"Line":1},"fn_name":null},{"line":72,"address":[171915],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[171891],"length":1,"stats":{"Line":1},"fn_name":null},{"line":77,"address":[171854,171931,171954],"length":1,"stats":{"Line":4},"fn_name":null},{"line":78,"address":[171935],"length":1,"stats":{"Line":2},"fn_name":null},{"line":79,"address":[171999],"length":1,"stats":{"Line":2},"fn_name":null},{"line":82,"address":[172016],"length":1,"stats":{"Line":2},"fn_name":"end_sexpr"},{"line":83,"address":[172081,172029],"length":1,"stats":{"Line":2},"fn_name":null},{"line":84,"address":[172062],"length":1,"stats":{"Line":2},"fn_name":null},{"line":87,"address":[158848,159184,159632,158608,158720,159296,159520,159072,158960,159408],"length":1,"stats":{"Line":2},"fn_name":"write_integer<u32>"},{"line":88,"address":[159545,159323,159094,158872,158754,159666,159208,158985,158630,159435],"length":1,"stats":{"Line":2},"fn_name":null},{"line":89,"address":[159571,159698,158899,159011,158656,158786,159235,159350,159462,159120],"length":1,"stats":{"Line":2},"fn_name":null},{"line":92,"address":[159952,159760,159933,160125],"length":1,"stats":{"Line":1},"fn_name":"write_float<f64>"},{"line":93,"address":[159780,159972],"length":1,"stats":{"Line":1},"fn_name":null},{"line":94,"address":[160011,159819,160041,159849],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[172664,172128],"length":1,"stats":{"Line":2},"fn_name":"write_str"},{"line":98,"address":[172189],"length":1,"stats":{"Line":2},"fn_name":null},{"line":101,"address":[172216,172337,172245],"length":1,"stats":{"Line":4},"fn_name":null},{"line":102,"address":[172239],"length":1,"stats":{"Line":2},"fn_name":null},{"line":103,"address":[160144,160157],"length":1,"stats":{"Line":6},"fn_name":"{closure#0}"},{"line":104,"address":[172269],"length":1,"stats":{"Line":1},"fn_name":null},{"line":107,"address":[172250],"length":1,"stats":{"Line":2},"fn_name":null},{"line":108,"address":[172379],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[172416],"length":1,"stats":{"Line":1},"fn_name":null},{"line":110,"address":[172684],"length":1,"stats":{"Line":1},"fn_name":null},{"line":112,"address":[172364],"length":1,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[176224,175568,176368,176448,176656,175408,175776,176528,175936,175488,175696,176304,175328,176144,176592,175632,175856,176000,176064],"length":1,"stats":{"Line":0},"fn_name":"serialize_bool"},{"line":123,"address":[175349,175584,176242,175794,176604,175508,175426,176320,175649,175952,175876,176086,176540,176017,176162,176470,176390,176722,175718],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[177056,176928,177136,176784,176864],"length":1,"stats":{"Line":0},"fn_name":"serialize_seq"},{"line":133,"address":[176881,177078,177207,176806,176999],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[177264,177328],"length":1,"stats":{"Line":0},"fn_name":"serialize_char"},{"line":143,"address":[177353,177283],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[177504,177568,177392],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple_variant"},{"line":153,"address":[177529,177454,177630],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[172720],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_struct"},{"line":206,"address":[172788],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[172798],"length":1,"stats":{"Line":1},"fn_name":null},{"line":208,"address":[172813],"length":1,"stats":{"Line":1},"fn_name":null},{"line":211,"address":[234112,234512],"length":1,"stats":{"Line":2},"fn_name":"serialize_newtype_struct<f32>"},{"line":215,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":221,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":224,"address":[172832],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple_struct"},{"line":229,"address":[172903],"length":1,"stats":{"Line":1},"fn_name":null},{"line":230,"address":[172923],"length":1,"stats":{"Line":1},"fn_name":null},{"line":233,"address":[172944],"length":1,"stats":{"Line":2},"fn_name":"serialize_struct"},{"line":234,"address":[173015],"length":1,"stats":{"Line":2},"fn_name":null},{"line":235,"address":[173035],"length":1,"stats":{"Line":2},"fn_name":null},{"line":243,"address":[236704],"length":1,"stats":{"Line":1},"fn_name":"serialize_field<f32>"},{"line":247,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":248,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":249,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":253,"address":[173056],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":254,"address":[173088],"length":1,"stats":{"Line":1},"fn_name":null},{"line":255,"address":[173103],"length":1,"stats":{"Line":1},"fn_name":null},{"line":263,"address":[235920,235136,236368,236592,235808,234912,235024,235248,236480,236144,235360,235696,235472,236032,235584,236256],"length":1,"stats":{"Line":18},"fn_name":"serialize_field<alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>>"},{"line":268,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":269,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":274,"address":[173120],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":275,"address":[173152],"length":1,"stats":{"Line":1},"fn_name":null},{"line":276,"address":[173167],"length":1,"stats":{"Line":1},"fn_name":null},{"line":291,"address":[178080,177872,177744,178016,178208,177808,177936,177680,178144,178272],"length":1,"stats":{"Line":2},"fn_name":"serialize_i8"},{"line":292,"address":[177986,177765,177699,178240,178101,178173,178322,177904,178035,177837],"length":1,"stats":{"Line":2},"fn_name":null},{"line":293,"address":[178191,177855,178121,177719,177922,177785,178340,178258,178004,178055],"length":1,"stats":{"Line":2},"fn_name":null},{"line":313,"address":[177275],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[177345],"length":1,"stats":{"Line":0},"fn_name":null},{"line":319,"address":[177445],"length":1,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[177521],"length":1,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[177621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":324,"address":[173184],"length":1,"stats":{"Line":1},"fn_name":"serialize_bool"},{"line":325,"address":[173225,173367],"length":1,"stats":{"Line":1},"fn_name":null},{"line":326,"address":[173642,173349],"length":1,"stats":{"Line":2},"fn_name":null},{"line":327,"address":[173539,173652],"length":1,"stats":{"Line":1},"fn_name":null},{"line":329,"address":[173516],"length":1,"stats":{"Line":1},"fn_name":null},{"line":336,"address":[173808],"length":1,"stats":{"Line":1},"fn_name":"serialize_f32"},{"line":337,"address":[173827],"length":1,"stats":{"Line":1},"fn_name":null},{"line":338,"address":[173844],"length":1,"stats":{"Line":1},"fn_name":null},{"line":341,"address":[173856],"length":1,"stats":{"Line":0},"fn_name":"serialize_f64"},{"line":342,"address":[173875],"length":1,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[173892],"length":1,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[173904],"length":1,"stats":{"Line":2},"fn_name":"serialize_str"},{"line":347,"address":[173954],"length":1,"stats":{"Line":2},"fn_name":null},{"line":348,"address":[173977],"length":1,"stats":{"Line":1},"fn_name":null},{"line":351,"address":[174000],"length":1,"stats":{"Line":1},"fn_name":"serialize_none"},{"line":352,"address":[174003],"length":1,"stats":{"Line":1},"fn_name":null},{"line":355,"address":[233408,233568,233328,233648,233488],"length":1,"stats":{"Line":4},"fn_name":"serialize_some<f32>"},{"line":359,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":362,"address":[174016],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit"},{"line":363,"address":[174172,174040],"length":1,"stats":{"Line":1},"fn_name":null},{"line":364,"address":[174154],"length":1,"stats":{"Line":1},"fn_name":null},{"line":367,"address":[174320],"length":1,"stats":{"Line":0},"fn_name":"serialize_unit_struct"},{"line":368,"address":[174341],"length":1,"stats":{"Line":0},"fn_name":null},{"line":371,"address":[174368],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_variant"},{"line":377,"address":[174436],"length":1,"stats":{"Line":1},"fn_name":null},{"line":378,"address":[174456],"length":1,"stats":{"Line":1},"fn_name":null},{"line":381,"address":[233728],"length":1,"stats":{"Line":0},"fn_name":"serialize_newtype_struct<f32>"},{"line":385,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[174480],"length":1,"stats":{"Line":1},"fn_name":"serialize_seq"},{"line":389,"address":[174672,174521],"length":1,"stats":{"Line":1},"fn_name":null},{"line":390,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[174642,174820,174867],"length":1,"stats":{"Line":3},"fn_name":null},{"line":392,"address":[174841],"length":1,"stats":{"Line":1},"fn_name":null},{"line":393,"address":[174857],"length":1,"stats":{"Line":1},"fn_name":null},{"line":394,"address":[174910],"length":1,"stats":{"Line":1},"fn_name":null},{"line":397,"address":[174933,174880],"length":1,"stats":{"Line":2},"fn_name":null},{"line":400,"address":[174960],"length":1,"stats":{"Line":2},"fn_name":"serialize_tuple"},{"line":401,"address":[174976],"length":1,"stats":{"Line":2},"fn_name":null},{"line":404,"address":[175056],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple_struct"},{"line":409,"address":[175083],"length":1,"stats":{"Line":1},"fn_name":null},{"line":412,"address":[175104],"length":1,"stats":{"Line":1},"fn_name":"serialize_struct"},{"line":417,"address":[175131],"length":1,"stats":{"Line":1},"fn_name":null},{"line":428,"address":[175152],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":437,"address":[233968,233776,233872],"length":1,"stats":{"Line":4},"fn_name":"serialize_element<&test::Pad>"},{"line":441,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":442,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":443,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":447,"address":[175200],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":448,"address":[175234],"length":1,"stats":{"Line":1},"fn_name":null},{"line":449,"address":[175264],"length":1,"stats":{"Line":1},"fn_name":null},{"line":451,"address":[175248],"length":1,"stats":{"Line":1},"fn_name":null},{"line":459,"address":[234064],"length":1,"stats":{"Line":2},"fn_name":"serialize_element<f32>"},{"line":463,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":466,"address":[175280],"length":1,"stats":{"Line":2},"fn_name":"end"},{"line":467,"address":[175307],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":124,"coverable":146},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","untagged.rs"],"content":"#[macro_export(local_inner_macros)]\nmacro_rules! untagged {\n\t(\n\t\t$(#[$attr:meta])*\n\t\t$vis:vis enum $name:ident {\n\t\t\t$(\n\t\t\t\t$(#[$variant_attr:meta])*\n\t\t\t\t$variant:ident($inner:ty)\n\t\t\t),+\n\t\t}\n\t) => {\n\t\t$(#[$attr])*\n\t\t#[derive(::serde::Serialize)]\n\t\t#[serde(untagged)]\n\t\t$vis enum $name {\n\t\t\t$(\n\t\t\t\t$(#[$variant_attr])*\n\t\t\t\t$variant($inner)\n\t\t\t),+\n\t\t}\n\n\t\timpl<'de> ::serde::Deserialize<'de> for $name\n\t\twhere\n\t\t\t$($inner: ::serde::Deserialize<'de>),*\n\t\t{\n\t\t\tfn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n\t\t\twhere\n\t\t\t\tD: ::serde::Deserializer<'de>\n\t\t\t{\n\t\t\t\tstatic VARIANTS: $crate::private::SyncLazy<\n\t\t\t\t\t::std::result::Result<\n\t\t\t\t\t\t[&'static str; count!($($variant)+)],\n\t\t\t\t\t\t::std::string::String\n\t\t\t\t\t>\n\t\t\t\t> = $crate::private::SyncLazy::new(|| ::std::result::Result::Ok([$({\n\t\t\t\t\tlet extraction = <$inner as ::serde::Deserialize>::deserialize(\n\t\t\t\t\t\t$crate::private::NameExtractor\n\t\t\t\t\t);\n\t\t\t\t\tlet extraction = match extraction {\n\t\t\t\t\t\t::std::result::Result::Ok(_) => ::std::unreachable!(),\n\t\t\t\t\t\t::std::result::Result::Err(e) => e\n\t\t\t\t\t};\n\t\t\t\t\tmatch extraction {\n\t\t\t\t\t\t$crate::private::Extraction::Ok(name) => name,\n\t\t\t\t\t\t$crate::private::Extraction::Err(err) => return Err(err)\n\t\t\t\t\t}\n\t\t\t\t}),+]));\n\t\t\t\tlet variants: &'static [&'static str] = VARIANTS\n\t\t\t\t\t.as_ref()\n\t\t\t\t\t.map_err(|err| <D::Error as ::serde::de::Error>::custom(err))?;\n\n\t\t\t\tstruct Visitor(&'static [&'static str]);\n\n\t\t\t\timpl<'de> ::serde::de::Visitor<'de> for Visitor {\n\t\t\t\t\ttype Value = $name;\n\n\t\t\t\t\tfn expecting(\n\t\t\t\t\t\t&self, f: &mut ::std::fmt::Formatter<'_>\n\t\t\t\t\t) -> ::std::fmt::Result {\n\t\t\t\t\t\t::std::fmt::Display::fmt(&::std::format_args!(\n\t\t\t\t\t\t\t\"any s-expr with a name in {:?}\",\n\t\t\t\t\t\t\tself.0\n\t\t\t\t\t\t), f)\n\t\t\t\t\t}\n\n\t\t\t\t\tfn visit_enum<A>(self, data: A) -> ::std::result::Result<$name, A::Error>\n\t\t\t\t\twhere\n\t\t\t\t\t\tA: ::serde::de::EnumAccess<'de>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet (variant_name, variant): (::std::borrow::Cow<'de, str>, _) =\n\t\t\t\t\t\t\tdata.variant()?;\n\n\t\t\t\t\t\tlet mut i = 0;\n\t\t\t\t\t\t$(\n\t\t\t\t\t\t\tif variant_name == self.0[i] {\n\t\t\t\t\t\t\t\tlet inner: $inner =\n\t\t\t\t\t\t\t\t\t::serde::de::VariantAccess::newtype_variant(variant)?;\n\t\t\t\t\t\t\t\treturn ::std::result::Result::Ok($name::$variant(inner));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t)+\n\t\t\t\t\t\tlet _ = i;\n\n\t\t\t\t\t\treturn ::std::result::Result::Err(\n\t\t\t\t\t\t\t<A::Error as ::serde::de::Error>::invalid_value(\n\t\t\t\t\t\t\t\t::serde::de::Unexpected::Other(&variant_name),\n\t\t\t\t\t\t\t\t&self\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdeserializer.deserialize_enum(\n\t\t\t\t\t::std::stringify!($name),\n\t\t\t\t\tvariants,\n\t\t\t\t\tVisitor(variants)\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t};\n}\n\n#[macro_export(local_inner_macros)]\n#[doc(hidden)]\nmacro_rules! count {\n\t() => {\n\t\t0\n\t};\n\n\t($x:ident $($xs:ident)*) => {\n\t\t1 + count!($($xs)*)\n\t}\n}\n\n#[cfg(test)]\nmod tests {\n\tmod foo_bar {\n\t\tuse serde::{Deserialize, Serialize};\n\n\t\t#[derive(Debug, Deserialize, PartialEq, Serialize)]\n\t\t#[serde(deny_unknown_fields, rename = \"foo\")]\n\t\tpub(super) struct Foo;\n\n\t\t#[derive(Debug, Deserialize, PartialEq, Serialize)]\n\t\t#[serde(deny_unknown_fields, rename = \"bar\")]\n\t\tpub(super) struct Bar;\n\t}\n\n\tuse foo_bar::{Bar, Foo};\n\n\tuntagged! {\n\t\t#[derive(Debug, PartialEq)]\n\t\tenum FooOrBar {\n\t\t\tFoo(Foo),\n\t\t\tBar(Bar)\n\t\t}\n\t}\n\n\t#[test]\n\tfn deserialize_foo() {\n\t\tlet input = \"(foo)\";\n\t\tlet expected = FooOrBar::Foo(Foo);\n\n\t\tlet parsed: FooOrBar =\n\t\t\tcrate::from_str(input).expect(\"Failed to parse input\");\n\t\tassert_eq!(parsed, expected);\n\t}\n\n\t#[test]\n\tfn deserialize_bar() {\n\t\tlet input = \"(bar)\";\n\t\tlet expected = FooOrBar::Bar(Bar);\n\n\t\tlet parsed: FooOrBar =\n\t\t\tcrate::from_str(input).expect(\"Failed to parse input\");\n\t\tassert_eq!(parsed, expected);\n\t}\n}\n","traces":[{"line":18,"address":[157552,158028,157735,157975,157414,157362,157788,157472],"length":1,"stats":{"Line":2},"fn_name":null},{"line":26,"address":[178720,179179],"length":1,"stats":{"Line":2},"fn_name":"deserialize<&mut serde_sexpr::de::Deserializer>"},{"line":35,"address":[179232,179774],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":36,"address":[179257,179423],"length":1,"stats":{"Line":2},"fn_name":null},{"line":39,"address":[179589,179267],"length":1,"stats":{"Line":2},"fn_name":null},{"line":40,"address":[179615,179290],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[179320,179645],"length":1,"stats":{"Line":2},"fn_name":null},{"line":43,"address":[179372,179709],"length":1,"stats":{"Line":2},"fn_name":null},{"line":44,"address":[179388,179742],"length":1,"stats":{"Line":2},"fn_name":null},{"line":45,"address":[179446,179847],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[179837,179581],"length":1,"stats":{"Line":2},"fn_name":null},{"line":48,"address":[178863,179128,178750],"length":1,"stats":{"Line":4},"fn_name":null},{"line":50,"address":[179137,179200,179033,179216],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}<&mut serde_sexpr::de::Deserializer>"},{"line":57,"address":[157152],"length":1,"stats":{"Line":0},"fn_name":"expecting"},{"line":60,"address":[157174],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[180000,181449],"length":1,"stats":{"Line":2},"fn_name":"visit_enum<serde_sexpr::de::Enum>"},{"line":70,"address":[180168],"length":1,"stats":{"Line":2},"fn_name":null},{"line":71,"address":[180294,180048],"length":1,"stats":{"Line":2},"fn_name":null},{"line":73,"address":[180258],"length":1,"stats":{"Line":2},"fn_name":null},{"line":75,"address":[180383,180803,180876,180478,180270],"length":1,"stats":{"Line":8},"fn_name":null},{"line":77,"address":[181092,181208,180522,180631,180744,180983],"length":1,"stats":{"Line":2},"fn_name":null},{"line":78,"address":[181058,180597],"length":1,"stats":{"Line":2},"fn_name":null},{"line":80,"address":[180838,181269,181240,180484,180795,180945],"length":1,"stats":{"Line":2},"fn_name":null},{"line":84,"address":[181375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[181335],"length":1,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[181311,181253],"length":1,"stats":{"Line":0},"fn_name":null},{"line":93,"address":[178974,178946,179177],"length":1,"stats":{"Line":6},"fn_name":null},{"line":96,"address":[178954],"length":1,"stats":{"Line":2},"fn_name":null}],"covered":20,"coverable":28},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","tests","test.rs"],"content":"use indoc::indoc;\nuse paste::paste;\nuse pretty_assertions::assert_eq;\nuse serde::{de::DeserializeOwned, Deserialize, Serialize};\nuse serde_sexpr::Literal;\nuse std::fmt::Debug;\n\nfn assert_eq_parsed<T>(input: &str, expected: &T)\nwhere\n\tT: Debug + DeserializeOwned + PartialEq\n{\n\tlet parsed: T = serde_sexpr::from_str(input).expect(\"Failed to parse input\");\n\tassert_eq!(&parsed, expected);\n}\n\nfn assert_eq_ugly<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written = serde_sexpr::to_string(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected);\n}\n\nfn assert_eq_pretty<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written =\n\t\tserde_sexpr::to_string_pretty(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected.trim_end_matches('\\n'));\n}\n\nmacro_rules! test_case {\n\t(name: $name:ident,input: $input:expr,value: $value:expr) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n\n\t(\n\t\tname: $name:ident,input: $input:expr,pretty: $pretty:expr,value: $value:expr\n\t) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\t\t\tconst [<TEST_CASE_PRETTY_ $name:upper>]: &str = $pretty;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_PRETTY_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_PRETTY_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"locked\")]\nstruct Locked;\n\ntest_case! {\n\tname: locked,\n\tinput: \"(locked)\",\n\tvalue: Locked\n}\n\n#[test]\nfn test_deserialize_locked_trailing_tokens() {\n\tlet input = \"(locked))\";\n\tlet err = serde_sexpr::from_str::<Locked>(input).unwrap_err();\n\tassert_eq!(err.kind, serde_sexpr::de::ErrorKind::TrailingTokens);\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"attr\")]\nstruct Attribute(String);\n\ntest_case! {\n\tname: attr,\n\tinput: \"(attr smd)\",\n\tvalue: Attribute(\"smd\".to_owned())\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"descr\")]\nstruct Description(String);\n\ntest_case! {\n\tname: descr,\n\tinput: r#\"(descr \"Hello \\\"World\\\", this \\\"\\\\\\\" is an amazing backspace! \\\\\")\"#,\n\tvalue: Description(\n\t\tr#\"Hello \"World\", this \"\\\" is an amazing backspace! \\\"#.to_owned()\n\t)\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"at\")]\nstruct Position {\n\tx: f32,\n\ty: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\trot: Option<i16>\n}\n\ntest_case! {\n\tname: position_without_rot,\n\tinput: \"(at 1.23 -4.56)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: None\n\t}\n}\n\ntest_case! {\n\tname: position_with_rot,\n\tinput: \"(at 1.23 -4.56 -90)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: Some(-90)\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"size\")]\nstruct Size(f32, f32);\n\ntest_case! {\n\tname: size,\n\tinput: \"(size 1.23 4.56)\",\n\tvalue: Size(1.23, 4.56)\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"thickness\")]\nstruct Thickness(f32);\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"font\")]\nstruct Font {\n\tsize: Size,\n\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tthickness: Option<Thickness>,\n\n\tbold: bool\n}\n\ntest_case! {\n\tname: font,\n\tinput: \"(font (size 1.27 1.27))\",\n\tpretty: indoc!(r#\"\n\t\t(font\n\t\t  (size 1.27 1.27))\n\t\"#),\n\tvalue: Font {\n\t\tsize: Size(1.27, 1.27),\n\t\tthickness: None,\n\t\tbold: false\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"line\")]\nstruct Line {\n\tstart: (f32, f32),\n\tend: (f32, f32),\n\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tlocked: Option<()>\n}\n\ntest_case! {\n\tname: line_unlocked,\n\tinput: \"(line (start -2.54 1.27) (end 2.54 1.27))\",\n\tpretty: indoc!(r#\"\n\t\t(line\n\t\t  (start -2.54 1.27)\n\t\t  (end 2.54 1.27))\n\t\"#),\n\tvalue: Line {\n\t\tstart: (-2.54, 1.27),\n\t\tend: (2.54, 1.27),\n\t\tlocked: None\n\t}\n}\n\ntest_case! {\n\tname: line_locked,\n\tinput: \"(line (start -2.54 1.27) (end 2.54 1.27) (locked))\",\n\tpretty: indoc!(r#\"\n\t\t(line\n\t\t  (start -2.54 1.27)\n\t\t  (end 2.54 1.27)\n\t\t  (locked))\n\t\"#),\n\tvalue: Line {\n\t\tstart: (-2.54, 1.27),\n\t\tend: (2.54, 1.27),\n\t\tlocked: Some(())\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\nenum PadType {\n\t#[serde(rename = \"thru-hole\")]\n\tThroughHole,\n\n\t#[serde(rename = \"smd\")]\n\tSmd\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(rename_all = \"lowercase\")]\nenum PadShape {\n\tCircle,\n\tRect\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"drill\")]\nstruct Drill {\n\toval: bool,\n\tdrill1: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill2: Option<f32>\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"pad\")]\nstruct Pad {\n\tindex: Literal,\n\tty: PadType,\n\tshape: PadShape,\n\tat: Position,\n\tsize: Size,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill: Option<Drill>,\n\tlayers: Vec<String>\n}\n\ntest_case! {\n\tname: pad_without_drill,\n\tinput: r#\"(pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 smd rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::Smd,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: None,\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill 0.635) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill 0.635)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: Some(Drill {\n\t\t\toval: false,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: None\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_oval_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill oval 0.635 0.847) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill oval 0.635 0.847)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: Some(Drill {\n\t\t\toval: true,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: Some(0.847)\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"footprint\")]\nstruct Footprint {\n\tlibrary_link: String,\n\n\t#[serde(default, rename = \"\")]\n\tpads: Vec<Pad>\n}\n\ntest_case! {\n\tname: footprint_without_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\")\"#,\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_one_pad,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![Pad {\n\t\t\tindex: 1.into(),\n\t\t\tty: PadType::Smd,\n\t\t\tshape: PadShape::Rect,\n\t\t\tat: Position {\n\t\t\t\tx: 0.0,\n\t\t\t\ty: 0.0,\n\t\t\t\trot: None\n\t\t\t},\n\t\t\tsize: Size(1.27, 1.27),\n\t\t\tdrill: None,\n\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t}]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_two_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")) (pad 2 smd rect (at 2.54 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\"))\n\t\t  (pad 2 smd rect\n\t\t    (at 2.54 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![\n\t\t\tPad {\n\t\t\t\tindex: 1.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 0.0,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size(1.27, 1.27),\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t},\n\t\t\tPad {\n\t\t\t\tindex: 2.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 2.54,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size(1.27, 1.27),\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t}\n\t\t]\n\t}\n}\n","traces":[],"covered":0,"coverable":0}]}