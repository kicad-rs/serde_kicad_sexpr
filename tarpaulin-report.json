{"files":[{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","error.rs"],"content":"use serde::de;\nuse std::fmt::Display;\nuse thiserror::Error;\n\n#[derive(Clone, Debug, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to deserialize anything but a struct at root\n\t/// level.\n\t#[error(\"Expected to deserialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if the input ends unexpectedly.\n\t#[error(\"Unexpected end of input\")]\n\tEof,\n\n\t/// This error will be returned if an opening s-expr was expected, but some other token was\n\t/// found.\n\t#[error(\"Expected s-expr\")]\n\tExpectedSExpr,\n\n\t/// This error will be returned if an opening s-expr with a certain name was expected, but\n\t/// some other token was found.\n\t#[error(\"Expected s-expr identifier {0}\")]\n\tExpectedSExprIdentifier(&'static str),\n\n\t/// This error will be returned if the end of the s-expr was expected, but some other token\n\t/// was found.\n\t#[error(\"Expected end of expression\")]\n\tExpectedEoe,\n\n\t/// This error will be returned if an identifier was expected, but some other token was found.\n\t#[error(\"Expected identifier\")]\n\tExpectedIdentifier,\n\n\t/// This error will be returned if a number was expected, but some other token was found.\n\t#[error(\"Expected number\")]\n\tExpectedNumber,\n\n\t/// This error will be returned if a string was expected, but some other token was found.\n\t#[error(\"Expected string\")]\n\tExpectedString,\n\n\t/// This error will be returned if an option was requested. [`Option`] is **not supported**\n\t/// by this data format.\n\t#[error(\"std::option::Option cannot be deserialized by this data format\")]\n\tDeserializeOption,\n\n\t/// This error will be returned if an s-expr is found, but its name (and fields) were not\n\t/// supplied to the deserializer (e.g. `deserialize_any` was called).\n\t#[error(\"Missing s-expr type info\")]\n\tMissingSExprInfo,\n\n\t/// This error will be returned when attempting to deserialize a non-unit enum variant.\n\t#[error(\"Non-unit enum variants are not supported\")]\n\tNonUnitEnumVariant,\n\n\t/// This error will be returned if there were trailing tokens after the deserialization\n\t/// finished.\n\t#[error(\"Trailing tokens\")]\n\tTrailingTokens\n}\n\nimpl de::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":67,"address":[260449,260384],"length":1,"stats":{"Line":1},"fn_name":"custom<core::fmt::Arguments>"},{"line":68,"address":[260397],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":2,"coverable":2},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","mod.rs"],"content":"use paste::paste;\nuse serde::{\n\tde::{self, DeserializeSeed, EnumAccess, MapAccess, SeqAccess, VariantAccess, Visitor},\n\tforward_to_deserialize_any, Deserialize\n};\nuse std::{borrow::Cow, fmt::Display, str::FromStr};\n\nmod error;\npub use error::Error;\n\npub struct Deserializer<'de> {\n\tinput: &'de str\n}\n\nimpl<'de> Deserializer<'de> {\n\tpub fn from_str(input: &'de str) -> Self {\n\t\tSelf { input }\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn from_str<'de, T>(input: &'de str) -> Result<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tlet mut deserializer = Deserializer::from_str(input);\n\tlet value = T::deserialize(&mut deserializer)?;\n\n\tdeserializer.skip_whitespace();\n\tif !deserializer.input.is_empty() {\n\t\treturn Err(Error::TrailingTokens);\n\t}\n\n\tOk(value)\n}\n\nimpl<'de> Deserializer<'de> {\n\tfn skip_whitespace(&mut self) {\n\t\tself.input = self.input.trim_start();\n\t}\n\n\tfn peek_char(&mut self) -> Result<char> {\n\t\tself.input.chars().next().ok_or(Error::Eof)\n\t}\n\n\tfn next_char(&mut self) -> Result<char> {\n\t\tlet ch = self.peek_char()?;\n\t\tself.input = &self.input[ch.len_utf8()..];\n\t\tOk(ch)\n\t}\n\n\tfn peek_identifier(&mut self) -> Option<&'de str> {\n\t\tlet len: usize = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn None;\n\t\t}\n\t\tSome(&self.input[..len])\n\t}\n\n\tfn peek_sexpr_identifier(&mut self) -> Result<&'de str> {\n\t\tlet mut chars = self.input.chars();\n\t\tif chars.next().ok_or(Error::Eof)? != '(' {\n\t\t\treturn Err(Error::ExpectedSExpr);\n\t\t}\n\t\tlet paren = '('.len_utf8();\n\t\tlet len: usize = chars\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn Err(Error::ExpectedIdentifier);\n\t\t}\n\t\tOk(&self.input[paren..paren + len])\n\t}\n\n\tfn consume(&mut self, len: usize) -> Result<()> {\n\t\tif self.input.len() < len {\n\t\t\treturn Err(Error::Eof);\n\t\t}\n\t\tself.input = &self.input[len..];\n\t\tOk(())\n\t}\n\n\tfn parse_number<T>(&mut self) -> Result<T>\n\twhere\n\t\tT: FromStr,\n\t\tT::Err: Display\n\t{\n\t\tlet len = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| ch.is_ascii_digit() || *ch == '-' || *ch == '.')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn Err(Error::ExpectedNumber);\n\t\t}\n\t\tlet number = &self.input[..len];\n\t\tlet number = number\n\t\t\t.parse()\n\t\t\t.map_err(|err: T::Err| Error::Message(err.to_string()))?;\n\t\tself.input = &self.input[len..];\n\t\tOk(number)\n\t}\n\n\tfn parse_string(&mut self) -> Result<Cow<'de, str>> {\n\t\tmatch self.peek_char()? {\n\t\t\t'(' => Err(Error::ExpectedString),\n\n\t\t\t'\"' => {\n\t\t\t\tself.consume('\"'.len_utf8())?;\n\t\t\t\tlet mut value = String::new();\n\t\t\t\tloop {\n\t\t\t\t\tlet len: usize = self\n\t\t\t\t\t\t.input\n\t\t\t\t\t\t.chars()\n\t\t\t\t\t\t.take_while(|ch| *ch != '\"')\n\t\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t\t.sum();\n\t\t\t\t\tif len >= self.input.len() {\n\t\t\t\t\t\treturn Err(Error::Eof);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet mut start_idx = value.chars().count();\n\t\t\t\t\tvalue += &self.input[..len + 1];\n\t\t\t\t\tself.input = &self.input[len + 1..];\n\t\t\t\t\twhile let Some(idx) = (&value[start_idx..]).find(r\"\\\\\") {\n\t\t\t\t\t\tlet idx = start_idx + idx;\n\t\t\t\t\t\tvalue.replace_range(idx..idx + 2, r\"\\\");\n\t\t\t\t\t\tstart_idx = idx + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif value.ends_with(r#\"\\\"\"#) && start_idx < value.len() - 1 {\n\t\t\t\t\t\tvalue.remove(value.len() - 2);\n\t\t\t\t\t} else if value.ends_with(r#\"\"\"#) {\n\t\t\t\t\t\tvalue.remove(value.len() - 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tunreachable!();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tOk(value.into())\n\t\t\t},\n\n\t\t\t_ => {\n\t\t\t\tlet len = self\n\t\t\t\t\t.input\n\t\t\t\t\t.chars()\n\t\t\t\t\t.take_while(|ch| !ch.is_ascii_whitespace() && *ch != ')')\n\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t.sum();\n\t\t\t\tif len == 0 {\n\t\t\t\t\treturn Err(Error::Eof);\n\t\t\t\t}\n\t\t\t\tlet value = &self.input[..len];\n\t\t\t\tself.input = &self.input[len..];\n\t\t\t\tOk(value.into())\n\t\t\t}\n\t\t}\n\t}\n}\n\nimpl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, _: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\treturn Err(Error::ExpectedStruct);\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_map(SExpr::new(self, name, fields)?)\n\t}\n\n\tfn deserialize_unit_struct<V>(self, name: &'static str, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self, name)?;\n\t\tif self.next_char()? != ')' {\n\t\t\treturn Err(Error::ExpectedEoe);\n\t\t}\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(self, name: &'static str, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self, name)?)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self, name)?)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit seq tuple map enum identifier ignored_any\n\t}\n}\n\n/// Deserialise an s-expr.\nstruct SExpr<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tfields: &'static [&'static str],\n\tindex: usize,\n\tskip_to: Option<usize>\n}\n\nimpl<'a, 'de> SExpr<'a, 'de> {\n\tfn consume_beginning(de: &mut Deserializer<'de>, name: &'static str) -> Result<()> {\n\t\tde.skip_whitespace();\n\t\tif de.peek_sexpr_identifier()? != name {\n\t\t\treturn Err(Error::ExpectedSExprIdentifier(name));\n\t\t}\n\t\tde.consume(name.len() + '('.len_utf8())?;\n\t\tOk(())\n\t}\n\n\tfn new(\n\t\tde: &'a mut Deserializer<'de>,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str]\n\t) -> Result<Self> {\n\t\tSelf::consume_beginning(de, name)?;\n\t\tOk(Self {\n\t\t\tde,\n\t\t\tfields,\n\t\t\tindex: 0,\n\t\t\tskip_to: None\n\t\t})\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tself.de.skip_whitespace();\n\t\tif self.skip_to.is_none() && self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(1)?;\n\t\t\t// technically we're done, but there could be booleans that are false, so we'll\n\t\t\t// deserialize those as None/false eventhough they don't exist in the input.\n\t\t\tself.skip_to = Some(self.index + 1);\n\t\t}\n\t\tOk(())\n\t}\n\n\tfn next_value_seed_impl<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tif self.index >= self.fields.len() {\n\t\t\tpanic!(\"There was no key and there is no value\");\n\t\t}\n\n\t\t// booleans are represented in this weird way where they are simply missing if they are\n\t\t// false. This means that if we detect a boolean ahead of our current index, we'll assume\n\t\t// everything inbetween is either None or false, and skip ahead.\n\t\tif let Some(skip_to) = self.skip_to {\n\t\t\tif skip_to == self.index {\n\t\t\t\tself.skip_to = None;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\treturn seed.deserialize(MissingField);\n\t\t}\n\t\tif let Some(identifier) = self.de.peek_identifier() {\n\t\t\tif self.fields[self.index] == identifier {\n\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\tfor i in self.index + 1..self.fields.len() {\n\t\t\t\tif self.fields[i] == identifier {\n\t\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\t\tself.skip_to = Some(i);\n\t\t\t\t\treturn seed.deserialize(MissingField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tseed.deserialize(Field::new(self.de, Some(self.fields[self.index])))\n\t}\n}\n\nimpl<'a, 'de> MapAccess<'de> for SExpr<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>\n\twhere\n\t\tK: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\n\t\tloop {\n\t\t\tif self.index >= self.fields.len() {\n\t\t\t\treturn Ok(None);\n\t\t\t}\n\n\t\t\t// special case: if the ident is empty (\"\") and we are set to skip it, don't even\n\t\t\t// return the field.\n\t\t\tif self.fields[self.index] == \"\" {\n\t\t\t\tif let Some(skip_to) = self.skip_to {\n\t\t\t\t\tif skip_to == self.index {\n\t\t\t\t\t\tself.skip_to = None;\n\t\t\t\t\t}\n\t\t\t\t\tself.index += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tseed.deserialize(FieldIdent(self.fields[self.index]))\n\t\t\t.map(Some)\n\t}\n\n\tfn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tlet value = self.next_value_seed_impl(seed)?;\n\t\tself.index += 1;\n\t\tself.check_eoe()?;\n\t\tOk(value)\n\t}\n}\n\n/// Deserialize an s-expr in tuple format. It cannot contain booleans.\nstruct SExprTuple<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tend: bool\n}\n\nimpl<'a, 'de> SExprTuple<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, name: &'static str) -> Result<Self> {\n\t\tSExpr::consume_beginning(de, name)?;\n\t\tOk(Self { de, end: false })\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tif self.end {\n\t\t\treturn Ok(());\n\t\t}\n\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(')'.len_utf8())?;\n\t\t\tself.end = true;\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for SExprTuple<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\t\tif self.end {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tlet value = seed.deserialize(Field::new(self.de, None))?;\n\t\tself.check_eoe()?;\n\t\tOk(Some(value))\n\t}\n}\n\n/// Deserialize a field's ident.\nstruct FieldIdent(&'static str);\n\nimpl<'de> de::Deserializer<'de> for FieldIdent {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_borrowed_str(self.0)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize a single boolean with value `true`.\nstruct TrueField;\n\nimpl<'de> de::Deserializer<'de> for TrueField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(true)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize either a boolean with value `false` or an option with value `None`.\nstruct MissingField;\n\nimpl<'de> de::Deserializer<'de> for MissingField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_none()\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// A field whose value does not match its ident. This means that if a boolean gets requested,\n/// we must return false without touching the input.\n///\n/// We still store the ident if we know it, so that we can parse a sequence like\n/// (<ident> <values..>). The empty ident (`\"\"`) is treated as a special case to consume\n/// the remaining fields of the current expression.\nstruct Field<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tident: Option<&'static str>\n}\n\nimpl<'a, 'de> Field<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, ident: Option<&'static str>) -> Self {\n\t\tSelf { de, ident }\n\t}\n}\n\nmacro_rules! forward_to_parse_number {\n\t($($ident:ident)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<deserialize_ $ident>]<V>(self, visitor: V) -> Result<V::Value>\n\t\t\t\twhere\n\t\t\t\t\tV: Visitor<'de>\n\t\t\t\t{\n\t\t\t\t\tvisitor.[<visit_ $ident>](self.de.parse_number()?)\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de> de::Deserializer<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tmatch self.de.peek_char()? {\n\t\t\tch @ '0'..='9' | ch @ '-' | ch @ '.' => match self.de.input.find('.') {\n\t\t\t\tSome(idx)\n\t\t\t\t\tif (&self.de.input[..idx]).contains(|ch: char| ch.is_ascii_whitespace()) =>\n\t\t\t\t{\n\t\t\t\t\tif ch == '-' {\n\t\t\t\t\t\tself.deserialize_i64(visitor)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.deserialize_u64(visitor)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t_ => self.deserialize_f32(visitor)\n\t\t\t},\n\t\t\t'(' if Some(self.de.peek_sexpr_identifier()?) == self.ident => {\n\t\t\t\tself.deserialize_seq(visitor)\n\t\t\t},\n\t\t\t'(' => Err(Error::MissingSExprInfo),\n\t\t\t_ => self.deserialize_string(visitor)\n\t\t}\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tfn deserialize_str<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_string(visitor)\n\t}\n\n\tfn deserialize_string<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet value = self.de.parse_string()?;\n\t\tmatch value {\n\t\t\tCow::Borrowed(value) => visitor.visit_borrowed_str(value),\n\t\t\tCow::Owned(value) => visitor.visit_string(value)\n\t\t}\n\t}\n\n\tfn deserialize_option<V>(self, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\t// we'll need to know the type of Some (i.e. the s-expr tag) to see if it is present in\n\t\t// the input or not\n\t\t// however, serde doesn't give us this type of information, so we'll just error\n\t\treturn Err(Error::DeserializeOption);\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_map(SExpr::new(self.de, name, fields)?)\n\t}\n\n\tfn deserialize_unit_struct<V>(self, name: &'static str, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self.de, name)?;\n\t\tif self.de.next_char()? != ')' {\n\t\t\treturn Err(Error::ExpectedEoe);\n\t\t}\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(self, name: &'static str, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_tuple_struct(name, 1, visitor)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self.de, name)?)\n\t}\n\n\tfn deserialize_enum<V>(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variants: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_enum(self)\n\t}\n\n\tfn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet ident = self.ident.ok_or(Error::MissingSExprInfo)?;\n\t\tmatch ident {\n\t\t\t\"\" => {\n\t\t\t\t// special case: we'll return the remaining tokens of the current s-expr\n\t\t\t\tvisitor.visit_seq(self)\n\t\t\t},\n\t\t\t_ => visitor.visit_seq(SExprTuple::new(self.de, ident)?)\n\t\t}\n\t}\n\n\tfn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_seq(visitor)\n\t}\n\n\tforward_to_parse_number! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tchar bytes byte_buf unit map identifier ignored_any\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tseed.deserialize(Field::new(self.de, None)).map(Some)\n\t}\n}\n\nimpl<'a, 'de> EnumAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\ttype Variant = UnitVariant;\n\n\tfn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant)>\n\twhere\n\t\tV: DeserializeSeed<'de>\n\t{\n\t\tOk((seed.deserialize(self)?, UnitVariant))\n\t}\n}\n\n/// This will deserialize only unit variants.\nstruct UnitVariant;\n\nimpl<'de> VariantAccess<'de> for UnitVariant {\n\ttype Error = Error;\n\n\tfn unit_variant(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n\n\tfn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n\n\tfn struct_variant<V>(self, _fields: &'static [&'static str], _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n}\n","traces":[{"line":16,"address":[190032],"length":1,"stats":{"Line":2},"fn_name":"from_str"},{"line":23,"address":[376192,378244,377824,378448,377194,374896,378868,375292,375456,376022,376736,377726,376600,377376],"length":1,"stats":{"Line":9},"fn_name":"from_str<test::Position>"},{"line":27,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":28,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":30,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":31,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":39,"address":[190080],"length":1,"stats":{"Line":2},"fn_name":"skip_whitespace"},{"line":40,"address":[190097],"length":1,"stats":{"Line":2},"fn_name":null},{"line":43,"address":[190160],"length":1,"stats":{"Line":2},"fn_name":"peek_char"},{"line":44,"address":[190179],"length":1,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[190256],"length":1,"stats":{"Line":1},"fn_name":"next_char"},{"line":48,"address":[190286,190390],"length":1,"stats":{"Line":1},"fn_name":null},{"line":49,"address":[190549,190353],"length":1,"stats":{"Line":2},"fn_name":null},{"line":50,"address":[190618],"length":1,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[190640],"length":1,"stats":{"Line":1},"fn_name":"peek_identifier"},{"line":54,"address":[190660],"length":1,"stats":{"Line":1},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":57,"address":[256416,256446],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":58,"address":[256512,256536],"length":1,"stats":{"Line":4},"fn_name":"{closure#1}"},{"line":60,"address":[190745],"length":1,"stats":{"Line":1},"fn_name":null},{"line":61,"address":[190751],"length":1,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[190772],"length":1,"stats":{"Line":2},"fn_name":null},{"line":66,"address":[190848],"length":1,"stats":{"Line":2},"fn_name":"peek_sexpr_identifier"},{"line":67,"address":[190878],"length":1,"stats":{"Line":2},"fn_name":null},{"line":68,"address":[190900],"length":1,"stats":{"Line":2},"fn_name":null},{"line":69,"address":[191194],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[191164],"length":1,"stats":{"Line":2},"fn_name":null},{"line":72,"address":[191263],"length":1,"stats":{"Line":2},"fn_name":null},{"line":73,"address":[256560,256590],"length":1,"stats":{"Line":4},"fn_name":"{closure#0}"},{"line":74,"address":[256680,256656],"length":1,"stats":{"Line":4},"fn_name":"{closure#1}"},{"line":76,"address":[191338],"length":1,"stats":{"Line":2},"fn_name":null},{"line":77,"address":[191349],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[191436],"length":1,"stats":{"Line":2},"fn_name":null},{"line":82,"address":[191616],"length":1,"stats":{"Line":2},"fn_name":"consume"},{"line":83,"address":[191650],"length":1,"stats":{"Line":2},"fn_name":null},{"line":84,"address":[191738],"length":1,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[191812,191692],"length":1,"stats":{"Line":4},"fn_name":null},{"line":87,"address":[191819],"length":1,"stats":{"Line":2},"fn_name":null},{"line":90,"address":[345267,346768,344544,347453,346016,345296,345992,346739],"length":1,"stats":{"Line":5},"fn_name":"parse_number<i64>"},{"line":95,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":96,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":99,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":101,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":102,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":109,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":112,"address":[191840,194938],"length":1,"stats":{"Line":2},"fn_name":"parse_string"},{"line":113,"address":[191879],"length":1,"stats":{"Line":2},"fn_name":null},{"line":114,"address":[192192],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[192770,192856,192264],"length":1,"stats":{"Line":2},"fn_name":null},{"line":118,"address":[192830],"length":1,"stats":{"Line":1},"fn_name":null},{"line":119,"address":[193002],"length":1,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[193136,193018],"length":1,"stats":{"Line":2},"fn_name":null},{"line":121,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[256704,256717],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":124,"address":[256736,256760],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":126,"address":[193190],"length":1,"stats":{"Line":1},"fn_name":null},{"line":127,"address":[193272],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[193398,193241],"length":1,"stats":{"Line":2},"fn_name":null},{"line":131,"address":[193484],"length":1,"stats":{"Line":1},"fn_name":null},{"line":132,"address":[193675],"length":1,"stats":{"Line":1},"fn_name":null},{"line":133,"address":[193851,194900],"length":1,"stats":{"Line":2},"fn_name":null},{"line":134,"address":[194023,194724,194698],"length":1,"stats":{"Line":2},"fn_name":null},{"line":135,"address":[194770,194706],"length":1,"stats":{"Line":2},"fn_name":null},{"line":136,"address":[194871,194905],"length":1,"stats":{"Line":1},"fn_name":null},{"line":148,"address":[194551],"length":1,"stats":{"Line":1},"fn_name":null},{"line":151,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[192303,192154],"length":1,"stats":{"Line":2},"fn_name":null},{"line":153,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[256814,256784],"length":1,"stats":{"Line":2},"fn_name":"{closure#2}"},{"line":156,"address":[256904,256880],"length":1,"stats":{"Line":2},"fn_name":"{closure#3}"},{"line":158,"address":[192374],"length":1,"stats":{"Line":1},"fn_name":null},{"line":159,"address":[192388],"length":1,"stats":{"Line":0},"fn_name":null},{"line":161,"address":[192476],"length":1,"stats":{"Line":1},"fn_name":null},{"line":162,"address":[192575],"length":1,"stats":{"Line":1},"fn_name":null},{"line":163,"address":[192673],"length":1,"stats":{"Line":1},"fn_name":null},{"line":176,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[417807,418528,418096,419103,418671,418239,418960,417664],"length":1,"stats":{"Line":6},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":188,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":191,"address":[419968,419392],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":195,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":196,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":197,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":202,"address":[420463,420000,420127,420336],"length":1,"stats":{"Line":2},"fn_name":"deserialize_newtype_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":206,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":236,"address":[194976],"length":1,"stats":{"Line":2},"fn_name":"consume_beginning"},{"line":237,"address":[195024],"length":1,"stats":{"Line":2},"fn_name":null},{"line":238,"address":[195295,195034],"length":1,"stats":{"Line":4},"fn_name":null},{"line":239,"address":[195328],"length":1,"stats":{"Line":2},"fn_name":null},{"line":241,"address":[195301,195580,195418],"length":1,"stats":{"Line":4},"fn_name":null},{"line":242,"address":[195563],"length":1,"stats":{"Line":2},"fn_name":null},{"line":245,"address":[195728],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":250,"address":[195799,195990],"length":1,"stats":{"Line":3},"fn_name":null},{"line":251,"address":[195881],"length":1,"stats":{"Line":1},"fn_name":null},{"line":252,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":253,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":254,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":255,"address":[195869],"length":1,"stats":{"Line":1},"fn_name":null},{"line":259,"address":[196128],"length":1,"stats":{"Line":1},"fn_name":"check_eoe"},{"line":260,"address":[196158],"length":1,"stats":{"Line":1},"fn_name":null},{"line":261,"address":[196171,196429,196762],"length":1,"stats":{"Line":3},"fn_name":null},{"line":262,"address":[196562,196455],"length":1,"stats":{"Line":1},"fn_name":null},{"line":265,"address":[196767,196718,196528],"length":1,"stats":{"Line":2},"fn_name":null},{"line":267,"address":[196441],"length":1,"stats":{"Line":1},"fn_name":null},{"line":270,"address":[370828,352720,370864,362764,364816,358732,366832,360784,358768,368848,354700,350668,360748,352684,368812,372880,366796,356752,350704,356716,354736,362800,374860,348688,364780,372844],"length":1,"stats":{"Line":25},"fn_name":"next_value_seed_impl<core::marker::PhantomData<test::_::{impl#0}::deserialize::{impl#2}::visit_map::__DeserializeWith>>"},{"line":274,"address":[],"length":0,"stats":{"Line":25},"fn_name":null},{"line":281,"address":[],"length":0,"stats":{"Line":27},"fn_name":null},{"line":282,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":283,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":288,"address":[],"length":0,"stats":{"Line":23},"fn_name":null},{"line":289,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":290,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":291,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":293,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":294,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":295,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":44},"fn_name":null},{"line":309,"address":[382880,386499,385587,381968,385616,384675,382851,384704,383763,383792],"length":1,"stats":{"Line":9},"fn_name":"next_key_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":313,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":315,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":316,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":317,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":322,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":323,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":324,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":325,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":327,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":328,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":332,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":335,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":336,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":339,"address":[389776,386528,387128,387152,391643,392448,387857,393680,393015,394280,392423,395007,388464,389184,389167,391046,391072,393040,387872,394304,391664,388439,390398,390416,393652,389751],"length":1,"stats":{"Line":25},"fn_name":"next_value_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::{impl#2}::visit_map::__DeserializeWith>>"},{"line":343,"address":[],"length":0,"stats":{"Line":25},"fn_name":null},{"line":344,"address":[],"length":0,"stats":{"Line":44},"fn_name":null},{"line":345,"address":[],"length":0,"stats":{"Line":47},"fn_name":null},{"line":346,"address":[],"length":0,"stats":{"Line":24},"fn_name":null},{"line":357,"address":[196800],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":358,"address":[196845,196957],"length":1,"stats":{"Line":2},"fn_name":null},{"line":359,"address":[196902],"length":1,"stats":{"Line":2},"fn_name":null},{"line":362,"address":[197072],"length":1,"stats":{"Line":2},"fn_name":"check_eoe"},{"line":363,"address":[197102],"length":1,"stats":{"Line":2},"fn_name":null},{"line":364,"address":[197128],"length":1,"stats":{"Line":2},"fn_name":null},{"line":367,"address":[197113],"length":1,"stats":{"Line":2},"fn_name":null},{"line":368,"address":[197153,197478],"length":1,"stats":{"Line":3},"fn_name":null},{"line":369,"address":[197409,197485,197359],"length":1,"stats":{"Line":2},"fn_name":null},{"line":370,"address":[197474],"length":1,"stats":{"Line":1},"fn_name":null},{"line":372,"address":[197388],"length":1,"stats":{"Line":2},"fn_name":null},{"line":379,"address":[412903,414176,414132,411728,412944,415304],"length":1,"stats":{"Line":2},"fn_name":"next_element_seed<core::marker::PhantomData<serde::__private::de::content::Content>>"},{"line":383,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":384,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":385,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":387,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":388,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":389,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":399,"address":[416400,416448,416496,416304,416352],"length":1,"stats":{"Line":9},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":403,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":419,"address":[415680,415744,415376,415536,415712,415440,415408,415568,415776,415648,415600,415488,415344],"length":1,"stats":{"Line":1},"fn_name":"deserialize_any<serde::de::impls::StringVisitor>"},{"line":423,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":439,"address":[416784,416848,416944,417008,416880,417040,417072,416816,417136,417104,416912,416976],"length":1,"stats":{"Line":2},"fn_name":"deserialize_any<serde_sexpr::option::OptionVisitor<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>>"},{"line":443,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":446,"address":[417328],"length":1,"stats":{"Line":0},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":450,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":472,"address":[197632],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":481,"address":[400896,401638,401316,399648,407056,400675,402214,406870,406768,406582,401200,407158,400256,400357,406480,402112,400560,399952,401824,401536,400053,400997,399749,401926],"length":1,"stats":{"Line":6},"fn_name":"deserialize_f32<serde::__private::de::content::ContentVisitor>"},{"line":485,"address":[401173,400239,407072,399968,400372,400543,401519,399764,402097,407041,406753,407051,401183,400590,400272,402229,406496,406597,406784,400690,402128,402107,401331,402385,401941,400867,402395,407329,407339,401809,406763,406885,401012,399925,400877,400533,399935,399664,400912,401840,401653,401819,400068,401509,400229,401552,407173,401230],"length":1,"stats":{"Line":12},"fn_name":null},{"line":495,"address":[395600,396896,399468,398168,398192,396872],"length":1,"stats":{"Line":6},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":499,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":500,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":501,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":502,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":504,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":505,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":507,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":510,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":512,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":513,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":515,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":516,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":520,"address":[407344],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":524,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":531,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":534,"address":[407536,409882,409312,408698,408128,408106,408720,409290],"length":1,"stats":{"Line":6},"fn_name":"deserialize_string<serde::de::impls::StringVisitor>"},{"line":538,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":539,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":540,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":541,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":552,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":555,"address":[410481,409904,411184,410320,410768,411322,410042,410906],"length":1,"stats":{"Line":8},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":564,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":571,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":572,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":573,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":575,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":582,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":594,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":597,"address":[407376,407456],"length":1,"stats":{"Line":4},"fn_name":"deserialize_enum<test::_::{impl#0}::deserialize::__Visitor>"},{"line":606,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":609,"address":[404818,403186,405664,402400,404848,404032,405634,404002,403216,406450],"length":1,"stats":{"Line":4},"fn_name":"deserialize_seq<serde::__private::de::content::ContentVisitor>"},{"line":613,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":614,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":615,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":617,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":619,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":627,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":642,"address":[381932,381354,381392,380832,380256,380788],"length":1,"stats":{"Line":2},"fn_name":"next_element_seed<core::marker::PhantomData<alloc::string::String>>"},{"line":646,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":647,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":648,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":650,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":658,"address":[395312,395024],"length":1,"stats":{"Line":4},"fn_name":"variant_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":662,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":672,"address":[197680],"length":1,"stats":{"Line":2},"fn_name":"unit_variant"},{"line":673,"address":[197684],"length":1,"stats":{"Line":2},"fn_name":null},{"line":680,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":687,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":694,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":179,"coverable":229},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","lib.rs"],"content":"#![warn(rust_2018_idioms, unreachable_pub)]\n#![forbid(unsafe_code)]\n\nmod literal;\nmod option;\n\npub mod de;\npub mod ser;\n\npub use de::from_str;\npub use literal::Literal;\npub use option::{deserialize_option, OptionDef as Option};\npub use ser::{to_string, to_string_pretty};\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","literal.rs"],"content":"use serde::{Deserialize, Serialize};\nuse std::fmt::{self, Debug, Display, Formatter};\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(untagged)]\nenum LiteralImp {\n\tNumber(u16),\n\tText(String)\n}\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(transparent)]\npub struct Literal(LiteralImp);\n\nimpl Debug for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Debug::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Debug::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl Display for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Display::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Display::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl From<u16> for Literal {\n\tfn from(num: u16) -> Self {\n\t\tSelf(LiteralImp::Number(num))\n\t}\n}\n\nimpl From<&str> for Literal {\n\tfn from(text: &str) -> Self {\n\t\ttext.to_owned().into()\n\t}\n}\n\nimpl From<String> for Literal {\n\tfn from(text: String) -> Self {\n\t\tSelf(LiteralImp::Text(text))\n\t}\n}\n","traces":[{"line":16,"address":[253456],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":17,"address":[253474],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[253505],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[253536],"length":1,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[253584],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":26,"address":[253602],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[253633],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[253665],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[253712],"length":1,"stats":{"Line":2},"fn_name":"from"},{"line":35,"address":[253727],"length":1,"stats":{"Line":2},"fn_name":null},{"line":40,"address":[253792],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":41,"address":[253815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[253856],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":47,"address":[253863],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":14},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","option.rs"],"content":"use serde::{\n\tde::{self, Deserialize, Deserializer, EnumAccess, MapAccess, SeqAccess, Visitor},\n\tser::{Serialize, Serializer}\n};\nuse std::{\n\tfmt::{self, Formatter},\n\tmarker::PhantomData\n};\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(with = \"serde_sexpr::Option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// For a more detailed description, see [`deserialize_option`].\npub struct OptionDef<T>(PhantomData<T>);\n\nimpl<'de, T> OptionDef<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tpub fn deserialize<D>(deserializer: D) -> Result<Option<T>, D::Error>\n\twhere\n\t\tD: Deserializer<'de>\n\t{\n\t\tdeserialize_option(deserializer)\n\t}\n}\n\nimpl<T> OptionDef<T>\nwhere\n\tOption<T>: Serialize\n{\n\tpub fn serialize<S>(this: &Option<T>, serializer: S) -> Result<S::Ok, S::Error>\n\twhere\n\t\tS: Serializer\n\t{\n\t\tthis.serialize(serializer)\n\t}\n}\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(deserialize_with = \"serde_sexpr::deserialize_option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// The s-expression format is not only not self-describing, but also does not provide any way\n/// to see if a value is \"missing\" (i.e. [`None`]) without knowing its type. Unfortunately, serde\n/// expects us to decide if the value is present before we know its type: In the above example,\n/// we have the input string `\"bold)\"` and need to know if `thickness` is present or not, without\n/// knowing that `thickness` is an s-expr and not, say, an enum that has a variant called `bold`.\n///\n/// This custom deserialize logic therefore avoids calling [`Deserializer::deserialize_option`]\n/// alltogether. Instead, we'll try to deserialize the value as if it was present, and return\n/// [`None`] if the deserializer returns an error before calling the visitor. This is likely\n/// indicative of a type error, that would indicate a missing value.\n///\n/// ### Drawbacks\n///\n/// Using this deserialize logic might hide errors in the input. If this optional value\n/// is the last value that gets deserialized, and the deserialization failed due to some\n/// error other than a type error, it might get hidden.\n///\n/// Also, if trying to deserialize the value alters the state of the deserializer, it could\n/// lead to incorrect deserialization.\npub fn deserialize_option<'de, D, T>(deserializer: D) -> Result<Option<T>, D::Error>\nwhere\n\tD: Deserializer<'de>,\n\tT: Deserialize<'de>\n{\n\t// this flag will be set if any visitor method was called\n\tlet mut flag = false;\n\n\t// try to deserialize a present value\n\tlet result = T::deserialize(OptionDeserializer {\n\t\tde: deserializer,\n\t\tflag: &mut flag\n\t});\n\n\t// if the flag is not set and we don't have a value, assume a non-present value\n\tmatch result {\n\t\tOk(value) => Ok(Some(value)),\n\t\tErr(_) if !flag => Ok(None),\n\t\tErr(err) => Err(err)\n\t}\n}\n\n/// A deserializer that intercepts the visitor with our custom visitor.\nstruct OptionDeserializer<'a, D> {\n\tde: D,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_deserializer {\n\t($(fn $ident:ident <$visitor:ident>(\n\t\tself,\n\t\t$visitor_arg:ident : $visitor_arg_ty:ty\n\t\t$(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$visitor>(\n\t\t\t\tself,\n\t\t\t\t$($arg: $arg_ty,)*\n\t\t\t\t$visitor_arg: $visitor_arg_ty\n\t\t\t) -> Result<$visitor::Value, Self::Error>\n\t\t\twhere\n\t\t\t\t$visitor: Visitor<'de>\n\t\t\t{\n\t\t\t\tlet $visitor_arg = OptionVisitor {\n\t\t\t\t\tvisitor: $visitor_arg,\n\t\t\t\t\tflag: self.flag\n\t\t\t\t};\n\t\t\t\tself.de.$ident($($arg,)* $visitor_arg)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, D> Deserializer<'de> for OptionDeserializer<'a, D>\nwhere\n\tD: Deserializer<'de>\n{\n\ttype Error = D::Error;\n\n\tforward_deserializer! {\n\t\tfn deserialize_any<V>(self, visitor: V);\n\t\tfn deserialize_bool<V>(self, visitor: V);\n\t\tfn deserialize_i8<V>(self, visitor: V);\n\t\tfn deserialize_i16<V>(self, visitor: V);\n\t\tfn deserialize_i32<V>(self, visitor: V);\n\t\tfn deserialize_i64<V>(self, visitor: V);\n\t\tfn deserialize_i128<V>(self, visitor: V);\n\t\tfn deserialize_u8<V>(self, visitor: V);\n\t\tfn deserialize_u16<V>(self, visitor: V);\n\t\tfn deserialize_u32<V>(self, visitor: V);\n\t\tfn deserialize_u64<V>(self, visitor: V);\n\t\tfn deserialize_u128<V>(self, visitor: V);\n\t\tfn deserialize_f32<V>(self, visitor: V);\n\t\tfn deserialize_f64<V>(self, visitor: V);\n\t\tfn deserialize_char<V>(self, visitor: V);\n\t\tfn deserialize_str<V>(self, visitor: V);\n\t\tfn deserialize_string<V>(self, visitor: V);\n\t\tfn deserialize_bytes<V>(self, visitor: V);\n\t\tfn deserialize_byte_buf<V>(self, visitor: V);\n\t\tfn deserialize_option<V>(self, visitor: V);\n\t\tfn deserialize_unit<V>(self, visitor: V);\n\t\tfn deserialize_unit_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_newtype_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_seq<V>(self, visitor: V);\n\t\tfn deserialize_tuple<V>(self, visitor: V, len: usize);\n\t\tfn deserialize_tuple_struct<V>(self, visitor: V, name: &'static str, len: usize);\n\t\tfn deserialize_map<V>(self, visitor: V);\n\t\tfn deserialize_struct<V>(self, visitor: V, name: &'static str, fields: &'static [&'static str]);\n\t\tfn deserialize_enum<V>(self, visitor: V, name: &'static str, variants: &'static [&'static str]);\n\t\tfn deserialize_identifier<V>(self, visitor: V);\n\t\tfn deserialize_ignored_any<V>(self, visitor: V);\n\t}\n\n\tfn is_human_readable(&self) -> bool {\n\t\tself.de.is_human_readable()\n\t}\n}\n\n/// A visitor that will set a flag if any visit method was called (except for visit_none).\n/// This indicates that the value was indeed present, i.e. any error return was not a\n/// general type error but instead a problem deserializing the correct type.\nstruct OptionVisitor<'a, V> {\n\tvisitor: V,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_visitor {\n\t($(fn $ident:ident <$error:ident>(self $(, $arg:ident : $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident<$error>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $error>\n\t\t\twhere\n\t\t\t\t$error: de::Error\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident <$access:ident : $access_bound:path>(\n\t\tself $(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$access>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $access::Error>\n\t\t\twhere\n\t\t\t\t$access: $access_bound\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, V> Visitor<'de> for OptionVisitor<'a, V>\nwhere\n\tV: Visitor<'de>\n{\n\ttype Value = V::Value;\n\n\tfn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tf.write_str(\"optional \")?;\n\t\tself.visitor.expecting(f)\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_bool<E>(self, v: bool);\n\t\tfn visit_i8<E>(self, v: i8);\n\t\tfn visit_i16<E>(self, v: i16);\n\t\tfn visit_i32<E>(self, v: i32);\n\t\tfn visit_i64<E>(self, v: i64);\n\t\tfn visit_i128<E>(self, v: i128);\n\t\tfn visit_u8<E>(self, v: u8);\n\t\tfn visit_u16<E>(self, v: u16);\n\t\tfn visit_u32<E>(self, v: u32);\n\t\tfn visit_u64<E>(self, v: u64);\n\t\tfn visit_u128<E>(self, v: u128);\n\t\tfn visit_f32<E>(self, v: f32);\n\t\tfn visit_f64<E>(self, v: f64);\n\t\tfn visit_char<E>(self, v: char);\n\t\tfn visit_str<E>(self, v: &str);\n\t\tfn visit_borrowed_str<E>(self, v: &'de str);\n\t\tfn visit_string<E>(self, v: String);\n\t\tfn visit_bytes<E>(self, v: &[u8]);\n\t\tfn visit_borrowed_bytes<E>(self, v: &'de [u8]);\n\t\tfn visit_byte_buf<E>(self, v: Vec<u8>);\n\t\tfn visit_unit<E>(self);\n\t}\n\n\tfn visit_none<E>(self) -> Result<Self::Value, E>\n\twhere\n\t\tE: de::Error\n\t{\n\t\t// special case - if we don't set the flag and return an error, we'll\n\t\t// get None\n\t\tErr(E::custom(\"\"))\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_some<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_newtype_struct<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_seq<A: SeqAccess<'de>>(self, seq: A);\n\t\tfn visit_map<A: MapAccess<'de>>(self, map: A);\n\t\tfn visit_enum<A: EnumAccess<'de>>(self, data: A);\n\t}\n}\n","traces":[{"line":53,"address":[492432,492368,492400,492304,492336,492528,492624,492496,492560],"length":1,"stats":{"Line":6},"fn_name":"deserialize<f32, serde_sexpr::de::MissingField>"},{"line":57,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":65,"address":[492752,492688,492816],"length":1,"stats":{"Line":3},"fn_name":"serialize<test::Drill, serde_sexpr::ser::Field>"},{"line":69,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":128,"address":[494752,494240,496560,492880,493280,495152,495568,493760,495984],"length":1,"stats":{"Line":6},"fn_name":"deserialize_option<serde_sexpr::de::MissingField, i16>"},{"line":134,"address":[493296,494257,495168,493776,492896,495584,494768,496577,496001],"length":1,"stats":{"Line":6},"fn_name":null},{"line":137,"address":[495597,495181,496616,493789,496040,492909,494781,493309,494296],"length":1,"stats":{"Line":6},"fn_name":null},{"line":138,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":139,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":144,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":145,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":146,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":163,"address":[497936,498464,497856,498336,498160,498032,497984,498208,498080],"length":1,"stats":{"Line":6},"fn_name":"deserialize_f32<serde_sexpr::de::Field, serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>"},{"line":171,"address":[498297,498177,498049,497953,497872,498001,498096,498425,498500],"length":1,"stats":{"Line":6},"fn_name":null},{"line":173,"address":[498092,498496,497868],"length":1,"stats":{"Line":4},"fn_name":null},{"line":175,"address":[497958,498505,498006,498101,498430,497877,498054,498182,498302],"length":1,"stats":{"Line":6},"fn_name":null},{"line":221,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":222,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[497136,497200,497680,497728,497072],"length":1,"stats":{"Line":2},"fn_name":"visit_bool<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::error::Error>"},{"line":241,"address":[497099,497752,497227,497702,497163],"length":1,"stats":{"Line":2},"fn_name":null},{"line":242,"address":[497230,497102,497705,497755,497166],"length":1,"stats":{"Line":2},"fn_name":null},{"line":251,"address":[497776],"length":1,"stats":{"Line":2},"fn_name":"visit_map<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::SExpr>"},{"line":255,"address":[497808],"length":1,"stats":{"Line":2},"fn_name":null},{"line":256,"address":[497811],"length":1,"stats":{"Line":2},"fn_name":null},{"line":268,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":269,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[497264,497499,497536,497643,497392,497370],"length":1,"stats":{"Line":2},"fn_name":"visit_none<serde::de::impls::{impl#43}::deserialize::PrimitiveVisitor, serde_sexpr::de::error::Error>"},{"line":303,"address":[],"length":0,"stats":{"Line":2},"fn_name":null}],"covered":23,"coverable":30},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","error.rs"],"content":"use serde::ser;\nuse std::fmt::Display;\nuse thiserror::Error;\n\n#[derive(Clone, Debug, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to serialize anything but a struct at root\n\t/// level.\n\t#[error(\"Expected to serialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if a boolean was detected in an unnamed container, i.e.\n\t/// a tuple or a sequence.\n\t#[error(\"Unnamed boolean\")]\n\tUnnamedBoolean,\n\n\t/// This error will be returned if a sequence was detected in an unnamed container, i.e. a\n\t/// tuple or a sequence.\n\t#[error(\"Unnamed sequence\")]\n\tUnnamedSeq,\n\n\t#[error(\"char is unsupported\")]\n\tChar,\n\t#[error(\"byte array is unsupported\")]\n\tBytes,\n\t#[error(\"unit is unsupported\")]\n\tUnit,\n\t#[error(\"enums with non-unit variants are not supported\")]\n\tComplexEnum,\n\t#[error(\"maps are not supported\")]\n\tMap\n}\n\nimpl ser::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","mod.rs"],"content":"use itoa::Integer;\nuse paste::paste;\nuse serde::ser::{\n\tself, Serialize, SerializeSeq, SerializeStruct, SerializeTuple, SerializeTupleStruct\n};\n\nmod error;\npub use error::Error;\n\npub struct Serializer {\n\t/// Buffer that the output gets written to.\n\tbuf: String,\n\n\t/// Set to true for pretty output.\n\tpretty: bool,\n\n\t/// The current level of nesting\n\tlvl: usize,\n\n\t/// The indentation (in levels) of the current line\n\tindent: usize,\n\n\t/// An itoa::Buffer to re-use when printing integers\n\titoa_buffer: itoa::Buffer\n}\n\nimpl Serializer {\n\tfn new(pretty: bool) -> Self {\n\t\tSelf {\n\t\t\tbuf: String::new(),\n\t\t\tpretty,\n\t\t\tlvl: 0,\n\t\t\tindent: 0,\n\t\t\titoa_buffer: itoa::Buffer::new()\n\t\t}\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn to_string<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(false);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\npub fn to_string_pretty<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(true);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\nimpl Serializer {\n\tfn newline(&mut self) {\n\t\tself.buf += \"\\n\";\n\t\tfor _ in 0..self.lvl {\n\t\t\tself.buf += \"  \";\n\t\t}\n\t\tself.indent = self.lvl;\n\t}\n\n\tfn begin_sexpr(&mut self, name: &str) {\n\t\tif self.lvl > 0 {\n\t\t\tif self.pretty {\n\t\t\t\tself.newline();\n\t\t\t} else {\n\t\t\t\tself.buf += \" \";\n\t\t\t}\n\t\t}\n\t\tself.lvl += 1;\n\t\tself.buf += \"(\";\n\t\tself.buf += name;\n\t}\n\n\tfn end_sexpr(&mut self) {\n\t\tself.lvl -= 1;\n\t\tself.buf += \")\";\n\t}\n\n\tfn write_integer<I: Integer>(&mut self, v: I) {\n\t\tself.buf += \" \";\n\t\tself.buf += self.itoa_buffer.format(v);\n\t}\n\n\tfn write_float<F: ToString>(&mut self, v: F) {\n\t\tself.buf += \" \";\n\t\tself.buf += &v.to_string();\n\t}\n\n\tfn write_str(&mut self, v: &str, aggressive_quotes: bool) {\n\t\tself.buf += \" \";\n\n\t\tconst CHARS: &[char] = &[' ', '\\t', '\\n', '\\r', '(', ')', '\"'];\n\t\tlet need_quotes = v.is_empty()\n\t\t\t|| match aggressive_quotes {\n\t\t\t\ttrue => v.chars().any(|ch| !ch.is_ascii_alphabetic() && ch != '_'),\n\t\t\t\tfalse => v.contains(CHARS) || v.chars().next().unwrap().is_ascii_digit()\n\t\t\t};\n\n\t\tif need_quotes {\n\t\t\tself.buf += r#\"\"\"#;\n\t\t\tself.buf += &v.replace('\\\\', r\"\\\\\").replace('\"', r#\"\\\"\"#);\n\t\t\tself.buf += r#\"\"\"#;\n\t\t} else {\n\t\t\tself.buf += v;\n\t\t}\n\t}\n}\n\nmacro_rules! serialize_type_error {\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n}\n\ntype Impossible<T = (), E = Error> = serde::ser::Impossible<T, E>;\n\nimpl<'a> ser::Serializer for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Impossible;\n\ttype SerializeTuple = Impossible;\n\ttype SerializeTupleStruct = Self;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = Self;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_bool(self, bool);\n\t\tfn serialize_i8(self, i8);\n\t\tfn serialize_i16(self, i16);\n\t\tfn serialize_i32(self, i32);\n\t\tfn serialize_i64(self, i64);\n\t\tfn serialize_i128(self, i128);\n\t\tfn serialize_u8(self, u8);\n\t\tfn serialize_u16(self, u16);\n\t\tfn serialize_u32(self, u32);\n\t\tfn serialize_u64(self, u64);\n\t\tfn serialize_u128(self, u128);\n\t\tfn serialize_f32(self, f32);\n\t\tfn serialize_f64(self, f64);\n\t\tfn serialize_char(self, char);\n\t\tfn serialize_str(self, &str);\n\t\tfn serialize_bytes(self, &[u8]);\n\t\tfn serialize_none(self);\n\t\tfn serialize_some<T>(self, &T);\n\t\tfn serialize_unit(self);\n\t\tfn serialize_unit_variant(self, &'static str, u32, &'static str);\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T);\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_seq(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_tuple(self, usize) -> Result<Impossible>;\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.begin_sexpr(name);\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.begin_sexpr(name);\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self,\n\t\t\tname: None\n\t\t})?;\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_tuple_struct(self, name: &'static str, _len: usize) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n\n\tfn serialize_struct(self, name: &'static str, _len: usize) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n}\n\nimpl<'a> SerializeTupleStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\t// TODO this should probably not be self\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: Some(key)\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\n/// This serializer will serialize all fields. It needs the field name for booleans and\n/// sequences.\nstruct Field<'a> {\n\tser: &'a mut Serializer,\n\tname: Option<&'static str>\n}\n\nmacro_rules! serialize_integer {\n\t($($integer:ty)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<serialize_ $integer>](self, v: $integer) -> Result<()> {\n\t\t\t\t\tself.ser.write_integer(v);\n\t\t\t\t\tOk(())\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a> ser::Serializer for Field<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Sequence<'a>;\n\ttype SerializeTuple = Sequence<'a>;\n\ttype SerializeTupleStruct = &'a mut Serializer;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = &'a mut Serializer;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_char(self, char) = Error::Char;\n\t\tfn serialize_bytes(self, &[u8]) = Error::Bytes;\n\t\tfn serialize_unit(self) = Error::Unit;\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T) = Error::ComplexEnum;\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible> = Error::Map;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t}\n\n\tfn serialize_bool(self, v: bool) -> Result<()> {\n\t\tlet name = self.name.ok_or(Error::UnnamedBoolean)?;\n\t\tif v {\n\t\t\tself.serialize_str(name)?;\n\t\t}\n\t\tOk(())\n\t}\n\n\tserialize_integer! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128\n\t}\n\n\tfn serialize_f32(self, v: f32) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_f64(self, v: f64) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_str(self, v: &str) -> Result<()> {\n\t\tself.ser.write_str(v, true);\n\t\tOk(())\n\t}\n\n\tfn serialize_none(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn serialize_some<T>(self, v: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tv.serialize(self)\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.ser.serialize_unit_struct(name)\n\t}\n\n\tfn serialize_unit_variant(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variant_index: u32,\n\t\tvariant: &'static str\n\t) -> Result<()> {\n\t\tself.ser.write_str(variant, false);\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.ser.serialize_newtype_struct(name, value)\n\t}\n\n\tfn serialize_seq(self, _len: Option<usize>) -> Result<Sequence<'a>> {\n\t\tlet name = self.name.ok_or(Error::UnnamedSeq)?;\n\t\tlet close_sexpr = match name {\n\t\t\t\"\" => false,\n\t\t\tname => {\n\t\t\t\tself.ser.begin_sexpr(name);\n\t\t\t\ttrue\n\t\t\t}\n\t\t};\n\t\tOk(Sequence::new(self.ser, close_sexpr))\n\t}\n\n\tfn serialize_tuple(self, len: usize) -> Result<Sequence<'a>> {\n\t\tself.serialize_seq(Some(len))\n\t}\n\n\tfn serialize_tuple_struct(self, name: &'static str, len: usize) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_tuple_struct(name, len)\n\t}\n\n\tfn serialize_struct(self, name: &'static str, len: usize) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_struct(name, len)\n\t}\n}\n\n/// A sequence / tuple serializer that optionally closes an s-expr afterwards\nstruct Sequence<'a> {\n\tser: &'a mut Serializer,\n\tclose_sexpr: bool\n}\n\nimpl<'a> Sequence<'a> {\n\tfn new(ser: &'a mut Serializer, close_sexpr: bool) -> Self {\n\t\tSelf { ser, close_sexpr }\n\t}\n}\n\nimpl<'a> SerializeSeq for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self.ser,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tif self.close_sexpr {\n\t\t\tself.ser.end_sexpr();\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeTuple for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tSerializeSeq::serialize_element(self, value)\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tSerializeSeq::end(self)\n\t}\n}\n","traces":[{"line":28,"address":[165552,165715],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":30,"address":[165579],"length":1,"stats":{"Line":1},"fn_name":null},{"line":34,"address":[165594],"length":1,"stats":{"Line":1},"fn_name":null},{"line":41,"address":[291372,292572,290972,292172,293008,292608,291008,291408,291772,291808,292208,292972,290608,293372],"length":1,"stats":{"Line":8},"fn_name":"to_string<test::Locked>"},{"line":45,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":46,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":50,"address":[288608,288975,288175,289008,290575,288208,289375,290175,289775,290208,287808,289408,288575,289808],"length":1,"stats":{"Line":8},"fn_name":"to_string_pretty<test::Description>"},{"line":54,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":55,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":60,"address":[165728],"length":1,"stats":{"Line":1},"fn_name":"newline"},{"line":61,"address":[165742],"length":1,"stats":{"Line":1},"fn_name":null},{"line":62,"address":[165886,165764],"length":1,"stats":{"Line":2},"fn_name":null},{"line":63,"address":[165901],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[165868],"length":1,"stats":{"Line":1},"fn_name":null},{"line":68,"address":[165920],"length":1,"stats":{"Line":1},"fn_name":"begin_sexpr"},{"line":69,"address":[165954],"length":1,"stats":{"Line":1},"fn_name":null},{"line":70,"address":[165992],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[166027],"length":1,"stats":{"Line":1},"fn_name":null},{"line":73,"address":[166003],"length":1,"stats":{"Line":1},"fn_name":null},{"line":76,"address":[166066,165966,166043],"length":1,"stats":{"Line":2},"fn_name":null},{"line":77,"address":[166047],"length":1,"stats":{"Line":1},"fn_name":null},{"line":78,"address":[166111],"length":1,"stats":{"Line":1},"fn_name":null},{"line":81,"address":[166128],"length":1,"stats":{"Line":1},"fn_name":"end_sexpr"},{"line":82,"address":[166193,166141],"length":1,"stats":{"Line":1},"fn_name":null},{"line":83,"address":[166174],"length":1,"stats":{"Line":1},"fn_name":null},{"line":86,"address":[216400,215936,215360,216160,216048,215472,215584,215712,215824,216288],"length":1,"stats":{"Line":2},"fn_name":"write_integer<u16>"},{"line":87,"address":[215618,216313,216422,215846,215963,216072,216194,215387,215736,215497],"length":1,"stats":{"Line":2},"fn_name":null},{"line":88,"address":[215650,215763,215990,216099,216448,215872,215414,216339,215523,216226],"length":1,"stats":{"Line":2},"fn_name":null},{"line":91,"address":[216704,216512,216685,216877],"length":1,"stats":{"Line":1},"fn_name":"write_float<f64>"},{"line":92,"address":[216724,216532],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[216601,216763,216571,216793],"length":1,"stats":{"Line":2},"fn_name":null},{"line":96,"address":[166900,166240],"length":1,"stats":{"Line":1},"fn_name":"write_str"},{"line":97,"address":[166301],"length":1,"stats":{"Line":1},"fn_name":null},{"line":100,"address":[166328,166454,166357],"length":1,"stats":{"Line":2},"fn_name":null},{"line":101,"address":[166351],"length":1,"stats":{"Line":1},"fn_name":null},{"line":102,"address":[166423],"length":1,"stats":{"Line":3},"fn_name":null},{"line":103,"address":[166470,166388],"length":1,"stats":{"Line":2},"fn_name":null},{"line":106,"address":[166362],"length":1,"stats":{"Line":1},"fn_name":null},{"line":107,"address":[166603],"length":1,"stats":{"Line":1},"fn_name":null},{"line":108,"address":[166640],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[166920],"length":1,"stats":{"Line":1},"fn_name":null},{"line":111,"address":[166588],"length":1,"stats":{"Line":1},"fn_name":null},{"line":119,"address":[169344,169568,169712,170240,169504,169424,169936,169872,169632,170160,170304,170464,169792,169264,170080,170592,170384,170528,170000],"length":1,"stats":{"Line":0},"fn_name":"serialize_bool"},{"line":122,"address":[170022,169953,170098,169654,170406,169362,170658,170540,169888,170476,170178,169285,169730,169520,169444,170326,169585,170256,169812],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[170992,171072,170800,170864,170720],"length":1,"stats":{"Line":0},"fn_name":"serialize_seq"},{"line":132,"address":[170742,171014,171143,170817,170935],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[171264,171328,171200],"length":1,"stats":{"Line":0},"fn_name":"serialize_char"},{"line":142,"address":[171219,171343,171289],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[171568,171392,171504],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple_variant"},{"line":152,"address":[171630,171529,171454],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[166960],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_struct"},{"line":205,"address":[167028],"length":1,"stats":{"Line":1},"fn_name":null},{"line":206,"address":[167038],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[167053],"length":1,"stats":{"Line":1},"fn_name":null},{"line":210,"address":[295952],"length":1,"stats":{"Line":1},"fn_name":"serialize_newtype_struct<alloc::string::String>"},{"line":214,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":215,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":219,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":223,"address":[167072],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple_struct"},{"line":224,"address":[167143],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[167163],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[167184],"length":1,"stats":{"Line":1},"fn_name":"serialize_struct"},{"line":229,"address":[167255],"length":1,"stats":{"Line":1},"fn_name":null},{"line":230,"address":[167275],"length":1,"stats":{"Line":1},"fn_name":null},{"line":242,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":243,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":244,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":248,"address":[167296],"length":1,"stats":{"Line":0},"fn_name":"end"},{"line":249,"address":[167328],"length":1,"stats":{"Line":0},"fn_name":null},{"line":250,"address":[167343],"length":1,"stats":{"Line":0},"fn_name":null},{"line":258,"address":[297584,296352,297696,297248,296464,296912,297472,296576,297360,296688,296800,297024,297136],"length":1,"stats":{"Line":13},"fn_name":"serialize_field<alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>>"},{"line":263,"address":[],"length":0,"stats":{"Line":13},"fn_name":null},{"line":264,"address":[],"length":0,"stats":{"Line":13},"fn_name":null},{"line":265,"address":[],"length":0,"stats":{"Line":13},"fn_name":null},{"line":269,"address":[167360],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":270,"address":[167392],"length":1,"stats":{"Line":1},"fn_name":null},{"line":271,"address":[167407],"length":1,"stats":{"Line":1},"fn_name":null},{"line":286,"address":[172016,172272,171680,171808,172144,171872,171744,171936,172080,172208],"length":1,"stats":{"Line":2},"fn_name":"serialize_i8"},{"line":287,"address":[171765,171699,172101,172035,172240,171986,172173,171837,172322,171904],"length":1,"stats":{"Line":2},"fn_name":null},{"line":288,"address":[171855,172004,172121,172340,171785,171922,172258,171719,172055,172191],"length":1,"stats":{"Line":2},"fn_name":null},{"line":308,"address":[171211],"length":1,"stats":{"Line":0},"fn_name":null},{"line":309,"address":[171281],"length":1,"stats":{"Line":0},"fn_name":null},{"line":310,"address":[171335],"length":1,"stats":{"Line":0},"fn_name":null},{"line":315,"address":[171445],"length":1,"stats":{"Line":0},"fn_name":null},{"line":316,"address":[171521],"length":1,"stats":{"Line":0},"fn_name":null},{"line":317,"address":[171621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[167424],"length":1,"stats":{"Line":1},"fn_name":"serialize_bool"},{"line":321,"address":[167607,167465],"length":1,"stats":{"Line":1},"fn_name":null},{"line":322,"address":[167589,167882],"length":1,"stats":{"Line":2},"fn_name":null},{"line":323,"address":[167892,167779],"length":1,"stats":{"Line":1},"fn_name":null},{"line":325,"address":[167756],"length":1,"stats":{"Line":1},"fn_name":null},{"line":332,"address":[168048],"length":1,"stats":{"Line":1},"fn_name":"serialize_f32"},{"line":333,"address":[168067],"length":1,"stats":{"Line":1},"fn_name":null},{"line":334,"address":[168084],"length":1,"stats":{"Line":1},"fn_name":null},{"line":337,"address":[168096],"length":1,"stats":{"Line":0},"fn_name":"serialize_f64"},{"line":338,"address":[168115],"length":1,"stats":{"Line":0},"fn_name":null},{"line":339,"address":[168132],"length":1,"stats":{"Line":0},"fn_name":null},{"line":342,"address":[168144],"length":1,"stats":{"Line":1},"fn_name":"serialize_str"},{"line":343,"address":[168194],"length":1,"stats":{"Line":1},"fn_name":null},{"line":344,"address":[168217],"length":1,"stats":{"Line":1},"fn_name":null},{"line":347,"address":[168240],"length":1,"stats":{"Line":1},"fn_name":"serialize_none"},{"line":348,"address":[168243],"length":1,"stats":{"Line":1},"fn_name":null},{"line":351,"address":[295680,295520,295600],"length":1,"stats":{"Line":3},"fn_name":"serialize_some<f32>"},{"line":355,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":358,"address":[168256],"length":1,"stats":{"Line":0},"fn_name":"serialize_unit_struct"},{"line":359,"address":[168277],"length":1,"stats":{"Line":0},"fn_name":null},{"line":362,"address":[168304],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_variant"},{"line":368,"address":[168372],"length":1,"stats":{"Line":1},"fn_name":null},{"line":369,"address":[168392],"length":1,"stats":{"Line":1},"fn_name":null},{"line":376,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":379,"address":[168416],"length":1,"stats":{"Line":1},"fn_name":"serialize_seq"},{"line":380,"address":[168457,168608],"length":1,"stats":{"Line":1},"fn_name":null},{"line":381,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":382,"address":[168803,168756,168578],"length":1,"stats":{"Line":3},"fn_name":null},{"line":383,"address":[168777],"length":1,"stats":{"Line":1},"fn_name":null},{"line":384,"address":[168793],"length":1,"stats":{"Line":1},"fn_name":null},{"line":385,"address":[168846],"length":1,"stats":{"Line":1},"fn_name":null},{"line":388,"address":[168816,168869],"length":1,"stats":{"Line":2},"fn_name":null},{"line":391,"address":[168896],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple"},{"line":392,"address":[168912],"length":1,"stats":{"Line":0},"fn_name":null},{"line":395,"address":[168992],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple_struct"},{"line":396,"address":[169019],"length":1,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[169040],"length":1,"stats":{"Line":1},"fn_name":"serialize_struct"},{"line":400,"address":[169067],"length":1,"stats":{"Line":1},"fn_name":null},{"line":411,"address":[169088],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":420,"address":[295856,295760],"length":1,"stats":{"Line":2},"fn_name":"serialize_element<&test::Pad>"},{"line":424,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":425,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":426,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":430,"address":[169136],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":431,"address":[169170],"length":1,"stats":{"Line":1},"fn_name":null},{"line":432,"address":[169200],"length":1,"stats":{"Line":1},"fn_name":null},{"line":434,"address":[169184],"length":1,"stats":{"Line":1},"fn_name":null},{"line":446,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":449,"address":[169216],"length":1,"stats":{"Line":0},"fn_name":"end"},{"line":450,"address":[169243],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":103,"coverable":141},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","tests","test.rs"],"content":"use indoc::indoc;\nuse paste::paste;\nuse pretty_assertions::assert_eq;\nuse serde::{de::DeserializeOwned, Deserialize, Serialize};\nuse serde_sexpr::Literal;\nuse std::fmt::Debug;\n\nfn assert_eq_parsed<T>(input: &str, expected: &T)\nwhere\n\tT: Debug + DeserializeOwned + PartialEq\n{\n\tlet parsed: T = serde_sexpr::from_str(input).expect(\"Failed to parse input\");\n\tassert_eq!(&parsed, expected);\n}\n\nfn assert_eq_ugly<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written = serde_sexpr::to_string(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected);\n}\n\nfn assert_eq_pretty<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written = serde_sexpr::to_string_pretty(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected.trim_end_matches('\\n'));\n}\n\nmacro_rules! test_case {\n\t(name: $name:ident,input: $input:expr,value: $value:expr) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n\n\t(name: $name:ident,input: $input:expr,pretty: $pretty:expr,value: $value:expr) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\t\t\tconst [<TEST_CASE_PRETTY_ $name:upper>]: &str = $pretty;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_PRETTY_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_PRETTY_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"locked\")]\nstruct Locked;\n\ntest_case! {\n\tname: locked,\n\tinput: \"(locked)\",\n\tvalue: Locked\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"attr\")]\nstruct Attribute(String);\n\ntest_case! {\n\tname: attr,\n\tinput: \"(attr smd)\",\n\tvalue: Attribute(\"smd\".to_owned())\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"descr\")]\nstruct Description(String);\n\ntest_case! {\n\tname: descr,\n\tinput: r#\"(descr \"Hello \\\"World\\\", this \\\"\\\\\\\" is an amazing backspace! \\\\\")\"#,\n\tvalue: Description(r#\"Hello \"World\", this \"\\\" is an amazing backspace! \\\"#.to_owned())\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"at\")]\nstruct Position {\n\tx: f32,\n\ty: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\trot: Option<i16>\n}\n\ntest_case! {\n\tname: position_without_rot,\n\tinput: \"(at 1.23 -4.56)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: None\n\t}\n}\n\ntest_case! {\n\tname: position_with_rot,\n\tinput: \"(at 1.23 -4.56 -90)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: Some(-90)\n\t}\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"size\")]\nstruct Size {\n\twidth: f32,\n\theight: f32\n}\n\ntest_case! {\n\tname: size,\n\tinput: \"(size 1.23 4.56)\",\n\tvalue: Size {\n\t\twidth: 1.23,\n\t\theight: 4.56\n\t}\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\nenum PadType {\n\t#[serde(rename = \"thru-hole\")]\n\tThroughHole,\n\n\t#[serde(rename = \"smd\")]\n\tSmd\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(rename_all = \"lowercase\")]\nenum PadShape {\n\tCircle,\n\tRect\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"drill\")]\nstruct Drill {\n\toval: bool,\n\tdrill1: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill2: Option<f32>\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"pad\")]\nstruct Pad {\n\tindex: Literal,\n\tty: PadType,\n\tshape: PadShape,\n\tat: Position,\n\tsize: Size,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill: Option<Drill>,\n\tlayers: Vec<String>\n}\n\ntest_case! {\n\tname: pad_without_drill,\n\tinput: r#\"(pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 smd rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::Smd,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size {\n\t\t\twidth: 1.27,\n\t\t\theight: 1.27\n\t\t},\n\t\tdrill: None,\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill 0.635) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill 0.635)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size {\n\t\t\twidth: 1.27,\n\t\t\theight: 1.27\n\t\t},\n\t\tdrill: Some(Drill {\n\t\t\toval: false,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: None\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_oval_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill oval 0.635 0.847) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill oval 0.635 0.847)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size {\n\t\t\twidth: 1.27,\n\t\t\theight: 1.27\n\t\t},\n\t\tdrill: Some(Drill {\n\t\t\toval: true,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: Some(0.847)\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\n// ################################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"footprint\")]\nstruct Footprint {\n\tlibrary_link: String,\n\n\t#[serde(default, rename = \"\")]\n\tpads: Vec<Pad>\n}\n\ntest_case! {\n\tname: footprint_without_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\")\"#,\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_one_pad,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![Pad {\n\t\t\tindex: 1.into(),\n\t\t\tty: PadType::Smd,\n\t\t\tshape: PadShape::Rect,\n\t\t\tat: Position {\n\t\t\t\tx: 0.0,\n\t\t\t\ty: 0.0,\n\t\t\t\trot: None\n\t\t\t},\n\t\t\tsize: Size {\n\t\t\t\twidth: 1.27,\n\t\t\t\theight: 1.27\n\t\t\t},\n\t\t\tdrill: None,\n\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t}]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_two_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")) (pad 2 smd rect (at 2.54 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\"))\n\t\t  (pad 2 smd rect\n\t\t    (at 2.54 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![\n\t\t\tPad {\n\t\t\t\tindex: 1.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 0.0,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size {\n\t\t\t\t\twidth: 1.27,\n\t\t\t\t\theight: 1.27\n\t\t\t\t},\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t},\n\t\t\tPad {\n\t\t\t\tindex: 2.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 2.54,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size {\n\t\t\t\t\twidth: 1.27,\n\t\t\t\t\theight: 1.27\n\t\t\t\t},\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t}\n\t\t]\n\t}\n}\n","traces":[],"covered":0,"coverable":0}]}