{"files":[{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","error.rs"],"content":"use serde::de;\nuse std::fmt::Display;\nuse thiserror::Error;\n\n#[derive(Clone, Debug, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to deserialize anything but a struct at root\n\t/// level.\n\t#[error(\"Expected to deserialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if the input ends unexpectedly.\n\t#[error(\"Unexpected end of input\")]\n\tEof,\n\n\t/// This error will be returned if an opening s-expr was expected, but some other token was\n\t/// found.\n\t#[error(\"Expected s-expr\")]\n\tExpectedSExpr,\n\n\t/// This error will be returned if an opening s-expr with a certain name was expected, but\n\t/// some other token was found.\n\t#[error(\"Expected s-expr identifier {0}\")]\n\tExpectedSExprIdentifier(&'static str),\n\n\t/// This error will be returned if the end of the s-expr was expected, but some other token\n\t/// was found.\n\t#[error(\"Expected end of expression\")]\n\tExpectedEoe,\n\n\t/// This error will be returned if an identifier was expected, but some other token was found.\n\t#[error(\"Expected identifier\")]\n\tExpectedIdentifier,\n\n\t/// This error will be returned if a number was expected, but some other token was found.\n\t#[error(\"Expected number\")]\n\tExpectedNumber,\n\n\t/// This error will be returned if a string was expected, but some other token was found.\n\t#[error(\"Expected string\")]\n\tExpectedString,\n\n\t/// This error will be returned if an option was requested. [`Option`] is **not supported**\n\t/// by this data format.\n\t#[error(\"std::option::Option cannot be deserialized by this data format\")]\n\tDeserializeOption,\n\n\t/// This error will be returned if an s-expr is found, but its name (and fields) were not\n\t/// supplied to the deserializer (e.g. `deserialize_any` was called).\n\t#[error(\"Missing s-expr type info\")]\n\tMissingSExprInfo,\n\n\t/// This error will be returned when attempting to deserialize a non-unit enum variant.\n\t#[error(\"Non-unit enum variants are not supported\")]\n\tNonUnitEnumVariant,\n\n\t/// This error will be returned if there were trailing tokens after the deserialization\n\t/// finished.\n\t#[error(\"Trailing tokens\")]\n\tTrailingTokens\n}\n\nimpl de::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":67,"address":[218272,218337],"length":1,"stats":{"Line":1},"fn_name":"custom<core::fmt::Arguments>"},{"line":68,"address":[218285],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":2,"coverable":2},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","mod.rs"],"content":"use paste::paste;\nuse serde::{\n\tde::{\n\t\tself, DeserializeSeed, EnumAccess, MapAccess, SeqAccess, VariantAccess,\n\t\tVisitor\n\t},\n\tforward_to_deserialize_any, Deserialize\n};\nuse std::{borrow::Cow, fmt::Display, str::FromStr};\n\nmod error;\npub use error::Error;\n\npub struct Deserializer<'de> {\n\tinput: &'de str\n}\n\nimpl<'de> Deserializer<'de> {\n\tpub fn from_str(input: &'de str) -> Self {\n\t\tSelf { input }\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn from_str<'de, T>(input: &'de str) -> Result<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tlet mut deserializer = Deserializer::from_str(input);\n\tlet value = T::deserialize(&mut deserializer)?;\n\n\tdeserializer.skip_whitespace();\n\tif !deserializer.input.is_empty() {\n\t\treturn Err(Error::TrailingTokens);\n\t}\n\n\tOk(value)\n}\n\nimpl<'de> Deserializer<'de> {\n\tfn skip_whitespace(&mut self) {\n\t\tself.input = self.input.trim_start();\n\t}\n\n\tfn peek_char(&mut self) -> Result<char> {\n\t\tself.input.chars().next().ok_or(Error::Eof)\n\t}\n\n\tfn next_char(&mut self) -> Result<char> {\n\t\tlet ch = self.peek_char()?;\n\t\tself.input = &self.input[ch.len_utf8()..];\n\t\tOk(ch)\n\t}\n\n\tfn peek_identifier(&mut self) -> Option<&'de str> {\n\t\tlet len: usize = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn None;\n\t\t}\n\t\tSome(&self.input[..len])\n\t}\n\n\tfn peek_sexpr_identifier(&mut self) -> Result<&'de str> {\n\t\tlet mut chars = self.input.chars();\n\t\tif chars.next().ok_or(Error::Eof)? != '(' {\n\t\t\treturn Err(Error::ExpectedSExpr);\n\t\t}\n\t\tlet paren = '('.len_utf8();\n\t\tlet len: usize = chars\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn Err(Error::ExpectedIdentifier);\n\t\t}\n\t\tOk(&self.input[paren..paren + len])\n\t}\n\n\tfn consume(&mut self, len: usize) -> Result<()> {\n\t\tif self.input.len() < len {\n\t\t\treturn Err(Error::Eof);\n\t\t}\n\t\tself.input = &self.input[len..];\n\t\tOk(())\n\t}\n\n\tfn parse_number<T>(&mut self) -> Result<T>\n\twhere\n\t\tT: FromStr,\n\t\tT::Err: Display\n\t{\n\t\tlet len = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| ch.is_ascii_digit() || *ch == '-' || *ch == '.')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn Err(Error::ExpectedNumber);\n\t\t}\n\t\tlet number = &self.input[..len];\n\t\tlet number = number\n\t\t\t.parse()\n\t\t\t.map_err(|err: T::Err| Error::Message(err.to_string()))?;\n\t\tself.input = &self.input[len..];\n\t\tOk(number)\n\t}\n\n\tfn parse_string(&mut self) -> Result<Cow<'de, str>> {\n\t\tmatch self.peek_char()? {\n\t\t\t'(' => Err(Error::ExpectedString),\n\n\t\t\t'\"' => {\n\t\t\t\tself.consume('\"'.len_utf8())?;\n\t\t\t\tlet mut value = String::new();\n\t\t\t\tloop {\n\t\t\t\t\tlet len: usize = self\n\t\t\t\t\t\t.input\n\t\t\t\t\t\t.chars()\n\t\t\t\t\t\t.take_while(|ch| *ch != '\"')\n\t\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t\t.sum();\n\t\t\t\t\tif len >= self.input.len() {\n\t\t\t\t\t\treturn Err(Error::Eof);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet mut start_idx = value.chars().count();\n\t\t\t\t\tvalue += &self.input[..len + 1];\n\t\t\t\t\tself.input = &self.input[len + 1..];\n\t\t\t\t\twhile let Some(idx) = (&value[start_idx..]).find(r\"\\\\\") {\n\t\t\t\t\t\tlet idx = start_idx + idx;\n\t\t\t\t\t\tvalue.replace_range(idx..idx + 2, r\"\\\");\n\t\t\t\t\t\tstart_idx = idx + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif value.ends_with(r#\"\\\"\"#) && start_idx < value.len() - 1 {\n\t\t\t\t\t\tvalue.remove(value.len() - 2);\n\t\t\t\t\t} else if value.ends_with(r#\"\"\"#) {\n\t\t\t\t\t\tvalue.remove(value.len() - 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tunreachable!();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tOk(value.into())\n\t\t\t},\n\n\t\t\t_ => {\n\t\t\t\tlet len = self\n\t\t\t\t\t.input\n\t\t\t\t\t.chars()\n\t\t\t\t\t.take_while(|ch| !ch.is_ascii_whitespace() && *ch != ')')\n\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t.sum();\n\t\t\t\tif len == 0 {\n\t\t\t\t\treturn Err(Error::Eof);\n\t\t\t\t}\n\t\t\t\tlet value = &self.input[..len];\n\t\t\t\tself.input = &self.input[len..];\n\t\t\t\tOk(value.into())\n\t\t\t}\n\t\t}\n\t}\n}\n\nimpl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, _: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\treturn Err(Error::ExpectedStruct);\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_map(SExpr::new(self, name, fields)?)\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self, name)?;\n\t\tif self.next_char()? != ')' {\n\t\t\treturn Err(Error::ExpectedEoe);\n\t\t}\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self, name)?)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self, name)?)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit seq tuple map enum identifier ignored_any\n\t}\n}\n\n/// Deserialise an s-expr.\nstruct SExpr<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tfields: &'static [&'static str],\n\tindex: usize,\n\tskip_to: Option<usize>\n}\n\nimpl<'a, 'de> SExpr<'a, 'de> {\n\tfn consume_beginning(\n\t\tde: &mut Deserializer<'de>,\n\t\tname: &'static str\n\t) -> Result<()> {\n\t\tde.skip_whitespace();\n\t\tif de.peek_sexpr_identifier()? != name {\n\t\t\treturn Err(Error::ExpectedSExprIdentifier(name));\n\t\t}\n\t\tde.consume(name.len() + '('.len_utf8())?;\n\t\tOk(())\n\t}\n\n\tfn new(\n\t\tde: &'a mut Deserializer<'de>,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str]\n\t) -> Result<Self> {\n\t\tSelf::consume_beginning(de, name)?;\n\t\tOk(Self {\n\t\t\tde,\n\t\t\tfields,\n\t\t\tindex: 0,\n\t\t\tskip_to: None\n\t\t})\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tself.de.skip_whitespace();\n\t\tif self.skip_to.is_none() && self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(1)?;\n\t\t\t// technically we're done, but there could be booleans that are false, so we'll\n\t\t\t// deserialize those as None/false eventhough they don't exist in the input.\n\t\t\tself.skip_to = Some(self.fields.len() + 1);\n\t\t}\n\t\tOk(())\n\t}\n\n\tfn next_value_seed_impl<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tif self.index >= self.fields.len() {\n\t\t\tpanic!(\"There was no key and there is no value\");\n\t\t}\n\n\t\t// booleans are represented in this weird way where they are simply missing if they are\n\t\t// false. This means that if we detect a boolean ahead of our current index, we'll assume\n\t\t// everything inbetween is either None or false, and skip ahead.\n\t\tif let Some(skip_to) = self.skip_to {\n\t\t\tif skip_to == self.index {\n\t\t\t\tself.skip_to = None;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\treturn seed.deserialize(MissingField);\n\t\t}\n\t\tif let Some(identifier) = self.de.peek_identifier() {\n\t\t\tif self.fields[self.index] == identifier {\n\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\tfor i in self.index + 1..self.fields.len() {\n\t\t\t\tif self.fields[i] == identifier {\n\t\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\t\tself.skip_to = Some(i);\n\t\t\t\t\treturn seed.deserialize(MissingField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tseed.deserialize(Field::new(self.de, Some(self.fields[self.index])))\n\t}\n}\n\nimpl<'a, 'de> MapAccess<'de> for SExpr<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>\n\twhere\n\t\tK: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\n\t\tloop {\n\t\t\tif self.index >= self.fields.len() {\n\t\t\t\treturn Ok(None);\n\t\t\t}\n\n\t\t\t// special case: if the ident is empty (\"\") and we are set to skip it, don't even\n\t\t\t// return the field.\n\t\t\tif self.fields[self.index] == \"\" {\n\t\t\t\tif let Some(skip_to) = self.skip_to {\n\t\t\t\t\tif skip_to == self.index {\n\t\t\t\t\t\tself.skip_to = None;\n\t\t\t\t\t}\n\t\t\t\t\tself.index += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tseed.deserialize(FieldIdent(self.fields[self.index]))\n\t\t\t.map(Some)\n\t}\n\n\tfn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tlet value = self.next_value_seed_impl(seed)?;\n\t\tself.index += 1;\n\t\tself.check_eoe()?;\n\t\tOk(value)\n\t}\n}\n\n/// Deserialize an s-expr in tuple format. It cannot contain booleans.\nstruct SExprTuple<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tend: bool\n}\n\nimpl<'a, 'de> SExprTuple<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, name: &'static str) -> Result<Self> {\n\t\tSExpr::consume_beginning(de, name)?;\n\t\tOk(Self { de, end: false })\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tif self.end {\n\t\t\treturn Ok(());\n\t\t}\n\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(')'.len_utf8())?;\n\t\t\tself.end = true;\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for SExprTuple<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\t\tif self.end {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tlet value = seed.deserialize(Field::new(self.de, None))?;\n\t\tself.check_eoe()?;\n\t\tOk(Some(value))\n\t}\n}\n\n/// Deserialize a field's ident.\nstruct FieldIdent(&'static str);\n\nimpl<'de> de::Deserializer<'de> for FieldIdent {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_borrowed_str(self.0)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize a single boolean with value `true`.\nstruct TrueField;\n\nimpl<'de> de::Deserializer<'de> for TrueField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(true)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize either a boolean with value `false` or an option with value `None`.\nstruct MissingField;\n\nimpl<'de> de::Deserializer<'de> for MissingField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_none()\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// A field whose value does not match its ident. This means that if a boolean gets requested,\n/// we must return false without touching the input.\n///\n/// We still store the ident if we know it, so that we can parse a sequence like\n/// (<ident> <values..>). The empty ident (`\"\"`) is treated as a special case to consume\n/// the remaining fields of the current expression.\nstruct Field<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tident: Option<&'static str>\n}\n\nimpl<'a, 'de> Field<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, ident: Option<&'static str>) -> Self {\n\t\tSelf { de, ident }\n\t}\n}\n\nmacro_rules! forward_to_parse_number {\n\t($($ident:ident)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<deserialize_ $ident>]<V>(self, visitor: V) -> Result<V::Value>\n\t\t\t\twhere\n\t\t\t\t\tV: Visitor<'de>\n\t\t\t\t{\n\t\t\t\t\tvisitor.[<visit_ $ident>](self.de.parse_number()?)\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de> de::Deserializer<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tmatch self.de.peek_char()? {\n\t\t\tch @ '0'..='9' | ch @ '-' | ch @ '.' => match self.de.input.find('.') {\n\t\t\t\tSome(idx)\n\t\t\t\t\tif (&self.de.input[..idx])\n\t\t\t\t\t\t.contains(|ch: char| ch.is_ascii_whitespace()) =>\n\t\t\t\t{\n\t\t\t\t\tif ch == '-' {\n\t\t\t\t\t\tself.deserialize_i64(visitor)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.deserialize_u64(visitor)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t_ => self.deserialize_f32(visitor)\n\t\t\t},\n\t\t\t'(' if Some(self.de.peek_sexpr_identifier()?) == self.ident => {\n\t\t\t\tself.deserialize_seq(visitor)\n\t\t\t},\n\t\t\t'(' => Err(Error::MissingSExprInfo),\n\t\t\t_ => self.deserialize_string(visitor)\n\t\t}\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tfn deserialize_str<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_string(visitor)\n\t}\n\n\tfn deserialize_string<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet value = self.de.parse_string()?;\n\t\tmatch value {\n\t\t\tCow::Borrowed(value) => visitor.visit_borrowed_str(value),\n\t\t\tCow::Owned(value) => visitor.visit_string(value)\n\t\t}\n\t}\n\n\tfn deserialize_option<V>(self, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\t// we'll need to know the type of Some (i.e. the s-expr tag) to see if it is present in\n\t\t// the input or not\n\t\t// however, serde doesn't give us this type of information, so we'll just error\n\t\treturn Err(Error::DeserializeOption);\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_map(SExpr::new(self.de, name, fields)?)\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self.de, name)?;\n\t\tif self.de.next_char()? != ')' {\n\t\t\treturn Err(Error::ExpectedEoe);\n\t\t}\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_tuple_struct(name, 1, visitor)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self.de, name)?)\n\t}\n\n\tfn deserialize_enum<V>(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variants: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_enum(self)\n\t}\n\n\tfn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet ident = self.ident.ok_or(Error::MissingSExprInfo)?;\n\t\tmatch ident {\n\t\t\t\"\" => {\n\t\t\t\t// special case: we'll return the remaining tokens of the current s-expr\n\t\t\t\tvisitor.visit_seq(self)\n\t\t\t},\n\t\t\t_ => visitor.visit_seq(SExprTuple::new(self.de, ident)?)\n\t\t}\n\t}\n\n\tfn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_seq(visitor)\n\t}\n\n\tforward_to_parse_number! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tchar bytes byte_buf unit map identifier ignored_any\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tseed.deserialize(Field::new(self.de, None)).map(Some)\n\t}\n}\n\nimpl<'a, 'de> EnumAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\ttype Variant = UnitVariant;\n\n\tfn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant)>\n\twhere\n\t\tV: DeserializeSeed<'de>\n\t{\n\t\tOk((seed.deserialize(self)?, UnitVariant))\n\t}\n}\n\n/// This will deserialize only unit variants.\nstruct UnitVariant;\n\nimpl<'de> VariantAccess<'de> for UnitVariant {\n\ttype Error = Error;\n\n\tfn unit_variant(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n\n\tfn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n\n\tfn struct_variant<V>(\n\t\tself,\n\t\t_fields: &'static [&'static str],\n\t\t_visitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n}\n","traces":[{"line":19,"address":[231184],"length":1,"stats":{"Line":1},"fn_name":"from_str"},{"line":26,"address":[337136,337541,339536,340550,339984,341700,339332,341116,338368,341280,338912,339886,340720,338776,337728,338186],"length":1,"stats":{"Line":10},"fn_name":"from_str<test::Font>"},{"line":30,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":31,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":33,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":34,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":35,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":42,"address":[231232],"length":1,"stats":{"Line":1},"fn_name":"skip_whitespace"},{"line":43,"address":[231249],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[231312],"length":1,"stats":{"Line":1},"fn_name":"peek_char"},{"line":47,"address":[231331],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[231408],"length":1,"stats":{"Line":1},"fn_name":"next_char"},{"line":51,"address":[231542,231438],"length":1,"stats":{"Line":1},"fn_name":null},{"line":52,"address":[231505,231701],"length":1,"stats":{"Line":2},"fn_name":null},{"line":53,"address":[231770],"length":1,"stats":{"Line":1},"fn_name":null},{"line":56,"address":[231792],"length":1,"stats":{"Line":1},"fn_name":"peek_identifier"},{"line":57,"address":[231812],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[257646,257616],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":61,"address":[257712,257736],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":63,"address":[231897],"length":1,"stats":{"Line":1},"fn_name":null},{"line":64,"address":[231903],"length":1,"stats":{"Line":1},"fn_name":null},{"line":66,"address":[231924],"length":1,"stats":{"Line":1},"fn_name":null},{"line":69,"address":[232000],"length":1,"stats":{"Line":1},"fn_name":"peek_sexpr_identifier"},{"line":70,"address":[232030],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[232052],"length":1,"stats":{"Line":1},"fn_name":null},{"line":72,"address":[232346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[232316],"length":1,"stats":{"Line":1},"fn_name":null},{"line":75,"address":[232415],"length":1,"stats":{"Line":1},"fn_name":null},{"line":76,"address":[257790,257760],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":77,"address":[257856,257880],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":79,"address":[232490],"length":1,"stats":{"Line":1},"fn_name":null},{"line":80,"address":[232501],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[232588],"length":1,"stats":{"Line":1},"fn_name":null},{"line":85,"address":[232768],"length":1,"stats":{"Line":1},"fn_name":"consume"},{"line":86,"address":[232802],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[232890],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[232844,232964],"length":1,"stats":{"Line":2},"fn_name":null},{"line":90,"address":[232971],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[304768,306272,306957,306976,307672,306243,305520,305491],"length":1,"stats":{"Line":4},"fn_name":"parse_number<i64>"},{"line":98,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":99,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":102,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":104,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":108,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":110,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":111,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":112,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":115,"address":[232992,236090],"length":1,"stats":{"Line":1},"fn_name":"parse_string"},{"line":116,"address":[233031],"length":1,"stats":{"Line":1},"fn_name":null},{"line":117,"address":[233344],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[234008,233416,233922],"length":1,"stats":{"Line":2},"fn_name":null},{"line":121,"address":[233982],"length":1,"stats":{"Line":1},"fn_name":null},{"line":122,"address":[234154],"length":1,"stats":{"Line":1},"fn_name":null},{"line":123,"address":[234288,234170],"length":1,"stats":{"Line":2},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[257904,257917],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":127,"address":[257936,257960],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":129,"address":[234342],"length":1,"stats":{"Line":1},"fn_name":null},{"line":130,"address":[234424],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[234550,234393],"length":1,"stats":{"Line":2},"fn_name":null},{"line":134,"address":[234636],"length":1,"stats":{"Line":1},"fn_name":null},{"line":135,"address":[234827],"length":1,"stats":{"Line":1},"fn_name":null},{"line":136,"address":[235003,236052],"length":1,"stats":{"Line":2},"fn_name":null},{"line":137,"address":[235876,235175,235850],"length":1,"stats":{"Line":2},"fn_name":null},{"line":138,"address":[235858,235922],"length":1,"stats":{"Line":2},"fn_name":null},{"line":139,"address":[236057,236023],"length":1,"stats":{"Line":1},"fn_name":null},{"line":151,"address":[235703],"length":1,"stats":{"Line":1},"fn_name":null},{"line":154,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[233455,233306],"length":1,"stats":{"Line":2},"fn_name":null},{"line":156,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":158,"address":[257984,258014],"length":1,"stats":{"Line":2},"fn_name":"{closure#2}"},{"line":159,"address":[258080,258104],"length":1,"stats":{"Line":2},"fn_name":"{closure#3}"},{"line":161,"address":[233526],"length":1,"stats":{"Line":1},"fn_name":null},{"line":162,"address":[233540],"length":1,"stats":{"Line":0},"fn_name":null},{"line":164,"address":[233628],"length":1,"stats":{"Line":1},"fn_name":null},{"line":165,"address":[233727],"length":1,"stats":{"Line":1},"fn_name":null},{"line":166,"address":[233825],"length":1,"stats":{"Line":1},"fn_name":null},{"line":179,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[384207,383775,382911,382768,384064,383200,383343,383632],"length":1,"stats":{"Line":6},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":191,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":194,"address":[385072,384496],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":202,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":203,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":204,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":209,"address":[385919,385792,385583,385456],"length":1,"stats":{"Line":2},"fn_name":"deserialize_newtype_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":217,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":220,"address":[385239,385104],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":229,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":247,"address":[236128],"length":1,"stats":{"Line":1},"fn_name":"consume_beginning"},{"line":251,"address":[236176],"length":1,"stats":{"Line":1},"fn_name":null},{"line":252,"address":[236186,236447],"length":1,"stats":{"Line":2},"fn_name":null},{"line":253,"address":[236480],"length":1,"stats":{"Line":1},"fn_name":null},{"line":255,"address":[236732,236570,236453],"length":1,"stats":{"Line":2},"fn_name":null},{"line":256,"address":[236715],"length":1,"stats":{"Line":1},"fn_name":null},{"line":259,"address":[236880],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":264,"address":[237142,236951],"length":1,"stats":{"Line":2},"fn_name":null},{"line":265,"address":[237033],"length":1,"stats":{"Line":1},"fn_name":null},{"line":266,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":267,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":268,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":269,"address":[237021],"length":1,"stats":{"Line":1},"fn_name":null},{"line":273,"address":[237280],"length":1,"stats":{"Line":1},"fn_name":"check_eoe"},{"line":274,"address":[237310],"length":1,"stats":{"Line":1},"fn_name":null},{"line":275,"address":[237323,237581,237914],"length":1,"stats":{"Line":3},"fn_name":null},{"line":276,"address":[237607,237714],"length":1,"stats":{"Line":1},"fn_name":null},{"line":279,"address":[237680,237919,237870],"length":1,"stats":{"Line":2},"fn_name":null},{"line":281,"address":[237593],"length":1,"stats":{"Line":1},"fn_name":null},{"line":284,"address":[323024,325004,335084,314960,329072,312908,331052,333068,335120,321008,327056,310892,318956,308912,327020,329036,337100,322988,331088,316940,318992,316976,325040,314924,312944,320972,333104,310928],"length":1,"stats":{"Line":16},"fn_name":"next_value_seed_impl<core::marker::PhantomData<test::PadShape>>"},{"line":288,"address":[],"length":0,"stats":{"Line":17},"fn_name":null},{"line":295,"address":[],"length":0,"stats":{"Line":21},"fn_name":null},{"line":296,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":297,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":298,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":300,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":302,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":303,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":304,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":305,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":307,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":308,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":309,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":310,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":316,"address":[],"length":0,"stats":{"Line":28},"fn_name":null},{"line":323,"address":[345747,346688,347571,349395,346659,345776,347600,348483,344864,348512],"length":1,"stats":{"Line":7},"fn_name":"next_key_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":327,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":329,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":330,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":331,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":336,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":337,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":338,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":339,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":341,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":342,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":349,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":350,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":353,"address":[356526,357174,357200,357824,350808,352736,355291,354703,351552,350183,354720,354000,352119,352711,358529,355312,350208,353336,357800,356544,353360,349424,352144,351535,353972,350832,355879,355904],"length":1,"stats":{"Line":16},"fn_name":"next_value_seed<core::marker::PhantomData<serde_sexpr::literal::Literal>>"},{"line":357,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":358,"address":[],"length":0,"stats":{"Line":30},"fn_name":null},{"line":359,"address":[],"length":0,"stats":{"Line":32},"fn_name":null},{"line":360,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":371,"address":[237952],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":372,"address":[238109,237997],"length":1,"stats":{"Line":1},"fn_name":null},{"line":373,"address":[238054],"length":1,"stats":{"Line":1},"fn_name":null},{"line":376,"address":[238224],"length":1,"stats":{"Line":1},"fn_name":"check_eoe"},{"line":377,"address":[238254],"length":1,"stats":{"Line":1},"fn_name":null},{"line":378,"address":[238280],"length":1,"stats":{"Line":1},"fn_name":null},{"line":381,"address":[238265],"length":1,"stats":{"Line":1},"fn_name":null},{"line":382,"address":[238305,238630],"length":1,"stats":{"Line":2},"fn_name":null},{"line":383,"address":[238511,238561,238637],"length":1,"stats":{"Line":2},"fn_name":null},{"line":384,"address":[238626],"length":1,"stats":{"Line":1},"fn_name":null},{"line":386,"address":[238540],"length":1,"stats":{"Line":1},"fn_name":null},{"line":393,"address":[379072,380200,378064,375616,376832,376791,378020,379029],"length":1,"stats":{"Line":2},"fn_name":"next_element_seed<core::marker::PhantomData<serde::__private::de::content::Content>>"},{"line":397,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":398,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":399,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":401,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":402,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":403,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":413,"address":[381360,381408,381504,381312,381456],"length":1,"stats":{"Line":7},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":417,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":433,"address":[380608,380640,380672,380720,380432,380240,380464,380272,380336,380560,380400,380304,380368,380512],"length":1,"stats":{"Line":1},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__Visitor>"},{"line":437,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":453,"address":[382112,382176,382080,382144,382048,381824,381856,381888,382016,381952,381792,381920,381984],"length":1,"stats":{"Line":3},"fn_name":"deserialize_any<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>"},{"line":457,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":460,"address":[382368],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":464,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":486,"address":[238784],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":495,"address":[363909,365158,370000,364112,363808,365344,365734,363283,364720,364416,364836,363605,365632,370102,365446,363168,370576,370390,364213,363504,370678,370288,365056,364517],"length":1,"stats":{"Line":5},"fn_name":"deserialize_f32<serde_sexpr::option::OptionVisitor<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>>"},{"line":499,"address":[370571,365915,365339,364703,364532,370405,370693,365627,370592,363485,364085,363924,363520,365617,364228,365039,370117,370561,370849,363620,365905,370304,370283,365029,364389,364432,364851,365749,365072,363198,365329,364399,365360,365648,364693,370016,363298,364095,363791,364128,364750,365461,363824,363475,363781,365173,370273,370859],"length":1,"stats":{"Line":10},"fn_name":null},{"line":509,"address":[360392,361692,361728,360416,363000,359120],"length":1,"stats":{"Line":3},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":513,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":514,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":515,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":516,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":517,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":519,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":520,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":522,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":525,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":527,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":528,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":530,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":531,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":535,"address":[370864],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":539,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":546,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":549,"address":[371056,372218,372240,371626,373402,371648,372832,372810],"length":1,"stats":{"Line":3},"fn_name":"deserialize_string<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":553,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":554,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":555,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":556,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":567,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":570,"address":[374426,373585,374010,373424,373872,374288],"length":1,"stats":{"Line":3},"fn_name":"deserialize_struct<serde_sexpr::option::OptionVisitor<test::_::{impl#0}::deserialize::__Visitor>>"},{"line":579,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":590,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":591,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":592,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":594,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":597,"address":[375536],"length":1,"stats":{"Line":0},"fn_name":"deserialize_newtype_struct<serde_sexpr::option::OptionVisitor<test::_::{impl#0}::deserialize::__Visitor>>"},{"line":605,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":608,"address":[375168,374962,374832,375312],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":617,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":620,"address":[370976,370896],"length":1,"stats":{"Line":2},"fn_name":"deserialize_enum<test::_::{impl#0}::deserialize::__Visitor>"},{"line":629,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":632,"address":[365920,368338,366706,369154,367522,369970,368368,367552,369184,366736],"length":1,"stats":{"Line":2},"fn_name":"deserialize_seq<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":636,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":637,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":638,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":640,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":642,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":650,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":665,"address":[343152,344828,343712,344244,343674,344288],"length":1,"stats":{"Line":1},"fn_name":"next_element_seed<core::marker::PhantomData<test::Pad>>"},{"line":669,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":670,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":671,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":673,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":681,"address":[358544,358832],"length":1,"stats":{"Line":2},"fn_name":"variant_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":685,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":695,"address":[238832],"length":1,"stats":{"Line":1},"fn_name":"unit_variant"},{"line":696,"address":[238836],"length":1,"stats":{"Line":1},"fn_name":null},{"line":703,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":710,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":721,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":186,"coverable":233},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","lib.rs"],"content":"#![warn(rust_2018_idioms, unreachable_pub)]\n#![forbid(unsafe_code)]\n\nmod literal;\nmod option;\n\npub mod de;\npub mod ser;\n\npub use de::from_str;\npub use literal::Literal;\npub use option::{deserialize_option, OptionDef as Option};\npub use ser::{to_string, to_string_pretty};\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","literal.rs"],"content":"use serde::{Deserialize, Serialize};\nuse std::fmt::{self, Debug, Display, Formatter};\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(untagged)]\nenum LiteralImp {\n\tNumber(u16),\n\tText(String)\n}\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(transparent)]\npub struct Literal(LiteralImp);\n\nimpl Debug for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Debug::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Debug::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl Display for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Display::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Display::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl From<u16> for Literal {\n\tfn from(num: u16) -> Self {\n\t\tSelf(LiteralImp::Number(num))\n\t}\n}\n\nimpl From<&str> for Literal {\n\tfn from(text: &str) -> Self {\n\t\ttext.to_owned().into()\n\t}\n}\n\nimpl From<String> for Literal {\n\tfn from(text: String) -> Self {\n\t\tSelf(LiteralImp::Text(text))\n\t}\n}\n","traces":[{"line":16,"address":[229536],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":17,"address":[229554],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[229585],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[229616],"length":1,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[229664],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":26,"address":[229682],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[229713],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[229745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[229792],"length":1,"stats":{"Line":1},"fn_name":"from"},{"line":35,"address":[229807],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[229872],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":41,"address":[229895],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[229936],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":47,"address":[229943],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":14},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","option.rs"],"content":"use serde::{\n\tde::{\n\t\tself, Deserialize, Deserializer, EnumAccess, MapAccess, SeqAccess, Visitor\n\t},\n\tser::{Serialize, Serializer}\n};\nuse std::{\n\tfmt::{self, Formatter},\n\tmarker::PhantomData\n};\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(with = \"serde_sexpr::Option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// For a more detailed description, see [`deserialize_option`].\npub struct OptionDef<T>(PhantomData<T>);\n\nimpl<'de, T> OptionDef<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tpub fn deserialize<D>(deserializer: D) -> Result<Option<T>, D::Error>\n\twhere\n\t\tD: Deserializer<'de>\n\t{\n\t\tdeserialize_option(deserializer)\n\t}\n}\n\nimpl<T> OptionDef<T>\nwhere\n\tOption<T>: Serialize\n{\n\tpub fn serialize<S>(this: &Option<T>, serializer: S) -> Result<S::Ok, S::Error>\n\twhere\n\t\tS: Serializer\n\t{\n\t\tthis.serialize(serializer)\n\t}\n}\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(deserialize_with = \"serde_sexpr::deserialize_option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// The s-expression format is not only not self-describing, but also does not provide any way\n/// to see if a value is \"missing\" (i.e. [`None`]) without knowing its type. Unfortunately, serde\n/// expects us to decide if the value is present before we know its type: In the above example,\n/// we have the input string `\"bold)\"` and need to know if `thickness` is present or not, without\n/// knowing that `thickness` is an s-expr and not, say, an enum that has a variant called `bold`.\n///\n/// This custom deserialize logic therefore avoids calling [`Deserializer::deserialize_option`]\n/// alltogether. Instead, we'll try to deserialize the value as if it was present, and return\n/// [`None`] if the deserializer returns an error before calling the visitor. This is likely\n/// indicative of a type error, that would indicate a missing value.\n///\n/// ### Drawbacks\n///\n/// Using this deserialize logic might hide errors in the input. If this optional value\n/// is the last value that gets deserialized, and the deserialization failed due to some\n/// error other than a type error, it might get hidden.\n///\n/// Also, if trying to deserialize the value alters the state of the deserializer, it could\n/// lead to incorrect deserialization.\npub fn deserialize_option<'de, D, T>(deserializer: D) -> Result<Option<T>, D::Error>\nwhere\n\tD: Deserializer<'de>,\n\tT: Deserialize<'de>\n{\n\t// this flag will be set if any visitor method was called\n\tlet mut flag = false;\n\n\t// try to deserialize a present value\n\tlet result = T::deserialize(OptionDeserializer {\n\t\tde: deserializer,\n\t\tflag: &mut flag\n\t});\n\n\t// if the flag is not set and we don't have a value, assume a non-present value\n\tmatch result {\n\t\tOk(value) => Ok(Some(value)),\n\t\tErr(_) if !flag => Ok(None),\n\t\tErr(err) => Err(err)\n\t}\n}\n\n/// A deserializer that intercepts the visitor with our custom visitor.\nstruct OptionDeserializer<'a, D> {\n\tde: D,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_deserializer {\n\t($(fn $ident:ident <$visitor:ident>(\n\t\tself,\n\t\t$visitor_arg:ident : $visitor_arg_ty:ty\n\t\t$(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$visitor>(\n\t\t\t\tself,\n\t\t\t\t$($arg: $arg_ty,)*\n\t\t\t\t$visitor_arg: $visitor_arg_ty\n\t\t\t) -> Result<$visitor::Value, Self::Error>\n\t\t\twhere\n\t\t\t\t$visitor: Visitor<'de>\n\t\t\t{\n\t\t\t\tlet $visitor_arg = OptionVisitor {\n\t\t\t\t\tvisitor: $visitor_arg,\n\t\t\t\t\tflag: self.flag\n\t\t\t\t};\n\t\t\t\tself.de.$ident($($arg,)* $visitor_arg)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, D> Deserializer<'de> for OptionDeserializer<'a, D>\nwhere\n\tD: Deserializer<'de>\n{\n\ttype Error = D::Error;\n\n\tforward_deserializer! {\n\t\tfn deserialize_any<V>(self, visitor: V);\n\t\tfn deserialize_bool<V>(self, visitor: V);\n\t\tfn deserialize_i8<V>(self, visitor: V);\n\t\tfn deserialize_i16<V>(self, visitor: V);\n\t\tfn deserialize_i32<V>(self, visitor: V);\n\t\tfn deserialize_i64<V>(self, visitor: V);\n\t\tfn deserialize_i128<V>(self, visitor: V);\n\t\tfn deserialize_u8<V>(self, visitor: V);\n\t\tfn deserialize_u16<V>(self, visitor: V);\n\t\tfn deserialize_u32<V>(self, visitor: V);\n\t\tfn deserialize_u64<V>(self, visitor: V);\n\t\tfn deserialize_u128<V>(self, visitor: V);\n\t\tfn deserialize_f32<V>(self, visitor: V);\n\t\tfn deserialize_f64<V>(self, visitor: V);\n\t\tfn deserialize_char<V>(self, visitor: V);\n\t\tfn deserialize_str<V>(self, visitor: V);\n\t\tfn deserialize_string<V>(self, visitor: V);\n\t\tfn deserialize_bytes<V>(self, visitor: V);\n\t\tfn deserialize_byte_buf<V>(self, visitor: V);\n\t\tfn deserialize_option<V>(self, visitor: V);\n\t\tfn deserialize_unit<V>(self, visitor: V);\n\t\tfn deserialize_unit_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_newtype_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_seq<V>(self, visitor: V);\n\t\tfn deserialize_tuple<V>(self, visitor: V, len: usize);\n\t\tfn deserialize_tuple_struct<V>(self, visitor: V, name: &'static str, len: usize);\n\t\tfn deserialize_map<V>(self, visitor: V);\n\t\tfn deserialize_struct<V>(self, visitor: V, name: &'static str, fields: &'static [&'static str]);\n\t\tfn deserialize_enum<V>(self, visitor: V, name: &'static str, variants: &'static [&'static str]);\n\t\tfn deserialize_identifier<V>(self, visitor: V);\n\t\tfn deserialize_ignored_any<V>(self, visitor: V);\n\t}\n\n\tfn is_human_readable(&self) -> bool {\n\t\tself.de.is_human_readable()\n\t}\n}\n\n/// A visitor that will set a flag if any visit method was called (except for visit_none).\n/// This indicates that the value was indeed present, i.e. any error return was not a\n/// general type error but instead a problem deserializing the correct type.\nstruct OptionVisitor<'a, V> {\n\tvisitor: V,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_visitor {\n\t($(fn $ident:ident <$error:ident>(self $(, $arg:ident : $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident<$error>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $error>\n\t\t\twhere\n\t\t\t\t$error: de::Error\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident <$access:ident : $access_bound:path>(\n\t\tself $(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$access>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $access::Error>\n\t\t\twhere\n\t\t\t\t$access: $access_bound\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, V> Visitor<'de> for OptionVisitor<'a, V>\nwhere\n\tV: Visitor<'de>\n{\n\ttype Value = V::Value;\n\n\tfn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tf.write_str(\"optional \")?;\n\t\tself.visitor.expecting(f)\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_bool<E>(self, v: bool);\n\t\tfn visit_i8<E>(self, v: i8);\n\t\tfn visit_i16<E>(self, v: i16);\n\t\tfn visit_i32<E>(self, v: i32);\n\t\tfn visit_i64<E>(self, v: i64);\n\t\tfn visit_i128<E>(self, v: i128);\n\t\tfn visit_u8<E>(self, v: u8);\n\t\tfn visit_u16<E>(self, v: u16);\n\t\tfn visit_u32<E>(self, v: u32);\n\t\tfn visit_u64<E>(self, v: u64);\n\t\tfn visit_u128<E>(self, v: u128);\n\t\tfn visit_f32<E>(self, v: f32);\n\t\tfn visit_f64<E>(self, v: f64);\n\t\tfn visit_char<E>(self, v: char);\n\t\tfn visit_str<E>(self, v: &str);\n\t\tfn visit_borrowed_str<E>(self, v: &'de str);\n\t\tfn visit_string<E>(self, v: String);\n\t\tfn visit_bytes<E>(self, v: &[u8]);\n\t\tfn visit_borrowed_bytes<E>(self, v: &'de [u8]);\n\t\tfn visit_byte_buf<E>(self, v: Vec<u8>);\n\t\tfn visit_unit<E>(self);\n\t}\n\n\tfn visit_none<E>(self) -> Result<Self::Value, E>\n\twhere\n\t\tE: de::Error\n\t{\n\t\t// special case - if we don't set the flag and return an error, we'll\n\t\t// get None\n\t\tErr(E::custom(\"\"))\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_some<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_newtype_struct<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_seq<A: SeqAccess<'de>>(self, seq: A);\n\t\tfn visit_map<A: MapAccess<'de>>(self, map: A);\n\t\tfn visit_enum<A: EnumAccess<'de>>(self, data: A);\n\t}\n}\n","traces":[{"line":55,"address":[479712,479680,479552,479648,479232,479264,479296,479424,479488,479360,479520,479616],"length":1,"stats":{"Line":6},"fn_name":"deserialize<i16, serde_sexpr::de::TrueField>"},{"line":59,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":67,"address":[479936,479872,479744,479808],"length":1,"stats":{"Line":4},"fn_name":"serialize<f32, serde_sexpr::ser::Field>"},{"line":71,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":130,"address":[485120,483808,481424,482880,480912,483296,482480,484224,480000,480400,484640,482000],"length":1,"stats":{"Line":6},"fn_name":"deserialize_option<serde_sexpr::de::TrueField, i16>"},{"line":136,"address":[480417,482496,480929,484656,482896,485136,480016,481441,483824,482016,483313,484240],"length":1,"stats":{"Line":6},"fn_name":null},{"line":139,"address":[482909,480029,480968,483352,482509,484253,484669,480456,482029,483837,485149,481480],"length":1,"stats":{"Line":6},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":146,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":147,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":148,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[486912,486784,486864,486608,486960,487392,486656,487216,487472,487088,487312,486736],"length":1,"stats":{"Line":6},"fn_name":"deserialize_f32<serde_sexpr::de::MissingField, serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>"},{"line":173,"address":[486625,486672,487177,487445,486929,486881,486753,487049,487365,486800,487252,487498],"length":1,"stats":{"Line":6},"fn_name":null},{"line":175,"address":[487248,486668,486796,487494],"length":1,"stats":{"Line":3},"fn_name":null},{"line":177,"address":[487054,487182,486805,486934,486630,486677,487370,487450,486758,487257,486886,487503],"length":1,"stats":{"Line":6},"fn_name":null},{"line":223,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[486352,485536,485664,485600,485728,486400],"length":1,"stats":{"Line":2},"fn_name":"visit_bool<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::error::Error>"},{"line":243,"address":[485627,485691,485755,486424,486374,485563],"length":1,"stats":{"Line":2},"fn_name":null},{"line":244,"address":[486427,485566,485694,485630,485758,486377],"length":1,"stats":{"Line":2},"fn_name":null},{"line":253,"address":[486448,486528],"length":1,"stats":{"Line":2},"fn_name":"visit_map<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::SExpr>"},{"line":257,"address":[486480,486572],"length":1,"stats":{"Line":2},"fn_name":null},{"line":258,"address":[486483,486575],"length":1,"stats":{"Line":2},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[485899,486315,485936,486186,485792,486208,486080,486043],"length":1,"stats":{"Line":3},"fn_name":"visit_none<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::error::Error>"},{"line":305,"address":[],"length":0,"stats":{"Line":3},"fn_name":null}],"covered":23,"coverable":30},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","error.rs"],"content":"use serde::ser;\nuse std::fmt::Display;\nuse thiserror::Error;\n\n#[derive(Clone, Debug, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to serialize anything but a struct at root\n\t/// level.\n\t#[error(\"Expected to serialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if a boolean was detected in an unnamed container, i.e.\n\t/// a tuple or a sequence.\n\t#[error(\"Unnamed boolean\")]\n\tUnnamedBoolean,\n\n\t/// This error will be returned if a sequence was detected in an unnamed container, i.e. a\n\t/// tuple or a sequence.\n\t#[error(\"Unnamed sequence\")]\n\tUnnamedSeq,\n\n\t#[error(\"char is unsupported\")]\n\tChar,\n\t#[error(\"byte array is unsupported\")]\n\tBytes,\n\t#[error(\"unit is unsupported\")]\n\tUnit,\n\t#[error(\"enums with non-unit variants are not supported\")]\n\tComplexEnum,\n\t#[error(\"maps are not supported\")]\n\tMap\n}\n\nimpl ser::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":38,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","mod.rs"],"content":"use itoa::Integer;\nuse paste::paste;\nuse serde::ser::{\n\tself, Serialize, SerializeSeq, SerializeStruct, SerializeTuple,\n\tSerializeTupleStruct\n};\n\nmod error;\npub use error::Error;\n\npub struct Serializer {\n\t/// Buffer that the output gets written to.\n\tbuf: String,\n\n\t/// Set to true for pretty output.\n\tpretty: bool,\n\n\t/// The current level of nesting\n\tlvl: usize,\n\n\t/// The indentation (in levels) of the current line\n\tindent: usize,\n\n\t/// An itoa::Buffer to re-use when printing integers\n\titoa_buffer: itoa::Buffer\n}\n\nimpl Serializer {\n\tfn new(pretty: bool) -> Self {\n\t\tSelf {\n\t\t\tbuf: String::new(),\n\t\t\tpretty,\n\t\t\tlvl: 0,\n\t\t\tindent: 0,\n\t\t\titoa_buffer: itoa::Buffer::new()\n\t\t}\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn to_string<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(false);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\npub fn to_string_pretty<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(true);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\nimpl Serializer {\n\tfn newline(&mut self) {\n\t\tself.buf += \"\\n\";\n\t\tfor _ in 0..self.lvl {\n\t\t\tself.buf += \"  \";\n\t\t}\n\t\tself.indent = self.lvl;\n\t}\n\n\tfn begin_sexpr(&mut self, name: &str) {\n\t\tif self.lvl > 0 {\n\t\t\tif self.pretty {\n\t\t\t\tself.newline();\n\t\t\t} else {\n\t\t\t\tself.buf += \" \";\n\t\t\t}\n\t\t}\n\t\tself.lvl += 1;\n\t\tself.buf += \"(\";\n\t\tself.buf += name;\n\t}\n\n\tfn end_sexpr(&mut self) {\n\t\tself.lvl -= 1;\n\t\tself.buf += \")\";\n\t}\n\n\tfn write_integer<I: Integer>(&mut self, v: I) {\n\t\tself.buf += \" \";\n\t\tself.buf += self.itoa_buffer.format(v);\n\t}\n\n\tfn write_float<F: ToString>(&mut self, v: F) {\n\t\tself.buf += \" \";\n\t\tself.buf += &v.to_string();\n\t}\n\n\tfn write_str(&mut self, v: &str, aggressive_quotes: bool) {\n\t\tself.buf += \" \";\n\n\t\tconst CHARS: &[char] = &[' ', '\\t', '\\n', '\\r', '(', ')', '\"'];\n\t\tlet need_quotes = v.is_empty()\n\t\t\t|| match aggressive_quotes {\n\t\t\t\ttrue => v.chars().any(|ch| !ch.is_ascii_alphabetic() && ch != '_'),\n\t\t\t\tfalse => v.contains(CHARS)\n\t\t\t};\n\n\t\tif need_quotes {\n\t\t\tself.buf += r#\"\"\"#;\n\t\t\tself.buf += &v.replace('\\\\', r\"\\\\\").replace('\"', r#\"\\\"\"#);\n\t\t\tself.buf += r#\"\"\"#;\n\t\t} else {\n\t\t\tself.buf += v;\n\t\t}\n\t}\n}\n\nmacro_rules! serialize_type_error {\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n}\n\ntype Impossible<T = (), E = Error> = serde::ser::Impossible<T, E>;\n\nimpl<'a> ser::Serializer for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Impossible;\n\ttype SerializeTuple = Impossible;\n\ttype SerializeTupleStruct = Self;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = Self;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_bool(self, bool);\n\t\tfn serialize_i8(self, i8);\n\t\tfn serialize_i16(self, i16);\n\t\tfn serialize_i32(self, i32);\n\t\tfn serialize_i64(self, i64);\n\t\tfn serialize_i128(self, i128);\n\t\tfn serialize_u8(self, u8);\n\t\tfn serialize_u16(self, u16);\n\t\tfn serialize_u32(self, u32);\n\t\tfn serialize_u64(self, u64);\n\t\tfn serialize_u128(self, u128);\n\t\tfn serialize_f32(self, f32);\n\t\tfn serialize_f64(self, f64);\n\t\tfn serialize_char(self, char);\n\t\tfn serialize_str(self, &str);\n\t\tfn serialize_bytes(self, &[u8]);\n\t\tfn serialize_none(self);\n\t\tfn serialize_some<T>(self, &T);\n\t\tfn serialize_unit(self);\n\t\tfn serialize_unit_variant(self, &'static str, u32, &'static str);\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T);\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_seq(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_tuple(self, usize) -> Result<Impossible>;\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.begin_sexpr(name);\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.begin_sexpr(name);\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self,\n\t\t\tname: None\n\t\t})?;\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_tuple_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize\n\t) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n\n\tfn serialize_struct(self, name: &'static str, _len: usize) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n}\n\nimpl<'a> SerializeTupleStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\t// TODO this should probably not be self\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: Some(key)\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\n/// This serializer will serialize all fields. It needs the field name for booleans and\n/// sequences.\nstruct Field<'a> {\n\tser: &'a mut Serializer,\n\tname: Option<&'static str>\n}\n\nmacro_rules! serialize_integer {\n\t($($integer:ty)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<serialize_ $integer>](self, v: $integer) -> Result<()> {\n\t\t\t\t\tself.ser.write_integer(v);\n\t\t\t\t\tOk(())\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a> ser::Serializer for Field<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Sequence<'a>;\n\ttype SerializeTuple = Sequence<'a>;\n\ttype SerializeTupleStruct = &'a mut Serializer;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = &'a mut Serializer;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_char(self, char) = Error::Char;\n\t\tfn serialize_bytes(self, &[u8]) = Error::Bytes;\n\t\tfn serialize_unit(self) = Error::Unit;\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T) = Error::ComplexEnum;\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible> = Error::Map;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t}\n\n\tfn serialize_bool(self, v: bool) -> Result<()> {\n\t\tlet name = self.name.ok_or(Error::UnnamedBoolean)?;\n\t\tif v {\n\t\t\tself.serialize_str(name)?;\n\t\t}\n\t\tOk(())\n\t}\n\n\tserialize_integer! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128\n\t}\n\n\tfn serialize_f32(self, v: f32) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_f64(self, v: f64) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_str(self, v: &str) -> Result<()> {\n\t\tself.ser.write_str(v, true);\n\t\tOk(())\n\t}\n\n\tfn serialize_none(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn serialize_some<T>(self, v: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tv.serialize(self)\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.ser.serialize_unit_struct(name)\n\t}\n\n\tfn serialize_unit_variant(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variant_index: u32,\n\t\tvariant: &'static str\n\t) -> Result<()> {\n\t\tself.ser.write_str(variant, false);\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.ser.serialize_newtype_struct(name, value)\n\t}\n\n\tfn serialize_seq(self, _len: Option<usize>) -> Result<Sequence<'a>> {\n\t\tlet name = self.name.ok_or(Error::UnnamedSeq)?;\n\t\tlet close_sexpr = match name {\n\t\t\t\"\" => false,\n\t\t\tname => {\n\t\t\t\tself.ser.begin_sexpr(name);\n\t\t\t\ttrue\n\t\t\t}\n\t\t};\n\t\tOk(Sequence::new(self.ser, close_sexpr))\n\t}\n\n\tfn serialize_tuple(self, len: usize) -> Result<Sequence<'a>> {\n\t\tself.serialize_seq(Some(len))\n\t}\n\n\tfn serialize_tuple_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\tlen: usize\n\t) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_tuple_struct(name, len)\n\t}\n\n\tfn serialize_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\tlen: usize\n\t) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_struct(name, len)\n\t}\n}\n\n/// A sequence / tuple serializer that optionally closes an s-expr afterwards\nstruct Sequence<'a> {\n\tser: &'a mut Serializer,\n\tclose_sexpr: bool\n}\n\nimpl<'a> Sequence<'a> {\n\tfn new(ser: &'a mut Serializer, close_sexpr: bool) -> Self {\n\t\tSelf { ser, close_sexpr }\n\t}\n}\n\nimpl<'a> SerializeSeq for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self.ser,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tif self.close_sexpr {\n\t\t\tself.ser.end_sexpr();\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeTuple for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tSerializeSeq::serialize_element(self, value)\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tSerializeSeq::end(self)\n\t}\n}\n","traces":[{"line":29,"address":[239011,238848],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":31,"address":[238875],"length":1,"stats":{"Line":2},"fn_name":null},{"line":35,"address":[238890],"length":1,"stats":{"Line":2},"fn_name":null},{"line":42,"address":[203436,203872,205872,203472,205436,205036,204672,204272,205836,204636,203836,205072,205472,203072,204236,206236],"length":1,"stats":{"Line":10},"fn_name":"to_string<test::Font>"},{"line":46,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":51,"address":[202272,200639,201072,202639,201039,200272,202239,203039,201839,199872,200239,202672,201439,201872,200672,201472],"length":1,"stats":{"Line":9},"fn_name":"to_string_pretty<test::Position>"},{"line":55,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":17},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":61,"address":[239024],"length":1,"stats":{"Line":1},"fn_name":"newline"},{"line":62,"address":[239038],"length":1,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[239060,239182],"length":1,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[239197],"length":1,"stats":{"Line":1},"fn_name":null},{"line":66,"address":[239164],"length":1,"stats":{"Line":1},"fn_name":null},{"line":69,"address":[239216],"length":1,"stats":{"Line":2},"fn_name":"begin_sexpr"},{"line":70,"address":[239250],"length":1,"stats":{"Line":2},"fn_name":null},{"line":71,"address":[239288],"length":1,"stats":{"Line":1},"fn_name":null},{"line":72,"address":[239323],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[239299],"length":1,"stats":{"Line":1},"fn_name":null},{"line":77,"address":[239262,239339,239362],"length":1,"stats":{"Line":4},"fn_name":null},{"line":78,"address":[239343],"length":1,"stats":{"Line":2},"fn_name":null},{"line":79,"address":[239407],"length":1,"stats":{"Line":2},"fn_name":null},{"line":82,"address":[239424],"length":1,"stats":{"Line":2},"fn_name":"end_sexpr"},{"line":83,"address":[239437,239489],"length":1,"stats":{"Line":2},"fn_name":null},{"line":84,"address":[239470],"length":1,"stats":{"Line":2},"fn_name":null},{"line":87,"address":[181744,181968,181280,181040,181856,181632,180928,181168,181408,181520],"length":1,"stats":{"Line":2},"fn_name":"write_integer<u16>"},{"line":88,"address":[181074,181993,181435,180955,181190,181544,181657,181880,181766,181314],"length":1,"stats":{"Line":2},"fn_name":null},{"line":89,"address":[181106,181907,181346,181216,181462,181792,180982,181683,182019,181571],"length":1,"stats":{"Line":2},"fn_name":null},{"line":92,"address":[182253,182080,182445,182272],"length":1,"stats":{"Line":1},"fn_name":"write_float<f32>"},{"line":93,"address":[182292,182100],"length":1,"stats":{"Line":1},"fn_name":null},{"line":94,"address":[182361,182139,182169,182331],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[239536,240072],"length":1,"stats":{"Line":2},"fn_name":"write_str"},{"line":98,"address":[239597],"length":1,"stats":{"Line":2},"fn_name":null},{"line":101,"address":[239745,239624,239653],"length":1,"stats":{"Line":4},"fn_name":null},{"line":102,"address":[239647],"length":1,"stats":{"Line":2},"fn_name":null},{"line":103,"address":[182464,182477],"length":1,"stats":{"Line":6},"fn_name":"{closure#0}"},{"line":104,"address":[239677],"length":1,"stats":{"Line":1},"fn_name":null},{"line":107,"address":[239658],"length":1,"stats":{"Line":2},"fn_name":null},{"line":108,"address":[239787],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[239824],"length":1,"stats":{"Line":1},"fn_name":null},{"line":110,"address":[240092],"length":1,"stats":{"Line":1},"fn_name":null},{"line":112,"address":[239772],"length":1,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[242960,243248,243328,243408,243632,242736,242592,243168,243760,242432,243104,243472,242512,242880,243040,242800,242672,243552,243696],"length":1,"stats":{"Line":0},"fn_name":"serialize_bool"},{"line":123,"address":[242898,243574,243266,242822,243494,243346,243056,242753,242980,243644,243190,243708,243121,242453,243826,243424,242612,242688,242530],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[243968,243888,244160,244240,244032],"length":1,"stats":{"Line":0},"fn_name":"serialize_seq"},{"line":133,"address":[243910,244103,244182,244311,243985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[244496,244368,244432],"length":1,"stats":{"Line":0},"fn_name":"serialize_char"},{"line":143,"address":[244511,244387,244457],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[244560,244672,244736],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple_variant"},{"line":153,"address":[244798,244697,244622],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[240128],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_struct"},{"line":206,"address":[240196],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[240206],"length":1,"stats":{"Line":1},"fn_name":null},{"line":208,"address":[240221],"length":1,"stats":{"Line":1},"fn_name":null},{"line":211,"address":[209344,208944],"length":1,"stats":{"Line":2},"fn_name":"serialize_newtype_struct<alloc::string::String>"},{"line":215,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":221,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":224,"address":[240240],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple_struct"},{"line":229,"address":[240311],"length":1,"stats":{"Line":1},"fn_name":null},{"line":230,"address":[240331],"length":1,"stats":{"Line":1},"fn_name":null},{"line":233,"address":[240352],"length":1,"stats":{"Line":2},"fn_name":"serialize_struct"},{"line":234,"address":[240423],"length":1,"stats":{"Line":2},"fn_name":null},{"line":235,"address":[240443],"length":1,"stats":{"Line":2},"fn_name":null},{"line":243,"address":[211312],"length":1,"stats":{"Line":1},"fn_name":"serialize_field<f32>"},{"line":247,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":248,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":249,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":253,"address":[240464],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":254,"address":[240496],"length":1,"stats":{"Line":1},"fn_name":null},{"line":255,"address":[240511],"length":1,"stats":{"Line":1},"fn_name":null},{"line":263,"address":[210752,209968,209856,210080,210192,210304,210864,210976,211088,211200,210528,210416,209744,210640],"length":1,"stats":{"Line":14},"fn_name":"serialize_field<test::_::{impl#0}::serialize::__SerializeWith>"},{"line":268,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":269,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":274,"address":[240528],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":275,"address":[240560],"length":1,"stats":{"Line":1},"fn_name":null},{"line":276,"address":[240575],"length":1,"stats":{"Line":1},"fn_name":null},{"line":291,"address":[244976,245248,245376,245104,245440,245040,244848,244912,245184,245312],"length":1,"stats":{"Line":2},"fn_name":"serialize_i8"},{"line":292,"address":[245341,244933,245005,245072,245154,245408,244867,245269,245203,245490],"length":1,"stats":{"Line":2},"fn_name":null},{"line":293,"address":[245023,244887,245090,244953,245508,245426,245172,245289,245223,245359],"length":1,"stats":{"Line":2},"fn_name":null},{"line":313,"address":[244379],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[244449],"length":1,"stats":{"Line":0},"fn_name":null},{"line":315,"address":[244503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[244613],"length":1,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[244689],"length":1,"stats":{"Line":0},"fn_name":null},{"line":322,"address":[244789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":325,"address":[240592],"length":1,"stats":{"Line":1},"fn_name":"serialize_bool"},{"line":326,"address":[240633,240775],"length":1,"stats":{"Line":1},"fn_name":null},{"line":327,"address":[240757,241050],"length":1,"stats":{"Line":2},"fn_name":null},{"line":328,"address":[240947,241060],"length":1,"stats":{"Line":1},"fn_name":null},{"line":330,"address":[240924],"length":1,"stats":{"Line":1},"fn_name":null},{"line":337,"address":[241216],"length":1,"stats":{"Line":1},"fn_name":"serialize_f32"},{"line":338,"address":[241235],"length":1,"stats":{"Line":1},"fn_name":null},{"line":339,"address":[241252],"length":1,"stats":{"Line":1},"fn_name":null},{"line":342,"address":[241264],"length":1,"stats":{"Line":0},"fn_name":"serialize_f64"},{"line":343,"address":[241283],"length":1,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[241300],"length":1,"stats":{"Line":0},"fn_name":null},{"line":347,"address":[241312],"length":1,"stats":{"Line":2},"fn_name":"serialize_str"},{"line":348,"address":[241362],"length":1,"stats":{"Line":2},"fn_name":null},{"line":349,"address":[241385],"length":1,"stats":{"Line":1},"fn_name":null},{"line":352,"address":[241408],"length":1,"stats":{"Line":1},"fn_name":"serialize_none"},{"line":353,"address":[241411],"length":1,"stats":{"Line":1},"fn_name":null},{"line":356,"address":[208544,208624,208464,208384],"length":1,"stats":{"Line":3},"fn_name":"serialize_some<i16>"},{"line":360,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":363,"address":[241424],"length":1,"stats":{"Line":0},"fn_name":"serialize_unit_struct"},{"line":364,"address":[241445],"length":1,"stats":{"Line":0},"fn_name":null},{"line":367,"address":[241472],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_variant"},{"line":373,"address":[241540],"length":1,"stats":{"Line":1},"fn_name":null},{"line":374,"address":[241560],"length":1,"stats":{"Line":1},"fn_name":null},{"line":377,"address":[208704],"length":1,"stats":{"Line":0},"fn_name":"serialize_newtype_struct<f32>"},{"line":381,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":384,"address":[241584],"length":1,"stats":{"Line":1},"fn_name":"serialize_seq"},{"line":385,"address":[241776,241625],"length":1,"stats":{"Line":1},"fn_name":null},{"line":386,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":387,"address":[241924,241971,241746],"length":1,"stats":{"Line":3},"fn_name":null},{"line":388,"address":[241945],"length":1,"stats":{"Line":1},"fn_name":null},{"line":389,"address":[241961],"length":1,"stats":{"Line":1},"fn_name":null},{"line":390,"address":[242014],"length":1,"stats":{"Line":1},"fn_name":null},{"line":393,"address":[241984,242037],"length":1,"stats":{"Line":2},"fn_name":null},{"line":396,"address":[242064],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple"},{"line":397,"address":[242080],"length":1,"stats":{"Line":0},"fn_name":null},{"line":400,"address":[242160],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple_struct"},{"line":405,"address":[242187],"length":1,"stats":{"Line":1},"fn_name":null},{"line":408,"address":[242208],"length":1,"stats":{"Line":1},"fn_name":"serialize_struct"},{"line":413,"address":[242235],"length":1,"stats":{"Line":1},"fn_name":null},{"line":424,"address":[242256],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":433,"address":[208752,208848],"length":1,"stats":{"Line":2},"fn_name":"serialize_element<&test::Pad>"},{"line":437,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":438,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":439,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":443,"address":[242304],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":444,"address":[242338],"length":1,"stats":{"Line":1},"fn_name":null},{"line":445,"address":[242368],"length":1,"stats":{"Line":1},"fn_name":null},{"line":447,"address":[242352],"length":1,"stats":{"Line":1},"fn_name":null},{"line":459,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":462,"address":[242384],"length":1,"stats":{"Line":0},"fn_name":"end"},{"line":463,"address":[242411],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":115,"coverable":143},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","tests","test.rs"],"content":"use indoc::indoc;\nuse paste::paste;\nuse pretty_assertions::assert_eq;\nuse serde::{de::DeserializeOwned, Deserialize, Serialize};\nuse serde_sexpr::Literal;\nuse std::fmt::Debug;\n\nfn assert_eq_parsed<T>(input: &str, expected: &T)\nwhere\n\tT: Debug + DeserializeOwned + PartialEq\n{\n\tlet parsed: T = serde_sexpr::from_str(input).expect(\"Failed to parse input\");\n\tassert_eq!(&parsed, expected);\n}\n\nfn assert_eq_ugly<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written = serde_sexpr::to_string(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected);\n}\n\nfn assert_eq_pretty<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written =\n\t\tserde_sexpr::to_string_pretty(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected.trim_end_matches('\\n'));\n}\n\nmacro_rules! test_case {\n\t(name: $name:ident,input: $input:expr,value: $value:expr) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n\n\t(\n\t\tname: $name:ident,input: $input:expr,pretty: $pretty:expr,value: $value:expr\n\t) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\t\t\tconst [<TEST_CASE_PRETTY_ $name:upper>]: &str = $pretty;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_PRETTY_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_PRETTY_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"locked\")]\nstruct Locked;\n\ntest_case! {\n\tname: locked,\n\tinput: \"(locked)\",\n\tvalue: Locked\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"attr\")]\nstruct Attribute(String);\n\ntest_case! {\n\tname: attr,\n\tinput: \"(attr smd)\",\n\tvalue: Attribute(\"smd\".to_owned())\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"descr\")]\nstruct Description(String);\n\ntest_case! {\n\tname: descr,\n\tinput: r#\"(descr \"Hello \\\"World\\\", this \\\"\\\\\\\" is an amazing backspace! \\\\\")\"#,\n\tvalue: Description(\n\t\tr#\"Hello \"World\", this \"\\\" is an amazing backspace! \\\"#.to_owned()\n\t)\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"at\")]\nstruct Position {\n\tx: f32,\n\ty: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\trot: Option<i16>\n}\n\ntest_case! {\n\tname: position_without_rot,\n\tinput: \"(at 1.23 -4.56)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: None\n\t}\n}\n\ntest_case! {\n\tname: position_with_rot,\n\tinput: \"(at 1.23 -4.56 -90)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: Some(-90)\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"size\")]\nstruct Size(f32, f32);\n\ntest_case! {\n\tname: size,\n\tinput: \"(size 1.23 4.56)\",\n\tvalue: Size(1.23, 4.56)\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"thickness\")]\nstruct Thickness(f32);\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"font\")]\nstruct Font {\n\tsize: Size,\n\n\t// This attribute enables our custom deserialize logic.\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tthickness: Option<Thickness>,\n\n\tbold: bool\n}\n\ntest_case! {\n\tname: font,\n\tinput: \"(font (size 1.27 1.27))\",\n\tpretty: indoc!(r#\"\n\t\t(font\n\t\t  (size 1.27 1.27))\n\t\"#),\n\tvalue: Font {\n\t\tsize: Size(1.27, 1.27),\n\t\tthickness: None,\n\t\tbold: false\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\nenum PadType {\n\t#[serde(rename = \"thru-hole\")]\n\tThroughHole,\n\n\t#[serde(rename = \"smd\")]\n\tSmd\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(rename_all = \"lowercase\")]\nenum PadShape {\n\tCircle,\n\tRect\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"drill\")]\nstruct Drill {\n\toval: bool,\n\tdrill1: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill2: Option<f32>\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"pad\")]\nstruct Pad {\n\tindex: Literal,\n\tty: PadType,\n\tshape: PadShape,\n\tat: Position,\n\tsize: Size,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill: Option<Drill>,\n\tlayers: Vec<String>\n}\n\ntest_case! {\n\tname: pad_without_drill,\n\tinput: r#\"(pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 smd rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::Smd,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: None,\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill 0.635) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill 0.635)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: Some(Drill {\n\t\t\toval: false,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: None\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_oval_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill oval 0.635 0.847) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill oval 0.635 0.847)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: Some(Drill {\n\t\t\toval: true,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: Some(0.847)\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"footprint\")]\nstruct Footprint {\n\tlibrary_link: String,\n\n\t#[serde(default, rename = \"\")]\n\tpads: Vec<Pad>\n}\n\ntest_case! {\n\tname: footprint_without_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\")\"#,\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_one_pad,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![Pad {\n\t\t\tindex: 1.into(),\n\t\t\tty: PadType::Smd,\n\t\t\tshape: PadShape::Rect,\n\t\t\tat: Position {\n\t\t\t\tx: 0.0,\n\t\t\t\ty: 0.0,\n\t\t\t\trot: None\n\t\t\t},\n\t\t\tsize: Size(1.27, 1.27),\n\t\t\tdrill: None,\n\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t}]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_two_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")) (pad 2 smd rect (at 2.54 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\"))\n\t\t  (pad 2 smd rect\n\t\t    (at 2.54 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![\n\t\t\tPad {\n\t\t\t\tindex: 1.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 0.0,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size(1.27, 1.27),\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t},\n\t\t\tPad {\n\t\t\t\tindex: 2.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 2.54,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size(1.27, 1.27),\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t}\n\t\t]\n\t}\n}\n","traces":[],"covered":0,"coverable":0}]}