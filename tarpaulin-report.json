{"files":[{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","error.rs"],"content":"use serde::de;\nuse std::fmt::{self, Debug, Display, Formatter};\nuse thiserror::Error;\n\n#[derive(Clone, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to deserialize anything but a struct at root\n\t/// level.\n\t#[error(\"Expected to deserialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if the input ends unexpectedly.\n\t#[error(\"Unexpected end of input\")]\n\tEof,\n\n\t/// This error will be returned if an opening s-expr was expected, but some other token was\n\t/// found.\n\t#[error(\"Expected s-expr, found token '{0}'\")]\n\tExpectedSExpr(char),\n\n\t/// This error will be returned if an opening s-expr with a certain name was expected, but\n\t/// some other token was found.\n\t#[error(\"Expected s-expr identifier {0}, found {1}\")]\n\tExpectedSExprIdentifier(&'static str, String),\n\n\t/// This error will be returned if the end of the s-expr was expected, but some other token\n\t/// was found.\n\t#[error(\"Expected end of expression\")]\n\tExpectedEoe,\n\n\t/// This error will be returned if an identifier was expected, but some other token was found.\n\t#[error(\"Expected identifier\")]\n\tExpectedIdentifier,\n\n\t/// This error will be returned if a number was expected, but some other token was found.\n\t#[error(\"Expected number\")]\n\tExpectedNumber,\n\n\t/// This error will be returned if a string was expected, but some other token was found.\n\t#[error(\"Expected string\")]\n\tExpectedString,\n\n\t/// This error will be returned if an option was requested. [`Option`] is **not supported**\n\t/// by this data format.\n\t#[error(\"std::option::Option cannot be deserialized by this data format\")]\n\tDeserializeOption,\n\n\t/// This error will be returned if an s-expr is found, but its name (and fields) were not\n\t/// supplied to the deserializer (e.g. `deserialize_any` was called).\n\t#[error(\"Missing s-expr type info for {0}\")]\n\tMissingSExprInfo(String),\n\n\t/// This error will be returned when attempting to deserialize a non-unit enum variant.\n\t#[error(\"Non-unit enum variants are not supported\")]\n\tNonUnitEnumVariant,\n\n\t/// This error will be returned if there were trailing tokens after the deserialization\n\t/// finished.\n\t#[error(\"Trailing tokens\")]\n\tTrailingTokens\n}\n\nimpl Debug for Error {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tDisplay::fmt(self, f)\n\t}\n}\n\nimpl de::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":67,"address":[219216],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":68,"address":[219230],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[219120,219185],"length":1,"stats":{"Line":1},"fn_name":"custom<core::fmt::Arguments>"},{"line":74,"address":[219133],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":2,"coverable":4},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","de","mod.rs"],"content":"use paste::paste;\nuse serde::{\n\tde::{\n\t\tself, DeserializeSeed, EnumAccess, MapAccess, SeqAccess, VariantAccess,\n\t\tVisitor\n\t},\n\tforward_to_deserialize_any, Deserialize\n};\nuse std::{borrow::Cow, fmt::Display, str::FromStr};\n\nmod error;\npub use error::Error;\n\npub struct Deserializer<'de> {\n\tinput: &'de str\n}\n\nimpl<'de> Deserializer<'de> {\n\tpub fn from_str(input: &'de str) -> Self {\n\t\tSelf { input }\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn from_str<'de, T>(input: &'de str) -> Result<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tlet mut deserializer = Deserializer::from_str(input);\n\tlet value = T::deserialize(&mut deserializer)?;\n\tOk(value)\n}\n\nenum Token {\n\tString,\n\tInt,\n\tFloat,\n\tSExpr\n}\n\nimpl<'de> Deserializer<'de> {\n\tfn check_no_trailing_tokens(&mut self) -> Result<()> {\n\t\tself.skip_whitespace();\n\t\tif !self.input.is_empty() {\n\t\t\treturn Err(Error::TrailingTokens);\n\t\t}\n\t\tOk(())\n\t}\n\n\tfn skip_whitespace(&mut self) {\n\t\tself.input = self.input.trim_start();\n\t}\n\n\tfn peek_char(&self) -> Result<char> {\n\t\tself.input.chars().next().ok_or(Error::Eof)\n\t}\n\n\tfn next_char(&mut self) -> Result<char> {\n\t\tlet ch = self.peek_char()?;\n\t\tself.input = &self.input[ch.len_utf8()..];\n\t\tOk(ch)\n\t}\n\n\tfn peek_token(&self) -> Result<Token> {\n\t\tlet mut chars = self.input.chars().peekable();\n\t\tif chars.peek().is_none() {\n\t\t\treturn Err(Error::Eof);\n\t\t}\n\n\t\tlet mut int = true;\n\t\twhile let Some(ch) = chars.next() {\n\t\t\tmatch ch {\n\t\t\t\t'(' => return Ok(Token::SExpr),\n\t\t\t\t'.' => {\n\t\t\t\t\tint = false;\n\t\t\t\t},\n\t\t\t\t'-' => {},\n\t\t\t\tch if ch.is_ascii_whitespace() => break,\n\t\t\t\tch if ch.is_ascii_digit() => {},\n\t\t\t\t_ => return Ok(Token::String)\n\t\t\t};\n\t\t}\n\n\t\tOk(match int {\n\t\t\ttrue => Token::Int,\n\t\t\tfalse => Token::Float\n\t\t})\n\t}\n\n\tfn peek_identifier(&self) -> Option<&'de str> {\n\t\tlet len: usize = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn None;\n\t\t}\n\t\tSome(&self.input[..len])\n\t}\n\n\tfn peek_sexpr_identifier(&self) -> Result<&'de str> {\n\t\tlet mut chars = self.input.chars();\n\t\tlet next = chars.next().ok_or(Error::Eof)?;\n\t\tif next != '(' {\n\t\t\treturn Err(Error::ExpectedSExpr(next));\n\t\t}\n\t\tlet paren = '('.len_utf8();\n\t\tlet len: usize = chars\n\t\t\t.take_while(|ch| ch.is_ascii_alphabetic() || *ch == '_')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn Err(Error::ExpectedIdentifier);\n\t\t}\n\t\tOk(&self.input[paren..paren + len])\n\t}\n\n\tfn consume(&mut self, len: usize) -> Result<()> {\n\t\tif self.input.len() < len {\n\t\t\treturn Err(Error::Eof);\n\t\t}\n\t\tself.input = &self.input[len..];\n\t\tOk(())\n\t}\n\n\tfn parse_number<T>(&mut self) -> Result<T>\n\twhere\n\t\tT: FromStr,\n\t\tT::Err: Display\n\t{\n\t\tlet len = self\n\t\t\t.input\n\t\t\t.chars()\n\t\t\t.take_while(|ch| !ch.is_ascii_whitespace() && *ch != ')')\n\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t.sum();\n\t\tif len == 0 {\n\t\t\treturn Err(Error::ExpectedNumber);\n\t\t}\n\t\tlet number = &self.input[..len];\n\t\tlet number = number\n\t\t\t.parse()\n\t\t\t.map_err(|err: T::Err| Error::Message(err.to_string()))?;\n\t\tself.input = &self.input[len..];\n\t\tOk(number)\n\t}\n\n\tfn parse_string(&mut self) -> Result<Cow<'de, str>> {\n\t\tmatch self.peek_char()? {\n\t\t\t'(' => Err(Error::ExpectedString),\n\n\t\t\t'\"' => {\n\t\t\t\tself.consume('\"'.len_utf8())?;\n\t\t\t\tlet mut value = String::new();\n\t\t\t\tloop {\n\t\t\t\t\tlet len: usize = self\n\t\t\t\t\t\t.input\n\t\t\t\t\t\t.chars()\n\t\t\t\t\t\t.take_while(|ch| *ch != '\"')\n\t\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t\t.sum();\n\t\t\t\t\tif len >= self.input.len() {\n\t\t\t\t\t\treturn Err(Error::Eof);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet mut start_idx = value.chars().count();\n\t\t\t\t\tvalue += &self.input[..len + 1];\n\t\t\t\t\tself.input = &self.input[len + 1..];\n\t\t\t\t\twhile let Some(idx) = (&value[start_idx..]).find(r\"\\\\\") {\n\t\t\t\t\t\tlet idx = start_idx + idx;\n\t\t\t\t\t\tvalue.replace_range(idx..idx + 2, r\"\\\");\n\t\t\t\t\t\tstart_idx = idx + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif value.ends_with(r#\"\\\"\"#) && start_idx < value.len() - 1 {\n\t\t\t\t\t\tvalue.remove(value.len() - 2);\n\t\t\t\t\t} else if value.ends_with(r#\"\"\"#) {\n\t\t\t\t\t\tvalue.remove(value.len() - 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tunreachable!();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tOk(value.into())\n\t\t\t},\n\n\t\t\t_ => {\n\t\t\t\tlet len = self\n\t\t\t\t\t.input\n\t\t\t\t\t.chars()\n\t\t\t\t\t.take_while(|ch| !ch.is_ascii_whitespace() && *ch != ')')\n\t\t\t\t\t.map(|ch| ch.len_utf8())\n\t\t\t\t\t.sum();\n\t\t\t\tif len == 0 {\n\t\t\t\t\treturn Err(Error::Eof);\n\t\t\t\t}\n\t\t\t\tlet value = &self.input[..len];\n\t\t\t\tself.input = &self.input[len..];\n\t\t\t\tOk(value.into())\n\t\t\t}\n\t\t}\n\t}\n}\n\nimpl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, _: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\treturn Err(Error::ExpectedStruct);\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_map(SExpr::new(self, name, fields)?)?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self, name)?;\n\t\tif self.next_char()? != ')' {\n\t\t\treturn Err(Error::ExpectedEoe);\n\t\t}\n\t\tself.check_no_trailing_tokens()?;\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_seq(SExprTuple::new(self, name)?)?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet v = visitor.visit_seq(SExprTuple::new(self, name)?)?;\n\t\tself.check_no_trailing_tokens()?;\n\t\tOk(v)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit seq tuple map enum identifier ignored_any\n\t}\n}\n\n/// Deserialise an s-expr.\nstruct SExpr<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tfields: &'static [&'static str],\n\tindex: usize,\n\tskip_to: Option<usize>\n}\n\nimpl<'a, 'de> SExpr<'a, 'de> {\n\tfn consume_beginning(\n\t\tde: &mut Deserializer<'de>,\n\t\tname: &'static str\n\t) -> Result<()> {\n\t\tde.skip_whitespace();\n\t\tlet peek = de.peek_sexpr_identifier()?;\n\t\tif peek != name {\n\t\t\treturn Err(Error::ExpectedSExprIdentifier(name, peek.to_owned()));\n\t\t}\n\t\tde.consume(name.len() + '('.len_utf8())?;\n\t\tOk(())\n\t}\n\n\tfn new(\n\t\tde: &'a mut Deserializer<'de>,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str]\n\t) -> Result<Self> {\n\t\tSelf::consume_beginning(de, name)?;\n\t\tOk(Self {\n\t\t\tde,\n\t\t\tfields,\n\t\t\tindex: 0,\n\t\t\tskip_to: None\n\t\t})\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tself.de.skip_whitespace();\n\t\tif self.skip_to.is_none() && self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(1)?;\n\t\t\t// technically we're done, but there could be booleans that are false, so we'll\n\t\t\t// deserialize those as None/false eventhough they don't exist in the input.\n\t\t\tself.skip_to = Some(self.fields.len() + 1);\n\t\t}\n\t\tOk(())\n\t}\n\n\tfn next_value_seed_impl<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tif self.index >= self.fields.len() {\n\t\t\tpanic!(\"There was no key and there is no value\");\n\t\t}\n\n\t\t// booleans are represented in this weird way where they are simply missing if they are\n\t\t// false. This means that if we detect a boolean ahead of our current index, we'll assume\n\t\t// everything inbetween is either None or false, and skip ahead.\n\t\tif let Some(skip_to) = self.skip_to {\n\t\t\tif skip_to == self.index {\n\t\t\t\tself.skip_to = None;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\treturn seed.deserialize(MissingField);\n\t\t}\n\t\tif let Some(identifier) = self.de.peek_identifier() {\n\t\t\tif self.fields[self.index] == identifier {\n\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\treturn seed.deserialize(TrueField);\n\t\t\t}\n\t\t\tfor i in self.index + 1..self.fields.len() {\n\t\t\t\tif self.fields[i] == identifier {\n\t\t\t\t\tself.de.consume(identifier.len())?;\n\t\t\t\t\tself.skip_to = Some(i);\n\t\t\t\t\treturn seed.deserialize(MissingField);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tseed.deserialize(Field::new(self.de, Some(self.fields[self.index])))\n\t}\n}\n\nimpl<'a, 'de> MapAccess<'de> for SExpr<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_key_seed<K>(&mut self, seed: K) -> Result<Option<K::Value>>\n\twhere\n\t\tK: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\n\t\tloop {\n\t\t\tif self.index >= self.fields.len() {\n\t\t\t\treturn Ok(None);\n\t\t\t}\n\n\t\t\t// special case: if the ident is empty (\"\") and we are set to skip it, don't even\n\t\t\t// return the field.\n\t\t\tif self.fields[self.index] == \"\" {\n\t\t\t\tif let Some(skip_to) = self.skip_to {\n\t\t\t\t\tif skip_to == self.index {\n\t\t\t\t\t\tself.skip_to = None;\n\t\t\t\t\t}\n\t\t\t\t\tself.index += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tseed.deserialize(FieldIdent(self.fields[self.index]))\n\t\t\t.map(Some)\n\t}\n\n\tfn next_value_seed<T>(&mut self, seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tlet value = self.next_value_seed_impl(seed)?;\n\t\tself.index += 1;\n\t\tself.check_eoe()?;\n\t\tOk(value)\n\t}\n}\n\n/// Deserialize an s-expr in tuple format. It cannot contain booleans.\nstruct SExprTuple<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tend: bool\n}\n\nimpl<'a, 'de> SExprTuple<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, name: &'static str) -> Result<Self> {\n\t\tSExpr::consume_beginning(de, name)?;\n\t\tOk(Self { de, end: false })\n\t}\n\n\tfn check_eoe(&mut self) -> Result<()> {\n\t\tif self.end {\n\t\t\treturn Ok(());\n\t\t}\n\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\tself.de.consume(')'.len_utf8())?;\n\t\t\tself.end = true;\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for SExprTuple<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.check_eoe()?;\n\t\tif self.end {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tlet value = seed.deserialize(Field::new(self.de, None))?;\n\t\tself.check_eoe()?;\n\t\tOk(Some(value))\n\t}\n}\n\n/// Deserialize a field's ident.\nstruct FieldIdent(&'static str);\n\nimpl<'de> de::Deserializer<'de> for FieldIdent {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_borrowed_str(self.0)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize a single boolean with value `true`.\nstruct TrueField;\n\nimpl<'de> de::Deserializer<'de> for TrueField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(true)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tbool i8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// Deserialize either a boolean with value `false` or an option with value `None`.\nstruct MissingField;\n\nimpl<'de> de::Deserializer<'de> for MissingField {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_none()\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tforward_to_deserialize_any! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64 char str string\n\t\tbytes byte_buf option unit unit_struct newtype_struct seq tuple\n\t\ttuple_struct map struct enum identifier ignored_any\n\t}\n}\n\n/// A field whose value does not match its ident. This means that if a boolean gets requested,\n/// we must return false without touching the input.\n///\n/// We still store the ident if we know it, so that we can parse a sequence like\n/// (<ident> <values..>). The empty ident (`\"\"`) is treated as a special case to consume\n/// the remaining fields of the current expression.\nstruct Field<'a, 'de> {\n\tde: &'a mut Deserializer<'de>,\n\tident: Option<&'static str>\n}\n\nimpl<'a, 'de> Field<'a, 'de> {\n\tfn new(de: &'a mut Deserializer<'de>, ident: Option<&'static str>) -> Self {\n\t\tSelf { de, ident }\n\t}\n}\n\nmacro_rules! forward_to_parse_number {\n\t($($ident:ident)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<deserialize_ $ident>]<V>(self, visitor: V) -> Result<V::Value>\n\t\t\t\twhere\n\t\t\t\t\tV: Visitor<'de>\n\t\t\t\t{\n\t\t\t\t\tvisitor.[<visit_ $ident>](self.de.parse_number()?)\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de> de::Deserializer<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn deserialize_any<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tmatch self.de.peek_token()? {\n\t\t\tToken::Int if self.de.peek_char()? == '-' => {\n\t\t\t\tself.deserialize_i64(visitor)\n\t\t\t},\n\t\t\tToken::Int => self.deserialize_u64(visitor),\n\t\t\tToken::Float => self.deserialize_f64(visitor),\n\t\t\tToken::String => self.deserialize_string(visitor),\n\t\t\tToken::SExpr if Some(self.de.peek_sexpr_identifier()?) == self.ident => {\n\t\t\t\tself.deserialize_seq(visitor)\n\t\t\t},\n\t\t\tToken::SExpr => Err(Error::MissingSExprInfo(\n\t\t\t\tself.de.peek_sexpr_identifier()?.to_owned()\n\t\t\t))\n\t\t}\n\t}\n\n\tfn deserialize_bool<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_bool(false)\n\t}\n\n\tfn deserialize_str<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_string(visitor)\n\t}\n\n\tfn deserialize_string<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet value = self.de.parse_string()?;\n\t\tmatch value {\n\t\t\tCow::Borrowed(value) => visitor.visit_borrowed_str(value),\n\t\t\tCow::Owned(value) => visitor.visit_string(value)\n\t\t}\n\t}\n\n\tfn deserialize_option<V>(self, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\t// we'll need to know the type of Some (i.e. the s-expr tag) to see if it is present in\n\t\t// the input or not\n\t\t// however, serde doesn't give us this type of information, so we'll just error\n\t\treturn Err(Error::DeserializeOption);\n\t}\n\n\tfn deserialize_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tfields: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_map(SExpr::new(self.de, name, fields)?)\n\t}\n\n\tfn deserialize_unit<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet ident = match self.ident {\n\t\t\tSome(ident) => ident,\n\t\t\tNone => {\n\t\t\t\treturn Err(Error::MissingSExprInfo(\n\t\t\t\t\tself.de.peek_sexpr_identifier()?.to_owned()\n\t\t\t\t));\n\t\t\t}\n\t\t};\n\t\tself.deserialize_unit_struct(ident, visitor)\n\t}\n\n\tfn deserialize_unit_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tSExpr::consume_beginning(self.de, name)?;\n\t\tif self.de.next_char()? != ')' {\n\t\t\treturn Err(Error::ExpectedEoe);\n\t\t}\n\t\tvisitor.visit_unit()\n\t}\n\n\tfn deserialize_newtype_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_tuple_struct(name, 1, visitor)\n\t}\n\n\tfn deserialize_tuple_struct<V>(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize,\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_seq(SExprTuple::new(self.de, name)?)\n\t}\n\n\tfn deserialize_enum<V>(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variants: &'static [&'static str],\n\t\tvisitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tvisitor.visit_enum(self)\n\t}\n\n\tfn deserialize_seq<V>(self, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tlet ident = match self.ident {\n\t\t\tSome(ident) => ident,\n\t\t\tNone => {\n\t\t\t\treturn Err(Error::MissingSExprInfo(\n\t\t\t\t\tself.de.peek_sexpr_identifier()?.to_owned()\n\t\t\t\t));\n\t\t\t}\n\t\t};\n\t\tmatch ident {\n\t\t\t\"\" => {\n\t\t\t\t// special case: we'll return the remaining tokens of the current s-expr\n\t\t\t\tvisitor.visit_seq(self)\n\t\t\t},\n\t\t\t_ => visitor.visit_seq(SExprTuple::new(self.de, ident)?)\n\t\t}\n\t}\n\n\tfn deserialize_tuple<V>(self, _len: usize, visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tself.deserialize_seq(visitor)\n\t}\n\n\tforward_to_parse_number! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128 f32 f64\n\t}\n\n\tforward_to_deserialize_any! {\n\t\tchar bytes byte_buf map identifier ignored_any\n\t}\n}\n\nimpl<'a, 'de> SeqAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\n\tfn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tself.de.skip_whitespace();\n\t\tif self.de.peek_char()? == ')' {\n\t\t\treturn Ok(None);\n\t\t}\n\t\tseed.deserialize(Field::new(self.de, None)).map(Some)\n\t}\n}\n\nimpl<'a, 'de> EnumAccess<'de> for Field<'a, 'de> {\n\ttype Error = Error;\n\ttype Variant = UnitVariant;\n\n\tfn variant_seed<V>(self, seed: V) -> Result<(V::Value, Self::Variant)>\n\twhere\n\t\tV: DeserializeSeed<'de>\n\t{\n\t\tOk((seed.deserialize(self)?, UnitVariant))\n\t}\n}\n\n/// This will deserialize only unit variants.\nstruct UnitVariant;\n\nimpl<'de> VariantAccess<'de> for UnitVariant {\n\ttype Error = Error;\n\n\tfn unit_variant(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn newtype_variant_seed<T>(self, _seed: T) -> Result<T::Value>\n\twhere\n\t\tT: DeserializeSeed<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n\n\tfn tuple_variant<V>(self, _len: usize, _visitor: V) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n\n\tfn struct_variant<V>(\n\t\tself,\n\t\t_fields: &'static [&'static str],\n\t\t_visitor: V\n\t) -> Result<V::Value>\n\twhere\n\t\tV: Visitor<'de>\n\t{\n\t\tErr(Error::NonUnitEnumVariant)\n\t}\n}\n","traces":[{"line":19,"address":[232144],"length":1,"stats":{"Line":2},"fn_name":"from_str"},{"line":26,"address":[351680,352784,351344,352064,350960,353680,353296,352400,353008],"length":1,"stats":{"Line":10},"fn_name":"from_str<test::Attribute>"},{"line":30,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":31,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":32,"address":[],"length":0,"stats":{"Line":9},"fn_name":null},{"line":43,"address":[232192],"length":1,"stats":{"Line":1},"fn_name":"check_no_trailing_tokens"},{"line":44,"address":[232224],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[232234],"length":1,"stats":{"Line":2},"fn_name":null},{"line":46,"address":[232278],"length":1,"stats":{"Line":1},"fn_name":null},{"line":48,"address":[232265],"length":1,"stats":{"Line":2},"fn_name":null},{"line":51,"address":[232320],"length":1,"stats":{"Line":2},"fn_name":"skip_whitespace"},{"line":52,"address":[232337],"length":1,"stats":{"Line":2},"fn_name":null},{"line":55,"address":[232400],"length":1,"stats":{"Line":2},"fn_name":"peek_char"},{"line":56,"address":[232419],"length":1,"stats":{"Line":2},"fn_name":null},{"line":59,"address":[232496],"length":1,"stats":{"Line":1},"fn_name":"next_char"},{"line":60,"address":[232628,232526],"length":1,"stats":{"Line":1},"fn_name":null},{"line":61,"address":[232599,232729],"length":1,"stats":{"Line":2},"fn_name":null},{"line":62,"address":[232798],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[232816],"length":1,"stats":{"Line":1},"fn_name":"peek_token"},{"line":66,"address":[232841],"length":1,"stats":{"Line":1},"fn_name":null},{"line":67,"address":[232883],"length":1,"stats":{"Line":1},"fn_name":null},{"line":68,"address":[232937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[232922],"length":1,"stats":{"Line":1},"fn_name":null},{"line":72,"address":[232985,232930],"length":1,"stats":{"Line":2},"fn_name":null},{"line":73,"address":[233049],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[233148],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[233168],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[233160],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[233177,233218,233108],"length":1,"stats":{"Line":3},"fn_name":null},{"line":80,"address":[233305,233183,233282],"length":1,"stats":{"Line":3},"fn_name":null},{"line":81,"address":[233293],"length":1,"stats":{"Line":1},"fn_name":null},{"line":85,"address":[233260,233089],"length":1,"stats":{"Line":2},"fn_name":null},{"line":86,"address":[233247],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[233237],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[233328],"length":1,"stats":{"Line":1},"fn_name":"peek_identifier"},{"line":92,"address":[233348],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[258846,258816],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":96,"address":[258936,258912],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":98,"address":[233433],"length":1,"stats":{"Line":1},"fn_name":null},{"line":99,"address":[233439],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[233460],"length":1,"stats":{"Line":1},"fn_name":null},{"line":104,"address":[233536],"length":1,"stats":{"Line":2},"fn_name":"peek_sexpr_identifier"},{"line":105,"address":[233566],"length":1,"stats":{"Line":2},"fn_name":null},{"line":106,"address":[233700,233588],"length":1,"stats":{"Line":2},"fn_name":null},{"line":107,"address":[233693],"length":1,"stats":{"Line":2},"fn_name":null},{"line":108,"address":[233820],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[233786],"length":1,"stats":{"Line":2},"fn_name":null},{"line":111,"address":[233874],"length":1,"stats":{"Line":2},"fn_name":null},{"line":112,"address":[258960,258990],"length":1,"stats":{"Line":4},"fn_name":"{closure#0}"},{"line":113,"address":[259056,259080],"length":1,"stats":{"Line":4},"fn_name":"{closure#1}"},{"line":115,"address":[233949],"length":1,"stats":{"Line":2},"fn_name":null},{"line":116,"address":[233960],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[234025],"length":1,"stats":{"Line":2},"fn_name":null},{"line":121,"address":[234208],"length":1,"stats":{"Line":2},"fn_name":"consume"},{"line":122,"address":[234248],"length":1,"stats":{"Line":2},"fn_name":null},{"line":123,"address":[234336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[234392,234290],"length":1,"stats":{"Line":4},"fn_name":null},{"line":126,"address":[234399],"length":1,"stats":{"Line":2},"fn_name":null},{"line":129,"address":[316290,314408,313746,313776,313120,315644,314432,315664,315031,315056],"length":1,"stats":{"Line":4},"fn_name":"parse_number<u64>"},{"line":134,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":135,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":138,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":144,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":146,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":148,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":151,"address":[237297,234416],"length":1,"stats":{"Line":2},"fn_name":"parse_string"},{"line":152,"address":[234455],"length":1,"stats":{"Line":2},"fn_name":null},{"line":153,"address":[234689],"length":1,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[235229,235302,234742],"length":1,"stats":{"Line":2},"fn_name":null},{"line":157,"address":[235287],"length":1,"stats":{"Line":1},"fn_name":null},{"line":158,"address":[235380],"length":1,"stats":{"Line":1},"fn_name":null},{"line":159,"address":[235396,235514],"length":1,"stats":{"Line":2},"fn_name":null},{"line":160,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":162,"address":[259104,259117],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"},{"line":163,"address":[259136,259160],"length":1,"stats":{"Line":2},"fn_name":"{closure#1}"},{"line":165,"address":[235568],"length":1,"stats":{"Line":1},"fn_name":null},{"line":166,"address":[235650],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[235619,235757],"length":1,"stats":{"Line":2},"fn_name":null},{"line":170,"address":[235843],"length":1,"stats":{"Line":1},"fn_name":null},{"line":171,"address":[236034],"length":1,"stats":{"Line":1},"fn_name":null},{"line":172,"address":[237259,236210],"length":1,"stats":{"Line":2},"fn_name":null},{"line":173,"address":[236382,237057,237083],"length":1,"stats":{"Line":2},"fn_name":null},{"line":174,"address":[237065,237129],"length":1,"stats":{"Line":2},"fn_name":null},{"line":175,"address":[237230,237264],"length":1,"stats":{"Line":1},"fn_name":null},{"line":187,"address":[236910],"length":1,"stats":{"Line":1},"fn_name":null},{"line":190,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[234651,234781],"length":1,"stats":{"Line":2},"fn_name":null},{"line":192,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[259214,259184],"length":1,"stats":{"Line":2},"fn_name":"{closure#2}"},{"line":195,"address":[259304,259280],"length":1,"stats":{"Line":2},"fn_name":"{closure#3}"},{"line":197,"address":[234852],"length":1,"stats":{"Line":1},"fn_name":null},{"line":198,"address":[234866],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[234935],"length":1,"stats":{"Line":1},"fn_name":null},{"line":201,"address":[235034],"length":1,"stats":{"Line":1},"fn_name":null},{"line":202,"address":[235132],"length":1,"stats":{"Line":1},"fn_name":null},{"line":215,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[405952,407092,406928,402784,402948,403792,404800,403956,404964,406116],"length":1,"stats":{"Line":6},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":227,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":228,"address":[],"length":0,"stats":{"Line":15},"fn_name":null},{"line":229,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":232,"address":[408818,407968],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":240,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":241,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":242,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":244,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":245,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":248,"address":[409728,409873,410817,410672],"length":1,"stats":{"Line":2},"fn_name":"deserialize_newtype_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":256,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":257,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":258,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":261,"address":[408848,409001],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":270,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":271,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":272,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":290,"address":[237328],"length":1,"stats":{"Line":2},"fn_name":"consume_beginning"},{"line":294,"address":[237376],"length":1,"stats":{"Line":2},"fn_name":null},{"line":295,"address":[237386,237494],"length":1,"stats":{"Line":2},"fn_name":null},{"line":296,"address":[237584,237472],"length":1,"stats":{"Line":4},"fn_name":null},{"line":297,"address":[237615],"length":1,"stats":{"Line":1},"fn_name":null},{"line":299,"address":[237927,237590,237771],"length":1,"stats":{"Line":4},"fn_name":null},{"line":300,"address":[237916],"length":1,"stats":{"Line":2},"fn_name":null},{"line":303,"address":[238016],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":308,"address":[238087,238271],"length":1,"stats":{"Line":2},"fn_name":null},{"line":309,"address":[238167],"length":1,"stats":{"Line":1},"fn_name":null},{"line":310,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":312,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":313,"address":[238155],"length":1,"stats":{"Line":1},"fn_name":null},{"line":317,"address":[238368],"length":1,"stats":{"Line":1},"fn_name":"check_eoe"},{"line":318,"address":[238398],"length":1,"stats":{"Line":1},"fn_name":null},{"line":319,"address":[238854,238411,238603],"length":1,"stats":{"Line":3},"fn_name":null},{"line":320,"address":[238628,238725],"length":1,"stats":{"Line":1},"fn_name":null},{"line":323,"address":[238810,238699,238859],"length":1,"stats":{"Line":2},"fn_name":null},{"line":325,"address":[238615],"length":1,"stats":{"Line":1},"fn_name":null},{"line":328,"address":[342603,323920,346763,323883,344720,319723,332203,338480,336363,321840,334320,348880,325963,328080,321803,344683,328043,330123,330160,348843,334283,338443,319760,350923,317680,332240,326000,342640,340560,346800,336400,340523],"length":1,"stats":{"Line":18},"fn_name":"next_value_seed_impl<core::marker::PhantomData<test::Position>>"},{"line":332,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":339,"address":[],"length":0,"stats":{"Line":23},"fn_name":null},{"line":340,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":341,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":342,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":346,"address":[],"length":0,"stats":{"Line":16},"fn_name":null},{"line":347,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":348,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":349,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":351,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":352,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":353,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":355,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":360,"address":[],"length":0,"stats":{"Line":32},"fn_name":null},{"line":367,"address":[362228,362256,363172,357536,359396,358480,360368,361284,358452,359424,360340,361312],"length":1,"stats":{"Line":7},"fn_name":"next_key_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":371,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":373,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":374,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":375,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":380,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":381,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":382,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":383,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":385,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":386,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":393,"address":[],"length":0,"stats":{"Line":14},"fn_name":null},{"line":394,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":397,"address":[368499,371535,372271,367408,363200,365616,364902,370416,367951,368528,370988,364303,372848,363776,369824,369799,364320,366304,372288,366848,366279,367424,363760,370396,371008,369136,371552,364928,365593,369118,367968,366831],"length":1,"stats":{"Line":18},"fn_name":"next_value_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::{impl#2}::visit_map::__DeserializeWith>>"},{"line":401,"address":[],"length":0,"stats":{"Line":18},"fn_name":null},{"line":402,"address":[],"length":0,"stats":{"Line":34},"fn_name":null},{"line":403,"address":[],"length":0,"stats":{"Line":34},"fn_name":null},{"line":404,"address":[],"length":0,"stats":{"Line":17},"fn_name":null},{"line":415,"address":[238896],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":416,"address":[239046,238941],"length":1,"stats":{"Line":2},"fn_name":null},{"line":417,"address":[238996],"length":1,"stats":{"Line":2},"fn_name":null},{"line":420,"address":[239136],"length":1,"stats":{"Line":2},"fn_name":"check_eoe"},{"line":421,"address":[239166],"length":1,"stats":{"Line":2},"fn_name":null},{"line":422,"address":[239192],"length":1,"stats":{"Line":1},"fn_name":null},{"line":425,"address":[239177],"length":1,"stats":{"Line":2},"fn_name":null},{"line":426,"address":[239216,239474],"length":1,"stats":{"Line":3},"fn_name":null},{"line":427,"address":[239358,239407,239476],"length":1,"stats":{"Line":2},"fn_name":null},{"line":428,"address":[239470],"length":1,"stats":{"Line":1},"fn_name":null},{"line":430,"address":[239387],"length":1,"stats":{"Line":2},"fn_name":null},{"line":437,"address":[396130,398784,399856,398751,396176,397456,397411,394848],"length":1,"stats":{"Line":3},"fn_name":"next_element_seed<core::marker::PhantomData<serde::__private::de::content::Content>>"},{"line":441,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":442,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":443,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":445,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":446,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":447,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":457,"address":[401200,401296,401152,401248,401344,401104],"length":1,"stats":{"Line":7},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":461,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":477,"address":[400016,400416,400064,400448,400192,400128,399936,400096,400352,400160,400384,399968,400304,400272,399888,400224],"length":1,"stats":{"Line":1},"fn_name":"deserialize_any<serde_sexpr::option::OptionVisitor<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>>"},{"line":481,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":497,"address":[401776,402064,402096,401712,402000,401936,401744,401904,401968,402032,402128,401872,401680,401808,401840],"length":1,"stats":{"Line":4},"fn_name":"deserialize_any<serde::de::impls::{impl#160}::deserialize::TupleVisitor<f32, f32>>"},{"line":501,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":504,"address":[402320],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":508,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":530,"address":[239552],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":539,"address":[379952,378192,379350,379248,380758,381094,379600,387808,380656,380992,387574,378661,388246,380068,378307,378896,378998,387910,379702,387472,388144,380320,378560,380422],"length":1,"stats":{"Line":5},"fn_name":"deserialize_f32<serde_sexpr::option::OptionVisitor<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>>"},{"line":543,"address":[381322,380437,378222,380306,388128,380640,379218,379570,379717,378544,378891,378676,380773,380986,387488,379922,387925,388261,379365,381109,379616,379982,387824,388160,388464,378912,379013,380650,381312,379228,381008,387589,379932,387792,379264,378881,380336,380672,387802,380296,378576,379580,378322,378534,380976,380083,388138,388474],"length":1,"stats":{"Line":10},"fn_name":null},{"line":553,"address":[376550,376576,378170,374934,374960,373344],"length":1,"stats":{"Line":3},"fn_name":"deserialize_any<test::_::{impl#0}::deserialize::__FieldVisitor>"},{"line":557,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":558,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":559,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":561,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":562,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":563,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":564,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":565,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":567,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":568,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":573,"address":[388480],"length":1,"stats":{"Line":1},"fn_name":"deserialize_bool<serde::de::impls::BoolVisitor>"},{"line":577,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":584,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":587,"address":[390560,391783,389911,391184,389936,389312,391159,390535],"length":1,"stats":{"Line":4},"fn_name":"deserialize_string<serde::__private::de::content::ContentVisitor>"},{"line":591,"address":[],"length":0,"stats":{"Line":7},"fn_name":null},{"line":592,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":593,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":594,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":605,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":608,"address":[392256,391808,391946,392417,392736,392874],"length":1,"stats":{"Line":3},"fn_name":"deserialize_struct<test::_::{impl#0}::deserialize::__Visitor>"},{"line":617,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":620,"address":[388672,389226],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit<serde_sexpr::option::OptionVisitor<serde::de::impls::UnitVisitor>>"},{"line":624,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":625,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":626,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":627,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":628,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":632,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":635,"address":[393312,393958],"length":1,"stats":{"Line":1},"fn_name":"deserialize_unit_struct<serde_sexpr::option::OptionVisitor<serde::de::impls::UnitVisitor>>"},{"line":643,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":644,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":645,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":647,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":650,"address":[394768],"length":1,"stats":{"Line":0},"fn_name":"deserialize_newtype_struct<serde_sexpr::option::OptionVisitor<test::_::{impl#0}::deserialize::__Visitor>>"},{"line":658,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":661,"address":[394128,394384,394514,393984],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple_struct<serde_sexpr::option::OptionVisitor<test::_::{impl#0}::deserialize::__Visitor>>"},{"line":670,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":673,"address":[388512,388592],"length":1,"stats":{"Line":2},"fn_name":"deserialize_enum<test::_::{impl#0}::deserialize::__Visitor>"},{"line":682,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":685,"address":[383351,383376,384400,385395,386422,382327,386448,381328,387447,385424,384371,382352],"length":1,"stats":{"Line":3},"fn_name":"deserialize_seq<serde::de::impls::{impl#19}::deserialize::VecVisitor<alloc::string::String>>"},{"line":689,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":690,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":691,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":692,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":693,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":697,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":698,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":700,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":702,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":706,"address":[389248],"length":1,"stats":{"Line":1},"fn_name":"deserialize_tuple<serde::de::impls::{impl#160}::deserialize::TupleVisitor<f32, f32>>"},{"line":710,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":725,"address":[356320,355728,355691,356877,356912,355120,356289,357491],"length":1,"stats":{"Line":1},"fn_name":"next_element_seed<core::marker::PhantomData<alloc::string::String>>"},{"line":729,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":730,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":731,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":733,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":741,"address":[372864,373104],"length":1,"stats":{"Line":2},"fn_name":"variant_seed<core::marker::PhantomData<test::_::{impl#0}::deserialize::__Field>>"},{"line":745,"address":[],"length":0,"stats":{"Line":2},"fn_name":null},{"line":755,"address":[239600],"length":1,"stats":{"Line":1},"fn_name":"unit_variant"},{"line":756,"address":[239604],"length":1,"stats":{"Line":1},"fn_name":null},{"line":763,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":770,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":781,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":216,"coverable":271},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","lib.rs"],"content":"#![warn(rust_2018_idioms, unreachable_pub)]\n#![forbid(unsafe_code)]\n\nmod literal;\nmod option;\n\npub mod de;\npub mod ser;\n\npub use de::from_str;\npub use literal::Literal;\npub use option::{deserialize_option, OptionDef as Option};\npub use ser::{to_string, to_string_pretty};\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","literal.rs"],"content":"use serde::{Deserialize, Serialize};\nuse std::fmt::{self, Debug, Display, Formatter};\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(untagged)]\nenum LiteralImp {\n\tNumber(u16),\n\tText(String)\n}\n\n#[derive(Clone, Eq, Deserialize, PartialEq, Serialize)]\n#[serde(transparent)]\npub struct Literal(LiteralImp);\n\nimpl Debug for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Debug::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Debug::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl Display for Literal {\n\tfn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tmatch &self.0 {\n\t\t\tLiteralImp::Number(num) => Display::fmt(num, f),\n\t\t\tLiteralImp::Text(text) => Display::fmt(text, f)\n\t\t}\n\t}\n}\n\nimpl From<u16> for Literal {\n\tfn from(num: u16) -> Self {\n\t\tSelf(LiteralImp::Number(num))\n\t}\n}\n\nimpl From<&str> for Literal {\n\tfn from(text: &str) -> Self {\n\t\ttext.to_owned().into()\n\t}\n}\n\nimpl From<String> for Literal {\n\tfn from(text: String) -> Self {\n\t\tSelf(LiteralImp::Text(text))\n\t}\n}\n","traces":[{"line":16,"address":[230496],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":17,"address":[230514],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[230545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[230576],"length":1,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[230624],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":26,"address":[230642],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[230673],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[230705],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[230752],"length":1,"stats":{"Line":1},"fn_name":"from"},{"line":35,"address":[230767],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[230832],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":41,"address":[230855],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[230896],"length":1,"stats":{"Line":0},"fn_name":"from"},{"line":47,"address":[230903],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":14},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","option.rs"],"content":"use serde::{\n\tde::{\n\t\tself, Deserialize, Deserializer, EnumAccess, MapAccess, SeqAccess, Visitor\n\t},\n\tser::{Serialize, Serializer}\n};\nuse std::{\n\tfmt::{self, Formatter},\n\tmarker::PhantomData\n};\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(with = \"serde_sexpr::Option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// For a more detailed description, see [`deserialize_option`].\npub struct OptionDef<T>(PhantomData<T>);\n\nimpl<'de, T> OptionDef<T>\nwhere\n\tT: Deserialize<'de>\n{\n\tpub fn deserialize<D>(deserializer: D) -> Result<Option<T>, D::Error>\n\twhere\n\t\tD: Deserializer<'de>\n\t{\n\t\tdeserialize_option(deserializer)\n\t}\n}\n\nimpl<T> OptionDef<T>\nwhere\n\tOption<T>: Serialize\n{\n\tpub fn serialize<S>(this: &Option<T>, serializer: S) -> Result<S::Ok, S::Error>\n\twhere\n\t\tS: Serializer\n\t{\n\t\tthis.serialize(serializer)\n\t}\n}\n\n/// Deserialize an [`Option`] in a way that is supported by the s-expression format.\n///\n/// ### Example\n///\n/// ```rust\n/// # use serde::{Deserialize, Serialize};\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"size\")]\n/// struct Size(f32, f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"thickness\")]\n/// struct Thickness(f32);\n///\n/// # #[derive(Debug, PartialEq)]\n/// #[derive(Deserialize, Serialize)]\n/// #[serde(deny_unknown_fields, rename = \"font\")]\n/// struct Font {\n/// \tsize: Size,\n///\n/// \t// This attribute enables our custom deserialize logic.\n/// \t#[serde(deserialize_with = \"serde_sexpr::deserialize_option\")]\n/// \tthickness: Option<Thickness>,\n///\n/// \tbold: bool\n/// }\n/// # assert_eq!(\n/// # \tserde_sexpr::from_str::<Font>(\"(font (size 1 1) bold)\").unwrap(),\n/// # \tFont { size: Size(1.0, 1.0), thickness: None, bold: true }\n/// # );\n/// ```\n///\n/// ### Description\n///\n/// The s-expression format is not only not self-describing, but also does not provide any way\n/// to see if a value is \"missing\" (i.e. [`None`]) without knowing its type. Unfortunately, serde\n/// expects us to decide if the value is present before we know its type: In the above example,\n/// we have the input string `\"bold)\"` and need to know if `thickness` is present or not, without\n/// knowing that `thickness` is an s-expr and not, say, an enum that has a variant called `bold`.\n///\n/// This custom deserialize logic therefore avoids calling [`Deserializer::deserialize_option`]\n/// alltogether. Instead, we'll try to deserialize the value as if it was present, and return\n/// [`None`] if the deserializer returns an error before calling the visitor. This is likely\n/// indicative of a type error, that would indicate a missing value.\n///\n/// ### Drawbacks\n///\n/// Using this deserialize logic might hide errors in the input. If this optional value\n/// is the last value that gets deserialized, and the deserialization failed due to some\n/// error other than a type error, it might get hidden.\n///\n/// Also, if trying to deserialize the value alters the state of the deserializer, it could\n/// lead to incorrect deserialization.\npub fn deserialize_option<'de, D, T>(deserializer: D) -> Result<Option<T>, D::Error>\nwhere\n\tD: Deserializer<'de>,\n\tT: Deserialize<'de>\n{\n\t// this flag will be set if any visitor method was called\n\tlet mut flag = false;\n\n\t// try to deserialize a present value\n\tlet result = T::deserialize(OptionDeserializer {\n\t\tde: deserializer,\n\t\tflag: &mut flag\n\t});\n\n\t// if the flag is not set and we don't have a value, assume a non-present value\n\tmatch result {\n\t\tOk(value) => Ok(Some(value)),\n\t\tErr(_) if !flag => Ok(None),\n\t\tErr(err) => Err(err)\n\t}\n}\n\n/// A deserializer that intercepts the visitor with our custom visitor.\nstruct OptionDeserializer<'a, D> {\n\tde: D,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_deserializer {\n\t($(fn $ident:ident <$visitor:ident>(\n\t\tself,\n\t\t$visitor_arg:ident : $visitor_arg_ty:ty\n\t\t$(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$visitor>(\n\t\t\t\tself,\n\t\t\t\t$($arg: $arg_ty,)*\n\t\t\t\t$visitor_arg: $visitor_arg_ty\n\t\t\t) -> Result<$visitor::Value, Self::Error>\n\t\t\twhere\n\t\t\t\t$visitor: Visitor<'de>\n\t\t\t{\n\t\t\t\tlet $visitor_arg = OptionVisitor {\n\t\t\t\t\tvisitor: $visitor_arg,\n\t\t\t\t\tflag: self.flag\n\t\t\t\t};\n\t\t\t\tself.de.$ident($($arg,)* $visitor_arg)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, D> Deserializer<'de> for OptionDeserializer<'a, D>\nwhere\n\tD: Deserializer<'de>\n{\n\ttype Error = D::Error;\n\n\tforward_deserializer! {\n\t\tfn deserialize_any<V>(self, visitor: V);\n\t\tfn deserialize_bool<V>(self, visitor: V);\n\t\tfn deserialize_i8<V>(self, visitor: V);\n\t\tfn deserialize_i16<V>(self, visitor: V);\n\t\tfn deserialize_i32<V>(self, visitor: V);\n\t\tfn deserialize_i64<V>(self, visitor: V);\n\t\tfn deserialize_i128<V>(self, visitor: V);\n\t\tfn deserialize_u8<V>(self, visitor: V);\n\t\tfn deserialize_u16<V>(self, visitor: V);\n\t\tfn deserialize_u32<V>(self, visitor: V);\n\t\tfn deserialize_u64<V>(self, visitor: V);\n\t\tfn deserialize_u128<V>(self, visitor: V);\n\t\tfn deserialize_f32<V>(self, visitor: V);\n\t\tfn deserialize_f64<V>(self, visitor: V);\n\t\tfn deserialize_char<V>(self, visitor: V);\n\t\tfn deserialize_str<V>(self, visitor: V);\n\t\tfn deserialize_string<V>(self, visitor: V);\n\t\tfn deserialize_bytes<V>(self, visitor: V);\n\t\tfn deserialize_byte_buf<V>(self, visitor: V);\n\t\tfn deserialize_option<V>(self, visitor: V);\n\t\tfn deserialize_unit<V>(self, visitor: V);\n\t\tfn deserialize_unit_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_newtype_struct<V>(self, visitor: V, name: &'static str);\n\t\tfn deserialize_seq<V>(self, visitor: V);\n\t\tfn deserialize_tuple<V>(self, visitor: V, len: usize);\n\t\tfn deserialize_tuple_struct<V>(self, visitor: V, name: &'static str, len: usize);\n\t\tfn deserialize_map<V>(self, visitor: V);\n\t\tfn deserialize_struct<V>(self, visitor: V, name: &'static str, fields: &'static [&'static str]);\n\t\tfn deserialize_enum<V>(self, visitor: V, name: &'static str, variants: &'static [&'static str]);\n\t\tfn deserialize_identifier<V>(self, visitor: V);\n\t\tfn deserialize_ignored_any<V>(self, visitor: V);\n\t}\n\n\tfn is_human_readable(&self) -> bool {\n\t\tself.de.is_human_readable()\n\t}\n}\n\n/// A visitor that will set a flag if any visit method was called (except for visit_none).\n/// This indicates that the value was indeed present, i.e. any error return was not a\n/// general type error but instead a problem deserializing the correct type.\nstruct OptionVisitor<'a, V> {\n\tvisitor: V,\n\tflag: &'a mut bool\n}\n\nmacro_rules! forward_visitor {\n\t($(fn $ident:ident <$error:ident>(self $(, $arg:ident : $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident<$error>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $error>\n\t\t\twhere\n\t\t\t\t$error: de::Error\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident <$access:ident : $access_bound:path>(\n\t\tself $(, $arg:ident : $arg_ty:ty)*\n\t);)+) => {\n\t\t$(\n\t\t\tfn $ident<$access>(self $(, $arg: $arg_ty,)*) -> Result<Self::Value, $access::Error>\n\t\t\twhere\n\t\t\t\t$access: $access_bound\n\t\t\t{\n\t\t\t\t*self.flag = true;\n\t\t\t\tself.visitor.$ident($($arg),*)\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a, 'de, V> Visitor<'de> for OptionVisitor<'a, V>\nwhere\n\tV: Visitor<'de>\n{\n\ttype Value = V::Value;\n\n\tfn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {\n\t\tf.write_str(\"optional \")?;\n\t\tself.visitor.expecting(f)\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_bool<E>(self, v: bool);\n\t\tfn visit_i8<E>(self, v: i8);\n\t\tfn visit_i16<E>(self, v: i16);\n\t\tfn visit_i32<E>(self, v: i32);\n\t\tfn visit_i64<E>(self, v: i64);\n\t\tfn visit_i128<E>(self, v: i128);\n\t\tfn visit_u8<E>(self, v: u8);\n\t\tfn visit_u16<E>(self, v: u16);\n\t\tfn visit_u32<E>(self, v: u32);\n\t\tfn visit_u64<E>(self, v: u64);\n\t\tfn visit_u128<E>(self, v: u128);\n\t\tfn visit_f32<E>(self, v: f32);\n\t\tfn visit_f64<E>(self, v: f64);\n\t\tfn visit_char<E>(self, v: char);\n\t\tfn visit_str<E>(self, v: &str);\n\t\tfn visit_borrowed_str<E>(self, v: &'de str);\n\t\tfn visit_string<E>(self, v: String);\n\t\tfn visit_bytes<E>(self, v: &[u8]);\n\t\tfn visit_borrowed_bytes<E>(self, v: &'de [u8]);\n\t\tfn visit_byte_buf<E>(self, v: Vec<u8>);\n\t\tfn visit_unit<E>(self);\n\t}\n\n\tfn visit_none<E>(self) -> Result<Self::Value, E>\n\twhere\n\t\tE: de::Error\n\t{\n\t\t// special case - if we don't set the flag and return an error, we'll\n\t\t// get None\n\t\tErr(E::custom(\"\"))\n\t}\n\n\tforward_visitor! {\n\t\tfn visit_some<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_newtype_struct<D: Deserializer<'de>>(self, de: D);\n\t\tfn visit_seq<A: SeqAccess<'de>>(self, seq: A);\n\t\tfn visit_map<A: MapAccess<'de>>(self, map: A);\n\t\tfn visit_enum<A: EnumAccess<'de>>(self, data: A);\n\t}\n}\n","traces":[{"line":55,"address":[508096,508512,508352,508224,508448,508544,508160,508320,508288,508032,508576,508608,508064,508384,508640],"length":1,"stats":{"Line":8},"fn_name":"deserialize<i16, serde_sexpr::de::TrueField>"},{"line":59,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":67,"address":[508928,508800,508672,508736,508864],"length":1,"stats":{"Line":8},"fn_name":"serialize<f32, serde_sexpr::ser::Field>"},{"line":71,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":130,"address":[509632,513552,510064,512432,509328,512128,512768,513888,511392,510512,511008,511792,514288,513216,508992],"length":1,"stats":{"Line":8},"fn_name":"deserialize_option<serde_sexpr::de::TrueField, i16>"},{"line":136,"address":[512448,510529,513568,509345,509008,511808,512145,512785,514304,513232,511408,513904,510081,509649,511024],"length":1,"stats":{"Line":8},"fn_name":null},{"line":139,"address":[510126,510574,513581,513245,512158,511063,512830,514317,509358,509694,509021,511421,511821,512461,513917],"length":1,"stats":{"Line":8},"fn_name":null},{"line":140,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":141,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":146,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":147,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":148,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[516000,515920,516272,516832,516224,516912,516048,516176,515872,516352,516656,516752,516400,516528,516128],"length":1,"stats":{"Line":8},"fn_name":"deserialize_f32<serde_sexpr::de::MissingField, serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor>"},{"line":173,"address":[516885,516288,516017,516145,515936,516938,516805,516489,516692,516064,516241,515889,516369,516193,516617],"length":1,"stats":{"Line":8},"fn_name":null},{"line":175,"address":[516934,516688,515932,516284,516060],"length":1,"stats":{"Line":4},"fn_name":null},{"line":177,"address":[516022,516697,516150,515894,516622,516943,515941,516374,516293,516246,516198,516494,516890,516810,516069],"length":1,"stats":{"Line":8},"fn_name":null},{"line":223,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":239,"address":[514752,515616,515664,515568,514624,514688,514816,514880],"length":1,"stats":{"Line":3},"fn_name":"visit_bool<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::error::Error>"},{"line":243,"address":[515585,515638,514843,514651,514715,514779,515688,514907],"length":1,"stats":{"Line":3},"fn_name":null},{"line":244,"address":[514782,514654,514910,514718,515691,515588,514846,515641],"length":1,"stats":{"Line":3},"fn_name":null},{"line":253,"address":[515792,515712],"length":1,"stats":{"Line":1},"fn_name":"visit_map<test::_::{impl#0}::deserialize::__Visitor, serde_sexpr::de::SExpr>"},{"line":257,"address":[515836,515744],"length":1,"stats":{"Line":1},"fn_name":null},{"line":258,"address":[515747,515839],"length":1,"stats":{"Line":1},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":271,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":299,"address":[515408,515166,515294,515038,515200,514944,515533,515072,515440,515328],"length":1,"stats":{"Line":4},"fn_name":"visit_none<serde::de::impls::{impl#52}::deserialize::PrimitiveVisitor, serde_sexpr::de::error::Error>"},{"line":305,"address":[],"length":0,"stats":{"Line":4},"fn_name":null}],"covered":23,"coverable":30},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","error.rs"],"content":"use serde::ser;\nuse std::fmt::Display;\nuse thiserror::Error;\n\n#[derive(Clone, Debug, Error, PartialEq)]\npub enum Error {\n\t#[error(\"{0}\")]\n\tMessage(String),\n\n\t/// This error will be returned if you request to serialize anything but a struct\n\t/// at root level.\n\t#[error(\"Expected to serialize a struct at root level\")]\n\tExpectedStruct,\n\n\t/// This error will be returned if a boolean was detected in an unnamed\n\t/// container, i.e. a tuple or a sequence.\n\t#[error(\"Unnamed boolean\")]\n\tUnnamedBoolean,\n\n\t/// This error will be returned if a unit was detected in an unnamed container,\n\t/// i.e. a tuple or a sequence.\n\t#[error(\"Unnamed unit\")]\n\tUnnamedUnit,\n\n\t/// This error will be returned if a sequence was detected in an unnamed\n\t/// container, i.e. a tuple or a sequence.\n\t#[error(\"Unnamed sequence\")]\n\tUnnamedSeq,\n\n\t#[error(\"char is unsupported\")]\n\tChar,\n\t#[error(\"byte array is unsupported\")]\n\tBytes,\n\t#[error(\"enums with non-unit variants are not supported\")]\n\tComplexEnum,\n\t#[error(\"maps are not supported\")]\n\tMap\n}\n\nimpl ser::Error for Error {\n\tfn custom<T: Display>(msg: T) -> Self {\n\t\tSelf::Message(msg.to_string())\n\t}\n}\n","traces":[{"line":41,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":2},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","src","ser","mod.rs"],"content":"use itoa::Integer;\nuse paste::paste;\nuse serde::ser::{\n\tself, Serialize, SerializeSeq, SerializeStruct, SerializeTuple,\n\tSerializeTupleStruct\n};\n\nmod error;\npub use error::Error;\n\npub struct Serializer {\n\t/// Buffer that the output gets written to.\n\tbuf: String,\n\n\t/// Set to true for pretty output.\n\tpretty: bool,\n\n\t/// The current level of nesting\n\tlvl: usize,\n\n\t/// The indentation (in levels) of the current line\n\tindent: usize,\n\n\t/// An itoa::Buffer to re-use when printing integers\n\titoa_buffer: itoa::Buffer\n}\n\nimpl Serializer {\n\tfn new(pretty: bool) -> Self {\n\t\tSelf {\n\t\t\tbuf: String::new(),\n\t\t\tpretty,\n\t\t\tlvl: 0,\n\t\t\tindent: 0,\n\t\t\titoa_buffer: itoa::Buffer::new()\n\t\t}\n\t}\n}\n\ntype Result<T, E = Error> = std::result::Result<T, E>;\n\npub fn to_string<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(false);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\npub fn to_string_pretty<T>(value: &T) -> Result<String>\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet mut serializer = Serializer::new(true);\n\tvalue.serialize(&mut serializer)?;\n\tOk(serializer.buf)\n}\n\nimpl Serializer {\n\tfn newline(&mut self) {\n\t\tself.buf += \"\\n\";\n\t\tfor _ in 0..self.lvl {\n\t\t\tself.buf += \"  \";\n\t\t}\n\t\tself.indent = self.lvl;\n\t}\n\n\tfn begin_sexpr(&mut self, name: &str) {\n\t\tif self.lvl > 0 {\n\t\t\tif self.pretty {\n\t\t\t\tself.newline();\n\t\t\t} else {\n\t\t\t\tself.buf += \" \";\n\t\t\t}\n\t\t}\n\t\tself.lvl += 1;\n\t\tself.buf += \"(\";\n\t\tself.buf += name;\n\t}\n\n\tfn end_sexpr(&mut self) {\n\t\tself.lvl -= 1;\n\t\tself.buf += \")\";\n\t}\n\n\tfn write_integer<I: Integer>(&mut self, v: I) {\n\t\tself.buf += \" \";\n\t\tself.buf += self.itoa_buffer.format(v);\n\t}\n\n\tfn write_float<F: ToString>(&mut self, v: F) {\n\t\tself.buf += \" \";\n\t\tself.buf += &v.to_string();\n\t}\n\n\tfn write_str(&mut self, v: &str, aggressive_quotes: bool) {\n\t\tself.buf += \" \";\n\n\t\tconst CHARS: &[char] = &[' ', '\\t', '\\n', '\\r', '(', ')', '\"'];\n\t\tlet need_quotes = v.is_empty()\n\t\t\t|| match aggressive_quotes {\n\t\t\t\ttrue => v.chars().any(|ch| !ch.is_ascii_alphabetic() && ch != '_'),\n\t\t\t\tfalse => v.contains(CHARS)\n\t\t\t};\n\n\t\tif need_quotes {\n\t\t\tself.buf += r#\"\"\"#;\n\t\t\tself.buf += &v.replace('\\\\', r\"\\\\\").replace('\"', r#\"\\\"\"#);\n\t\t\tself.buf += r#\"\"\"#;\n\t\t} else {\n\t\t\tself.buf += v;\n\t\t}\n\t}\n}\n\nmacro_rules! serialize_type_error {\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*);)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr(Error::ExpectedStruct)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> Result<Self::Ok, Self::Error>\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n\n\t($(fn $ident:ident $(<$T:ident>)? (self $(, $arg_ty:ty)*) -> $ret:ty = $err:expr;)+) => {\n\t\t$(\n\t\t\tfn $ident $(<$T>)? (self $(, _: $arg_ty)*) -> $ret\n\t\t\t$(where $T: ?Sized + Serialize)?\n\t\t\t{\n\t\t\t\tErr($err)\n\t\t\t}\n\t\t)+\n\t};\n}\n\ntype Impossible<T = (), E = Error> = serde::ser::Impossible<T, E>;\n\nimpl<'a> ser::Serializer for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Impossible;\n\ttype SerializeTuple = Impossible;\n\ttype SerializeTupleStruct = Self;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = Self;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_bool(self, bool);\n\t\tfn serialize_i8(self, i8);\n\t\tfn serialize_i16(self, i16);\n\t\tfn serialize_i32(self, i32);\n\t\tfn serialize_i64(self, i64);\n\t\tfn serialize_i128(self, i128);\n\t\tfn serialize_u8(self, u8);\n\t\tfn serialize_u16(self, u16);\n\t\tfn serialize_u32(self, u32);\n\t\tfn serialize_u64(self, u64);\n\t\tfn serialize_u128(self, u128);\n\t\tfn serialize_f32(self, f32);\n\t\tfn serialize_f64(self, f64);\n\t\tfn serialize_char(self, char);\n\t\tfn serialize_str(self, &str);\n\t\tfn serialize_bytes(self, &[u8]);\n\t\tfn serialize_none(self);\n\t\tfn serialize_some<T>(self, &T);\n\t\tfn serialize_unit(self);\n\t\tfn serialize_unit_variant(self, &'static str, u32, &'static str);\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T);\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_seq(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_tuple(self, usize) -> Result<Impossible>;\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible>;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible>;\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.begin_sexpr(name);\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.begin_sexpr(name);\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self,\n\t\t\tname: None\n\t\t})?;\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n\n\tfn serialize_tuple_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\t_len: usize\n\t) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n\n\tfn serialize_struct(self, name: &'static str, _len: usize) -> Result<Self> {\n\t\tself.begin_sexpr(name);\n\t\tOk(self)\n\t}\n}\n\nimpl<'a> SerializeTupleStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeStruct for &'a mut Serializer {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\t// TODO this should probably not be self\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut **self,\n\t\t\tname: Some(key)\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tself.end_sexpr();\n\t\tOk(())\n\t}\n}\n\n/// This serializer will serialize all fields. It needs the field name for booleans and\n/// sequences.\nstruct Field<'a> {\n\tser: &'a mut Serializer,\n\tname: Option<&'static str>\n}\n\nmacro_rules! serialize_integer {\n\t($($integer:ty)+) => {\n\t\t$(\n\t\t\tpaste! {\n\t\t\t\tfn [<serialize_ $integer>](self, v: $integer) -> Result<()> {\n\t\t\t\t\tself.ser.write_integer(v);\n\t\t\t\t\tOk(())\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t};\n}\n\nimpl<'a> ser::Serializer for Field<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\ttype SerializeSeq = Sequence<'a>;\n\ttype SerializeTuple = Sequence<'a>;\n\ttype SerializeTupleStruct = &'a mut Serializer;\n\ttype SerializeTupleVariant = Impossible;\n\ttype SerializeMap = Impossible;\n\ttype SerializeStruct = &'a mut Serializer;\n\ttype SerializeStructVariant = Impossible;\n\n\tserialize_type_error! {\n\t\tfn serialize_char(self, char) = Error::Char;\n\t\tfn serialize_bytes(self, &[u8]) = Error::Bytes;\n\t\tfn serialize_newtype_variant<T>(self, &'static str, u32, &'static str, &T) = Error::ComplexEnum;\n\t}\n\n\tserialize_type_error! {\n\t\tfn serialize_tuple_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t\tfn serialize_map(self, Option<usize>) -> Result<Impossible> = Error::Map;\n\t\tfn serialize_struct_variant(self, &'static str, u32, &'static str, usize) -> Result<Impossible> = Error::ComplexEnum;\n\t}\n\n\tfn serialize_bool(self, v: bool) -> Result<()> {\n\t\tlet name = self.name.ok_or(Error::UnnamedBoolean)?;\n\t\tif v {\n\t\t\tself.serialize_str(name)?;\n\t\t}\n\t\tOk(())\n\t}\n\n\tserialize_integer! {\n\t\ti8 i16 i32 i64 i128 u8 u16 u32 u64 u128\n\t}\n\n\tfn serialize_f32(self, v: f32) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_f64(self, v: f64) -> Result<()> {\n\t\tself.ser.write_float(v);\n\t\tOk(())\n\t}\n\n\tfn serialize_str(self, v: &str) -> Result<()> {\n\t\tself.ser.write_str(v, true);\n\t\tOk(())\n\t}\n\n\tfn serialize_none(self) -> Result<()> {\n\t\tOk(())\n\t}\n\n\tfn serialize_some<T>(self, v: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tv.serialize(self)\n\t}\n\n\tfn serialize_unit(self) -> Result<()> {\n\t\tlet name = self.name.ok_or(Error::UnnamedUnit)?;\n\t\tself.ser.serialize_unit_struct(name)\n\t}\n\n\tfn serialize_unit_struct(self, name: &'static str) -> Result<()> {\n\t\tself.ser.serialize_unit_struct(name)\n\t}\n\n\tfn serialize_unit_variant(\n\t\tself,\n\t\t_name: &'static str,\n\t\t_variant_index: u32,\n\t\tvariant: &'static str\n\t) -> Result<()> {\n\t\tself.ser.write_str(variant, false);\n\t\tOk(())\n\t}\n\n\tfn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tself.ser.serialize_newtype_struct(name, value)\n\t}\n\n\tfn serialize_seq(self, _len: Option<usize>) -> Result<Sequence<'a>> {\n\t\tlet name = self.name.ok_or(Error::UnnamedSeq)?;\n\t\tlet close_sexpr = match name {\n\t\t\t\"\" => false,\n\t\t\tname => {\n\t\t\t\tself.ser.begin_sexpr(name);\n\t\t\t\ttrue\n\t\t\t}\n\t\t};\n\t\tOk(Sequence::new(self.ser, close_sexpr))\n\t}\n\n\tfn serialize_tuple(self, len: usize) -> Result<Sequence<'a>> {\n\t\tself.serialize_seq(Some(len))\n\t}\n\n\tfn serialize_tuple_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\tlen: usize\n\t) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_tuple_struct(name, len)\n\t}\n\n\tfn serialize_struct(\n\t\tself,\n\t\tname: &'static str,\n\t\tlen: usize\n\t) -> Result<&'a mut Serializer> {\n\t\tself.ser.serialize_struct(name, len)\n\t}\n}\n\n/// A sequence / tuple serializer that optionally closes an s-expr afterwards\nstruct Sequence<'a> {\n\tser: &'a mut Serializer,\n\tclose_sexpr: bool\n}\n\nimpl<'a> Sequence<'a> {\n\tfn new(ser: &'a mut Serializer, close_sexpr: bool) -> Self {\n\t\tSelf { ser, close_sexpr }\n\t}\n}\n\nimpl<'a> SerializeSeq for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tvalue.serialize(Field {\n\t\t\tser: &mut *self.ser,\n\t\t\tname: None\n\t\t})\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tif self.close_sexpr {\n\t\t\tself.ser.end_sexpr();\n\t\t}\n\t\tOk(())\n\t}\n}\n\nimpl<'a> SerializeTuple for Sequence<'a> {\n\ttype Ok = ();\n\ttype Error = Error;\n\n\tfn serialize_element<T>(&mut self, value: &T) -> Result<()>\n\twhere\n\t\tT: ?Sized + Serialize\n\t{\n\t\tSerializeSeq::serialize_element(self, value)\n\t}\n\n\tfn end(self) -> Result<()> {\n\t\tSerializeSeq::end(self)\n\t}\n}\n","traces":[{"line":29,"address":[239779,239616],"length":1,"stats":{"Line":1},"fn_name":"new"},{"line":31,"address":[239643],"length":1,"stats":{"Line":1},"fn_name":null},{"line":35,"address":[239658],"length":1,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[209020,207020,207420,207056,205856,206620,208220,208620,205820,207856,208256,205456,207820,206256,206656,207456,206220,208656],"length":1,"stats":{"Line":11},"fn_name":"to_string<test::Pad>"},{"line":46,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":47,"address":[],"length":0,"stats":{"Line":22},"fn_name":null},{"line":48,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":51,"address":[202256,205423,203856,203423,203823,203456,203056,204223,205056,202223,205023,202656,202623,203023,204256,204656,201856,204623],"length":1,"stats":{"Line":11},"fn_name":"to_string_pretty<test::Description>"},{"line":55,"address":[],"length":0,"stats":{"Line":11},"fn_name":null},{"line":56,"address":[],"length":0,"stats":{"Line":21},"fn_name":null},{"line":57,"address":[],"length":0,"stats":{"Line":10},"fn_name":null},{"line":61,"address":[239792],"length":1,"stats":{"Line":1},"fn_name":"newline"},{"line":62,"address":[239806],"length":1,"stats":{"Line":1},"fn_name":null},{"line":63,"address":[239950,239828],"length":1,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[239965],"length":1,"stats":{"Line":1},"fn_name":null},{"line":66,"address":[239932],"length":1,"stats":{"Line":1},"fn_name":null},{"line":69,"address":[239984],"length":1,"stats":{"Line":1},"fn_name":"begin_sexpr"},{"line":70,"address":[240018],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[240056],"length":1,"stats":{"Line":1},"fn_name":null},{"line":72,"address":[240091],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[240067],"length":1,"stats":{"Line":2},"fn_name":null},{"line":77,"address":[240107,240130,240030],"length":1,"stats":{"Line":2},"fn_name":null},{"line":78,"address":[240111],"length":1,"stats":{"Line":1},"fn_name":null},{"line":79,"address":[240175],"length":1,"stats":{"Line":1},"fn_name":null},{"line":82,"address":[240192],"length":1,"stats":{"Line":1},"fn_name":"end_sexpr"},{"line":83,"address":[240257,240205],"length":1,"stats":{"Line":1},"fn_name":null},{"line":84,"address":[240238],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[182688,181648,182352,181888,182240,182464,182576,182128,182000,181760],"length":1,"stats":{"Line":3},"fn_name":"write_integer<u16>"},{"line":88,"address":[181910,182034,182264,182486,181675,182155,181794,182713,182377,182600],"length":1,"stats":{"Line":3},"fn_name":null},{"line":89,"address":[182739,182512,182182,182403,181826,182627,181702,182066,182291,181936],"length":1,"stats":{"Line":3},"fn_name":null},{"line":92,"address":[183165,182973,182992,182800],"length":1,"stats":{"Line":1},"fn_name":"write_float<f32>"},{"line":93,"address":[182820,183012],"length":1,"stats":{"Line":1},"fn_name":null},{"line":94,"address":[182859,182889,183051,183081],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[240304,240840],"length":1,"stats":{"Line":1},"fn_name":"write_str"},{"line":98,"address":[240365],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[240513,240421,240392],"length":1,"stats":{"Line":2},"fn_name":null},{"line":102,"address":[240415],"length":1,"stats":{"Line":1},"fn_name":null},{"line":103,"address":[183197,183184],"length":1,"stats":{"Line":3},"fn_name":"{closure#0}"},{"line":104,"address":[240445],"length":1,"stats":{"Line":2},"fn_name":null},{"line":107,"address":[240426],"length":1,"stats":{"Line":1},"fn_name":null},{"line":108,"address":[240555],"length":1,"stats":{"Line":1},"fn_name":null},{"line":109,"address":[240592],"length":1,"stats":{"Line":1},"fn_name":null},{"line":110,"address":[240860],"length":1,"stats":{"Line":1},"fn_name":null},{"line":112,"address":[240540],"length":1,"stats":{"Line":1},"fn_name":null},{"line":120,"address":[244112,244032,244624,244832,243808,244320,244704,244768,243664,243952,243584,243872,243744,244240,244544,244400,244480,244176,243504],"length":1,"stats":{"Line":0},"fn_name":"serialize_bool"},{"line":123,"address":[244418,244262,243894,244338,243760,243525,243684,244646,243825,244193,244052,244128,243970,243602,244496,244566,244716,244780,244898],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[244960,245104,245232,245040,245312],"length":1,"stats":{"Line":0},"fn_name":"serialize_seq"},{"line":133,"address":[245057,244982,245383,245175,245254],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[245504,245440],"length":1,"stats":{"Line":0},"fn_name":"serialize_char"},{"line":143,"address":[245529,245459],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[245568,245744,245680],"length":1,"stats":{"Line":0},"fn_name":"serialize_tuple_variant"},{"line":153,"address":[245705,245806,245630],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[240896],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit_struct"},{"line":206,"address":[240964],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[240974],"length":1,"stats":{"Line":1},"fn_name":null},{"line":208,"address":[240989],"length":1,"stats":{"Line":1},"fn_name":null},{"line":211,"address":[211952,212352],"length":1,"stats":{"Line":1},"fn_name":"serialize_newtype_struct<alloc::string::String>"},{"line":215,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":220,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":221,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":224,"address":[241008],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple_struct"},{"line":229,"address":[241079],"length":1,"stats":{"Line":1},"fn_name":null},{"line":230,"address":[241099],"length":1,"stats":{"Line":1},"fn_name":null},{"line":233,"address":[241120],"length":1,"stats":{"Line":1},"fn_name":"serialize_struct"},{"line":234,"address":[241191],"length":1,"stats":{"Line":1},"fn_name":null},{"line":235,"address":[241211],"length":1,"stats":{"Line":1},"fn_name":null},{"line":243,"address":[214544],"length":1,"stats":{"Line":1},"fn_name":"serialize_field<f32>"},{"line":247,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":248,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":249,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":253,"address":[241232],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":254,"address":[241264],"length":1,"stats":{"Line":1},"fn_name":null},{"line":255,"address":[241279],"length":1,"stats":{"Line":1},"fn_name":null},{"line":263,"address":[213312,212752,213648,213872,213424,212864,212976,214208,213200,214096,213984,213088,213536,214320,213760,214432],"length":1,"stats":{"Line":26},"fn_name":"serialize_field<f32>"},{"line":268,"address":[],"length":0,"stats":{"Line":27},"fn_name":null},{"line":269,"address":[],"length":0,"stats":{"Line":26},"fn_name":null},{"line":270,"address":[],"length":0,"stats":{"Line":27},"fn_name":null},{"line":274,"address":[241296],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":275,"address":[241328],"length":1,"stats":{"Line":1},"fn_name":null},{"line":276,"address":[241343],"length":1,"stats":{"Line":1},"fn_name":null},{"line":291,"address":[246320,246048,246448,246192,245984,245920,246384,245856,246112,246256],"length":1,"stats":{"Line":3},"fn_name":"serialize_i8"},{"line":292,"address":[246013,245941,246080,246211,246162,246349,245875,246277,246416,246498],"length":1,"stats":{"Line":3},"fn_name":null},{"line":293,"address":[246516,246231,245895,246367,246098,246031,246180,245961,246434,246297],"length":1,"stats":{"Line":3},"fn_name":null},{"line":313,"address":[245451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[245521],"length":1,"stats":{"Line":0},"fn_name":null},{"line":319,"address":[245621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[245697],"length":1,"stats":{"Line":0},"fn_name":null},{"line":321,"address":[245797],"length":1,"stats":{"Line":0},"fn_name":null},{"line":324,"address":[241360],"length":1,"stats":{"Line":1},"fn_name":"serialize_bool"},{"line":325,"address":[241543,241401],"length":1,"stats":{"Line":1},"fn_name":null},{"line":326,"address":[241818,241525],"length":1,"stats":{"Line":2},"fn_name":null},{"line":327,"address":[241828,241715],"length":1,"stats":{"Line":1},"fn_name":null},{"line":329,"address":[241692],"length":1,"stats":{"Line":1},"fn_name":null},{"line":336,"address":[241984],"length":1,"stats":{"Line":1},"fn_name":"serialize_f32"},{"line":337,"address":[242003],"length":1,"stats":{"Line":1},"fn_name":null},{"line":338,"address":[242020],"length":1,"stats":{"Line":1},"fn_name":null},{"line":341,"address":[242032],"length":1,"stats":{"Line":0},"fn_name":"serialize_f64"},{"line":342,"address":[242051],"length":1,"stats":{"Line":0},"fn_name":null},{"line":343,"address":[242068],"length":1,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[242080],"length":1,"stats":{"Line":1},"fn_name":"serialize_str"},{"line":347,"address":[242130],"length":1,"stats":{"Line":1},"fn_name":null},{"line":348,"address":[242153],"length":1,"stats":{"Line":1},"fn_name":null},{"line":351,"address":[242176],"length":1,"stats":{"Line":1},"fn_name":"serialize_none"},{"line":352,"address":[242179],"length":1,"stats":{"Line":1},"fn_name":null},{"line":355,"address":[211248,211408,211488,211328,211168],"length":1,"stats":{"Line":5},"fn_name":"serialize_some<i16>"},{"line":359,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":362,"address":[242192],"length":1,"stats":{"Line":1},"fn_name":"serialize_unit"},{"line":363,"address":[242348,242216],"length":1,"stats":{"Line":1},"fn_name":null},{"line":364,"address":[242330],"length":1,"stats":{"Line":1},"fn_name":null},{"line":367,"address":[242496],"length":1,"stats":{"Line":0},"fn_name":"serialize_unit_struct"},{"line":368,"address":[242517],"length":1,"stats":{"Line":0},"fn_name":null},{"line":371,"address":[242544],"length":1,"stats":{"Line":2},"fn_name":"serialize_unit_variant"},{"line":377,"address":[242612],"length":1,"stats":{"Line":2},"fn_name":null},{"line":378,"address":[242632],"length":1,"stats":{"Line":2},"fn_name":null},{"line":381,"address":[211568],"length":1,"stats":{"Line":0},"fn_name":"serialize_newtype_struct<f32>"},{"line":385,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[242656],"length":1,"stats":{"Line":2},"fn_name":"serialize_seq"},{"line":389,"address":[242848,242697],"length":1,"stats":{"Line":2},"fn_name":null},{"line":390,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":391,"address":[243043,242996,242818],"length":1,"stats":{"Line":6},"fn_name":null},{"line":392,"address":[243017],"length":1,"stats":{"Line":2},"fn_name":null},{"line":393,"address":[243033],"length":1,"stats":{"Line":2},"fn_name":null},{"line":394,"address":[243086],"length":1,"stats":{"Line":2},"fn_name":null},{"line":397,"address":[243109,243056],"length":1,"stats":{"Line":4},"fn_name":null},{"line":400,"address":[243136],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple"},{"line":401,"address":[243152],"length":1,"stats":{"Line":1},"fn_name":null},{"line":404,"address":[243232],"length":1,"stats":{"Line":1},"fn_name":"serialize_tuple_struct"},{"line":409,"address":[243259],"length":1,"stats":{"Line":1},"fn_name":null},{"line":412,"address":[243280],"length":1,"stats":{"Line":2},"fn_name":"serialize_struct"},{"line":417,"address":[243307],"length":1,"stats":{"Line":2},"fn_name":null},{"line":428,"address":[243328],"length":1,"stats":{"Line":2},"fn_name":"new"},{"line":437,"address":[211616,211712,211808],"length":1,"stats":{"Line":5},"fn_name":"serialize_element<&alloc::string::String>"},{"line":441,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":442,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":443,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":447,"address":[243376],"length":1,"stats":{"Line":2},"fn_name":"end"},{"line":448,"address":[243410],"length":1,"stats":{"Line":2},"fn_name":null},{"line":449,"address":[243440],"length":1,"stats":{"Line":2},"fn_name":null},{"line":451,"address":[243424],"length":1,"stats":{"Line":2},"fn_name":null},{"line":459,"address":[211904],"length":1,"stats":{"Line":1},"fn_name":"serialize_element<f32>"},{"line":463,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":466,"address":[243456],"length":1,"stats":{"Line":1},"fn_name":"end"},{"line":467,"address":[243483],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":124,"coverable":146},{"path":["/","home","runner","work","serde_sexpr","serde_sexpr","tests","test.rs"],"content":"use indoc::indoc;\nuse paste::paste;\nuse pretty_assertions::assert_eq;\nuse serde::{de::DeserializeOwned, Deserialize, Serialize};\nuse serde_sexpr::Literal;\nuse std::fmt::Debug;\n\nfn assert_eq_parsed<T>(input: &str, expected: &T)\nwhere\n\tT: Debug + DeserializeOwned + PartialEq\n{\n\tlet parsed: T = serde_sexpr::from_str(input).expect(\"Failed to parse input\");\n\tassert_eq!(&parsed, expected);\n}\n\nfn assert_eq_ugly<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written = serde_sexpr::to_string(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected);\n}\n\nfn assert_eq_pretty<T>(input: &T, expected: &str)\nwhere\n\tT: ?Sized + Serialize\n{\n\tlet written =\n\t\tserde_sexpr::to_string_pretty(input).expect(\"Failed to write input\");\n\tassert_eq!(written.as_str(), expected.trim_end_matches('\\n'));\n}\n\nmacro_rules! test_case {\n\t(name: $name:ident,input: $input:expr,value: $value:expr) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n\n\t(\n\t\tname: $name:ident,input: $input:expr,pretty: $pretty:expr,value: $value:expr\n\t) => {\n\t\tpaste! {\n\t\t\tconst [<TEST_CASE_INPUT_ $name:upper>]: &str = $input;\n\t\t\tconst [<TEST_CASE_PRETTY_ $name:upper>]: &str = $pretty;\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_INPUT_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_deserialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_parsed([<TEST_CASE_PRETTY_ $name:upper>], &value);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_ugly_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_ugly(&value, [<TEST_CASE_INPUT_ $name:upper>]);\n\t\t\t}\n\n\t\t\t#[test]\n\t\t\tfn [<test_serialize_pretty_ $name>]() {\n\t\t\t\tlet value = $value;\n\t\t\t\tassert_eq_pretty(&value, [<TEST_CASE_PRETTY_ $name:upper>]);\n\t\t\t}\n\t\t}\n\t};\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"locked\")]\nstruct Locked;\n\ntest_case! {\n\tname: locked,\n\tinput: \"(locked)\",\n\tvalue: Locked\n}\n\n#[test]\nfn test_deserialize_locked_trailing_tokens() {\n\tlet input = \"(locked))\";\n\tlet result = serde_sexpr::from_str::<Locked>(input);\n\tassert!(matches!(\n\t\tresult,\n\t\tErr(serde_sexpr::de::Error::TrailingTokens)\n\t));\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"attr\")]\nstruct Attribute(String);\n\ntest_case! {\n\tname: attr,\n\tinput: \"(attr smd)\",\n\tvalue: Attribute(\"smd\".to_owned())\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"descr\")]\nstruct Description(String);\n\ntest_case! {\n\tname: descr,\n\tinput: r#\"(descr \"Hello \\\"World\\\", this \\\"\\\\\\\" is an amazing backspace! \\\\\")\"#,\n\tvalue: Description(\n\t\tr#\"Hello \"World\", this \"\\\" is an amazing backspace! \\\"#.to_owned()\n\t)\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"at\")]\nstruct Position {\n\tx: f32,\n\ty: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\trot: Option<i16>\n}\n\ntest_case! {\n\tname: position_without_rot,\n\tinput: \"(at 1.23 -4.56)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: None\n\t}\n}\n\ntest_case! {\n\tname: position_with_rot,\n\tinput: \"(at 1.23 -4.56 -90)\",\n\tvalue: Position {\n\t\tx: 1.23,\n\t\ty: -4.56,\n\t\trot: Some(-90)\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"size\")]\nstruct Size(f32, f32);\n\ntest_case! {\n\tname: size,\n\tinput: \"(size 1.23 4.56)\",\n\tvalue: Size(1.23, 4.56)\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"thickness\")]\nstruct Thickness(f32);\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"font\")]\nstruct Font {\n\tsize: Size,\n\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tthickness: Option<Thickness>,\n\n\tbold: bool\n}\n\ntest_case! {\n\tname: font,\n\tinput: \"(font (size 1.27 1.27))\",\n\tpretty: indoc!(r#\"\n\t\t(font\n\t\t  (size 1.27 1.27))\n\t\"#),\n\tvalue: Font {\n\t\tsize: Size(1.27, 1.27),\n\t\tthickness: None,\n\t\tbold: false\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"line\")]\nstruct Line {\n\tstart: (f32, f32),\n\tend: (f32, f32),\n\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tlocked: Option<()>\n}\n\ntest_case! {\n\tname: line_unlocked,\n\tinput: \"(line (start -2.54 1.27) (end 2.54 1.27))\",\n\tpretty: indoc!(r#\"\n\t\t(line\n\t\t  (start -2.54 1.27)\n\t\t  (end 2.54 1.27))\n\t\"#),\n\tvalue: Line {\n\t\tstart: (-2.54, 1.27),\n\t\tend: (2.54, 1.27),\n\t\tlocked: None\n\t}\n}\n\ntest_case! {\n\tname: line_locked,\n\tinput: \"(line (start -2.54 1.27) (end 2.54 1.27) (locked))\",\n\tpretty: indoc!(r#\"\n\t\t(line\n\t\t  (start -2.54 1.27)\n\t\t  (end 2.54 1.27)\n\t\t  (locked))\n\t\"#),\n\tvalue: Line {\n\t\tstart: (-2.54, 1.27),\n\t\tend: (2.54, 1.27),\n\t\tlocked: Some(())\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\nenum PadType {\n\t#[serde(rename = \"thru-hole\")]\n\tThroughHole,\n\n\t#[serde(rename = \"smd\")]\n\tSmd\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(rename_all = \"lowercase\")]\nenum PadShape {\n\tCircle,\n\tRect\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"drill\")]\nstruct Drill {\n\toval: bool,\n\tdrill1: f32,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill2: Option<f32>\n}\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"pad\")]\nstruct Pad {\n\tindex: Literal,\n\tty: PadType,\n\tshape: PadShape,\n\tat: Position,\n\tsize: Size,\n\t#[serde(with = \"serde_sexpr::Option\")]\n\tdrill: Option<Drill>,\n\tlayers: Vec<String>\n}\n\ntest_case! {\n\tname: pad_without_drill,\n\tinput: r#\"(pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 smd rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::Smd,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: None,\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill 0.635) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill 0.635)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: Some(Drill {\n\t\t\toval: false,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: None\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\ntest_case! {\n\tname: pad_with_oval_drill,\n\tinput: r#\"(pad 1 thru-hole rect (at 0 0) (size 1.27 1.27) (drill oval 0.635 0.847) (layers \"F.Cu\"))\"#,\n\tpretty: indoc!(r#\"\n\t\t(pad 1 thru-hole rect\n\t\t  (at 0 0)\n\t\t  (size 1.27 1.27)\n\t\t  (drill oval 0.635 0.847)\n\t\t  (layers \"F.Cu\"))\n\t\"#),\n\tvalue: Pad {\n\t\tindex: 1.into(),\n\t\tty: PadType::ThroughHole,\n\t\tshape: PadShape::Rect,\n\t\tat: Position {\n\t\t\tx: 0.0,\n\t\t\ty: 0.0,\n\t\t\trot: None\n\t\t},\n\t\tsize: Size(1.27, 1.27),\n\t\tdrill: Some(Drill {\n\t\t\toval: true,\n\t\t\tdrill1: 0.635,\n\t\t\tdrill2: Some(0.847)\n\t\t}),\n\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t}\n}\n\n// ##################################################################################\n\n#[derive(Debug, Deserialize, PartialEq, Serialize)]\n#[serde(deny_unknown_fields, rename = \"footprint\")]\nstruct Footprint {\n\tlibrary_link: String,\n\n\t#[serde(default, rename = \"\")]\n\tpads: Vec<Pad>\n}\n\ntest_case! {\n\tname: footprint_without_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\")\"#,\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_one_pad,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![Pad {\n\t\t\tindex: 1.into(),\n\t\t\tty: PadType::Smd,\n\t\t\tshape: PadShape::Rect,\n\t\t\tat: Position {\n\t\t\t\tx: 0.0,\n\t\t\t\ty: 0.0,\n\t\t\t\trot: None\n\t\t\t},\n\t\t\tsize: Size(1.27, 1.27),\n\t\t\tdrill: None,\n\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t}]\n\t}\n}\n\ntest_case! {\n\tname: footprint_with_two_pads,\n\tinput: r#\"(footprint \"Capacitor_SMD:C_0402\" (pad 1 smd rect (at 0 0) (size 1.27 1.27) (layers \"F.Cu\")) (pad 2 smd rect (at 2.54 0) (size 1.27 1.27) (layers \"F.Cu\")))\"#,\n\tpretty: indoc!(r#\"\n\t\t(footprint \"Capacitor_SMD:C_0402\"\n\t\t  (pad 1 smd rect\n\t\t    (at 0 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\"))\n\t\t  (pad 2 smd rect\n\t\t    (at 2.54 0)\n\t\t    (size 1.27 1.27)\n\t\t    (layers \"F.Cu\")))\n\t\"#),\n\tvalue: Footprint {\n\t\tlibrary_link: \"Capacitor_SMD:C_0402\".to_owned(),\n\t\tpads: vec![\n\t\t\tPad {\n\t\t\t\tindex: 1.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 0.0,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size(1.27, 1.27),\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t},\n\t\t\tPad {\n\t\t\t\tindex: 2.into(),\n\t\t\t\tty: PadType::Smd,\n\t\t\t\tshape: PadShape::Rect,\n\t\t\t\tat: Position {\n\t\t\t\t\tx: 2.54,\n\t\t\t\t\ty: 0.0,\n\t\t\t\t\trot: None\n\t\t\t\t},\n\t\t\t\tsize: Size(1.27, 1.27),\n\t\t\t\tdrill: None,\n\t\t\t\tlayers: vec![\"F.Cu\".to_owned()]\n\t\t\t}\n\t\t]\n\t}\n}\n","traces":[],"covered":0,"coverable":0}]}